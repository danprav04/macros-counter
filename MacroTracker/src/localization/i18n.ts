// src/localization/i18n.ts
import * as Localization from 'expo-localization';
import { I18n } from 'i18n-js';
import en from './languages/en.json';
import ru from './languages/ru.json';
import he from './languages/he.json';
import { Platform, I18nManager } from 'react-native';
// Import specific date-fns locales statically
import { enUS, ru as ruLocale, he as heLocale } from 'date-fns/locale';

const translations = {
  en,
  ru,
  he,
};

const i18n = new I18n(translations);

// --- Helper Type Generation for Translation Keys ---

// Helper type to recursively generate dot-notation paths including intermediate paths
type Paths<T> = T extends object ? {
    [K in keyof T]: K extends string ? `${K}` | `${K}.${Paths<T[K]>}` : never;
}[keyof T] : never;

// Flattens the union type generated by Paths (removes trailing dots)
type FlattenPath<T extends string> =
    T extends `${infer Head}.${infer Tail}` ?
        Tail extends '' ? Head : `${Head}.${FlattenPath<Tail>}` :
    T;

// Final type representing all valid translation keys
export type TranslationKey = FlattenPath<Paths<typeof en>>;

// --- End Helper Type Generation ---


// Set initial locale and handle RTL
export const setLocale = (locale: string) => {
  const languageTag = locale.split('-')[0];
  i18n.locale = languageTag;
  i18n.defaultLocale = 'en';

  const isRTL = languageTag === 'he';
  if (Platform.OS !== 'web' && I18nManager.isRTL !== isRTL) {
    I18nManager.forceRTL(isRTL);
    console.log(`RTL forced to: ${isRTL} for locale: ${languageTag}. App restart/reload may be needed for full layout update.`);
  } else if (Platform.OS === 'web') {
      document.documentElement.dir = isRTL ? 'rtl' : 'ltr';
  }
};

const deviceLocale = Localization.getLocales()?.[0]?.languageTag || 'en-US';
setLocale(deviceLocale);

// Updated t function with the correct type for scope
export const t = (scope: TranslationKey, options?: any): string => {
  // Cast scope to string for the underlying i18n.t function
  return i18n.t(scope as string, { ...options, locale: i18n.locale });
};

// Function to get date-fns locale (unchanged)
export const getDateFnLocale = async () => {
  const currentLocale = i18n.locale.split('-')[0];
  switch (currentLocale) {
    case 'ru':
      return ruLocale;
    case 'he':
      return heLocale;
    case 'en':
    default:
      return enUS;
  }
};

export default i18n;