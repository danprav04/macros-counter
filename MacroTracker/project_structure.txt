.gitignore
app.json
App.tsx
assets/
  adaptive-icon.png
  favicon.png
  icon.png
  splash.png
eas.json
index.ts
package.json
projectToFile.js
src/
  assets/
    food_icons/
      combinationTags.ts
      iconDefinitions.ts
  components/
    AccountSettings.tsx
    AddEntryModal/
      AddEntryModal.tsx
      AmountInputSection.tsx
      FoodSelectionList.tsx
      ModalHeader.tsx
    AddFoodModal.tsx
    ConfirmationModal.tsx
    DailyEntryListItem.tsx
    DailyGoalsInput.tsx
    DailyProgress.tsx
    DataManagementButtons.tsx
    DateNavigator.tsx
    Entry/
      QuickAddItem.tsx
    FoodFormFields.tsx
    FoodItem.tsx
    QuickAddList.tsx
    StatisticsChart.tsx
    ThemeSwitch.tsx
  context/
    AuthContext.tsx
  localization/
    i18n.ts
    languages/
      en.json
      he.json
      ru.json
  navigation/
    AppNavigator.tsx
  screens/
    DailyEntryScreen.tsx
    FoodListScreen.tsx
    ForgotPasswordScreen.tsx
    LoginScreen.tsx
    QuestionnaireScreen.tsx
    RegisterScreen.tsx
    SettingsScreen.tsx
  services/
    authService.ts
    backendService.ts
    clientIDService.ts
    foodService.ts
    storageService.ts
  types/
    dailyEntry.ts
    food.ts
    macros.ts
    openRouterTypes.ts
    questionnaire.ts
    settings.ts
    token.ts
  utils/
    dateUtils.ts
    foodIconMatcher.ts
    gradingUtils.ts
    iconUtils.ts
    imageUtils.ts
    languageUtils.ts
    macros.ts
    searchUtils.ts
    units.ts
    validationUtils.ts
tsconfig.json

---------- .gitignore ----------
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

---------- END .gitignore ----------


---------- app.json ----------
{
  "expo": {
    "name": "MacrosVisionAI",
    "slug": "MacroTracker",
    "version": "2.0.2",
    "owner": "danprav",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "scheme": "macrosvisionai",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#000000"
    },
    "androidStatusBar": {
      "backgroundColor": "#000000",
      "translucent": false,
      "barStyle": "light-content"
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.macrosvisionai.app",
      "infoPlist": {
        "UIStatusBarStyle": "UIStatusBarStyleAutomatic",
        "NSCameraUsageDescription": "Allow $(PRODUCT_NAME) to access your camera to take photos of food for macro analysis.",
        "NSPhotoLibraryUsageDescription": "Allow $(PRODUCT_NAME) to access your photos to select food images for macro analysis."
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.macrosvisionai.app",
      "userInterfaceStyle": "automatic",
      "permissions": [
        "android.permission.CAMERA",
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.WRITE_EXTERNAL_STORAGE"
      ],
      "intentFilters": [
        {
          "action": "VIEW",
          "autoVerify": true,
          "data": [
            {
              "scheme": "macrosvisionai",
              "host": "open-add-food-modal"
            }
          ],
          "category": [
            "BROWSABLE",
            "DEFAULT"
          ]
        }
      ]
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "plugins": [
      [
        "expo-document-picker",
        {
          "appleTeamId": "YOUR_TEAM_ID"
        }
      ],
      [
        "expo-image-picker",
        {
          "photosPermission": "Allow $(PRODUCT_NAME) to access your photos to select food images for macro analysis.",
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera to take photos of food for macro analysis."
        }
      ]
    ],
    "extra": {
      "eas": {
        "projectId": "25ac2bcf-78a3-4f2c-a635-4fcaae7b93f1"
      },
      "env": {
         "BACKEND_URL_PRODUCTION": "https://macros-vision-ai.xyz",
         "BACKEND_URL_DEVELOPMENT": "https://quetzal-glad-lark.ngrok-free.app"
      }
    }
  }
}
---------- END app.json ----------


---------- App.tsx ----------
// App.tsx
import "react-native-get-random-values"; // MUST BE FIRST
import Toast from "react-native-toast-message";
import React from "react";
import AppNavigator from "./src/navigation/AppNavigator";
import { SafeAreaProvider } from "react-native-safe-area-context";
import { Text, TextInput } from "react-native";
import { AuthProvider } from "./src/context/AuthContext";

// --- FONT SCALING PATCH ---
if ((Text as any).defaultProps == null) (Text as any).defaultProps = {};
(Text as any).defaultProps.allowFontScaling = false;
if ((TextInput as any).defaultProps == null) (TextInput as any).defaultProps = {};
(TextInput as any).defaultProps.allowFontScaling = false;
// --- END FONT SCALING PATCH ---

const App = () => {
  return (
    <AuthProvider>
      <SafeAreaProvider>
        <AppNavigator />
        <Toast />
      </SafeAreaProvider>
    </AuthProvider>
  );
};

export default App;
---------- END App.tsx ----------


---------- adaptive-icon.png ----------
(Image file - content not included)
---------- END adaptive-icon.png ----------


---------- favicon.png ----------
(Image file - content not included)
---------- END favicon.png ----------


---------- icon.png ----------
(Image file - content not included)
---------- END icon.png ----------


---------- splash.png ----------
(Image file - content not included)
---------- END splash.png ----------


---------- eas.json ----------
{
  "cli": {
    "version": ">= 13.4.1",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "android": {
        "buildType": "apk"
      },
      "env": {
         "BACKEND_URL_PRODUCTION": "https://macros-vision-ai.xyz",
         "BACKEND_URL_DEVELOPMENT": "http://192.168.1.185:8000"
      }
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}
---------- END eas.json ----------


---------- index.ts ----------
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);

---------- END index.ts ----------


---------- package.json ----------
{
  "name": "macrosvisionai",
  "license": "0BSD",
  "version": "1.0.0",
  "main": "index.ts",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@react-native-async-storage/async-storage": "^2.1.2",
    "@react-native-community/datetimepicker": "8.2.0",
    "@react-native-picker/picker": "^2.11.0",
    "@react-navigation/bottom-tabs": "^7.3.1",
    "@react-navigation/native": "^7.0.17",
    "@react-navigation/native-stack": "^7.3.12",
    "@rneui/base": "^4.0.0-rc.7",
    "@rneui/themed": "^4.0.0-rc.8",
    "@types/d3-scale": "^4.0.9",
    "d3-scale": "^4.0.2",
    "date-fns": "^4.1.0",
    "expo": "~52.0.40",
    "expo-constants": "~16.0.2",
    "expo-document-picker": "^13.0.3",
    "expo-file-system": "^18.0.12",
    "expo-image-manipulator": "~13.0.5",
    "expo-image-picker": "^16.0.6",
    "expo-localization": "~15.0.3",
    "expo-sharing": "~13.0.1",
    "expo-status-bar": "~2.0.1",
    "i18n-js": "^4.5.1",
    "react": "18.3.1",
    "react-native": "0.76.7",
    "react-native-config": "^1.5.5",
    "react-native-get-random-values": "^1.11.0",
    "react-native-mime-types": "^2.5.0",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "^4.14.1",
    "react-native-screens": "^4.9.2",
    "react-native-svg": "^15.11.2",
    "react-native-toast-message": "^2.2.1",
    "react-native-uuid": "^2.0.3",
    "react-native-webview": "^13.13.4",
    "uuid": "^11.1.0",
    "expo-linking": "~7.0.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/i18n-js": "^4.0.1",
    "@types/react": "~18.3.12",
    "@types/react-native": "^0.73.0",
    "@types/react-native-svg-charts": "^5.0.16",
    "@types/uuid": "^10.0.0",
    "typescript": "^5.3.3",
    "victory": "^37.3.6"
  },
  "private": true
}

---------- END package.json ----------


---------- projectToFile.js ----------
const fs = require('fs');
const path = require('path');

async function generateProjectStructureAndContent(projectRoot, outputFile) {
    const excludedDirs = ['node_modules', '.git', '.expo', 'android', 'ios', '__tests__', 'dist', 'build', '.vscode'];
    const excludedFiles = ['.DS_Store', 'package-lock.json', 'yarn.lock', 'bun.lockb', 'metro.config.js', 'babel.config.js'];
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.ico']; // Add more if needed

    let fileStructureTree = '';  // For the initial tree structure
    let fileContents = '';      // For the file contents

    async function traverseDirectory(dir, indent = '') {
        const entries = await fs.promises.readdir(dir, { withFileTypes: true });

        for (const entry of entries) {
            const fullPath = path.join(dir, entry.name);

            if (excludedDirs.includes(entry.name)) {
                continue;
            }

            if (entry.isDirectory()) {
                fileStructureTree += `${indent}${entry.name}/\n`;
                await traverseDirectory(fullPath, indent + '  ');
            } else if (entry.isFile()) {
                if (excludedFiles.includes(entry.name)) {
                    continue;
                }
                fileStructureTree += `${indent}${entry.name}\n`;
                const fileExtension = path.extname(entry.name).toLowerCase();

                if (!imageExtensions.includes(fileExtension)) {
                    fileContents += `\n---------- ${entry.name} ----------\n`;
                    try {
                        const fileContent = await fs.promises.readFile(fullPath, 'utf-8');
                        fileContents += `${fileContent}\n`;
                    } catch (readError) {
                        fileContents += `ERROR READING FILE: ${readError.message}\n`;
                    }
                    fileContents += `---------- END ${entry.name} ----------\n\n`;
                } else {
                     fileContents += `\n---------- ${entry.name} ----------\n`;
                     fileContents += `(Image file - content not included)\n`;
                     fileContents += `---------- END ${entry.name} ----------\n\n`;
                }
            }
        }
    }

    try {
        await traverseDirectory(projectRoot);
        const fullOutput = fileStructureTree + fileContents;

        await fs.promises.writeFile(outputFile, fullOutput);
        console.log(`Project structure and content written to ${outputFile}`);

    } catch (error) {
        console.error('An error occurred:', error);
        process.exit(1);
    }
}

// --- Main execution ---

const projectRoot = process.cwd(); // Use the current working directory
const outputFile = 'project_structure.txt';

// Check if the projectRoot exists.
fs.stat(projectRoot, (err, stats) => {
    if (err) {
        console.error(`Error: Project root directory "${projectRoot}" not found or not accessible.`);
        process.exit(1);
    }

    if (!stats.isDirectory()) {
        console.error(`Error: "${projectRoot}" is not a directory.`);
        process.exit(1);
    }

    generateProjectStructureAndContent(projectRoot, outputFile);
});
---------- END projectToFile.js ----------


---------- combinationTags.ts ----------
// src/assets/food_icons/combinationTags.ts

// This file maps broad search terms (in multiple languages) to specific tagKeys
// from foodIconDefinitions.ts. This enables searching for "vegetable" and
// finding items tagged as "carrot", "broccoli", etc.

// Keys are lowercase search terms. Values are arrays of tagKey strings.
export const combinationTags: Record<string, string[]> = {
  // --- VEGETABLES ---
  "vegetable": [
    "carrot", "broccoli", "leafyGreen", "cucumber", "pepperGeneral",
    "bellPepper", "corn", "potato", "onion", "garlic", "eggplant",
    "mushroom", "tomato" // Tomato is culinarily a vegetable
  ],
  "vegetables": [
    "carrot", "broccoli", "leafyGreen", "cucumber", "pepperGeneral",
    "bellPepper", "corn", "potato", "onion", "garlic", "eggplant",
    "mushroom", "tomato"
  ],
  "овощ": [ // Russian for vegetable (singular)
    "carrot", "broccoli", "leafyGreen", "cucumber", "pepperGeneral",
    "bellPepper", "corn", "potato", "onion", "garlic", "eggplant",
    "mushroom", "tomato"
  ],
  "овощи": [ // Russian for vegetables (plural)
    "carrot", "broccoli", "leafyGreen", "cucumber", "pepperGeneral",
    "bellPepper", "corn", "potato", "onion", "garlic", "eggplant",
    "mushroom", "tomato"
  ],
  "ירק": [ // Hebrew for vegetable (singular)
    "carrot", "broccoli", "leafyGreen", "cucumber", "pepperGeneral",
    "bellPepper", "corn", "potato", "onion", "garlic", "eggplant",
    "mushroom", "tomato"
  ],
  "ירקות": [ // Hebrew for vegetables (plural)
    "carrot", "broccoli", "leafyGreen", "cucumber", "pepperGeneral",
    "bellPepper", "corn", "potato", "onion", "garlic", "eggplant",
    "mushroom", "tomato"
  ],

  // --- FRUITS ---
  "fruit": [
    "apple", "banana", "grapes", "strawberry", "blueberry", "orange",
    "lemonLime", "watermelon", "pineapple", "mango", "kiwi",
    "peachNectarine", "cherry", "pear", "avocado", "coconut", "genericFruit"
  ],
  "fruits": [
    "apple", "banana", "grapes", "strawberry", "blueberry", "orange",
    "lemonLime", "watermelon", "pineapple", "mango", "kiwi",
    "peachNectarine", "cherry", "pear", "avocado", "coconut", "genericFruit"
  ],
  "фрукт": [ // Russian for fruit (singular)
    "apple", "banana", "grapes", "strawberry", "blueberry", "orange",
    "lemonLime", "watermelon", "pineapple", "mango", "kiwi",
    "peachNectarine", "cherry", "pear", "avocado", "coconut", "genericFruit"
  ],
  "фрукты": [ // Russian for fruits (plural)
    "apple", "banana", "grapes", "strawberry", "blueberry", "orange",
    "lemonLime", "watermelon", "pineapple", "mango", "kiwi",
    "peachNectarine", "cherry", "pear", "avocado", "coconut", "genericFruit"
  ],
  "פרי": [ // Hebrew for fruit (singular)
    "apple", "banana", "grapes", "strawberry", "blueberry", "orange",
    "lemonLime", "watermelon", "pineapple", "mango", "kiwi",
    "peachNectarine", "cherry", "pear", "avocado", "coconut", "genericFruit"
  ],
  "פירות": [ // Hebrew for fruits (plural)
    "apple", "banana", "grapes", "strawberry", "blueberry", "orange",
    "lemonLime", "watermelon", "pineapple", "mango", "kiwi",
    "peachNectarine", "cherry", "pear", "avocado", "coconut", "genericFruit"
  ],

  // --- MEATS ---
  "meat": ["poultry", "redMeat", "bacon", "processedMeat"],
  "мясо": ["poultry", "redMeat", "bacon", "processedMeat"], // Russian
  "בשר": ["poultry", "redMeat", "bacon", "processedMeat"], // Hebrew

  // --- DRINKS ---
  "drink": ["coffee", "tea", "softDrinkJuice", "water", "wine", "beer", "cocktail"],
  "drinks": ["coffee", "tea", "softDrinkJuice", "water", "wine", "beer", "cocktail"],
  "напиток": ["coffee", "tea", "softDrinkJuice", "water", "wine", "beer", "cocktail"], // Russian
  "напитки": ["coffee", "tea", "softDrinkJuice", "water", "wine", "beer", "cocktail"],
  "משקה": ["coffee", "tea", "softDrinkJuice", "water", "wine", "beer", "cocktail"], // Hebrew
  "משקאות": ["coffee", "tea", "softDrinkJuice", "water", "wine", "beer", "cocktail"],

  // --- DAIRY ---
  "dairy": ["milk", "cheese", "butter", "yogurt"],
  "молочные продукты": ["milk", "cheese", "butter", "yogurt"], // Russian
  "מוצרי חלב": ["milk", "cheese", "butter", "yogurt"], // Hebrew
};
---------- END combinationTags.ts ----------


---------- iconDefinitions.ts ----------
// src/assets/food_icons/iconDefinitions.ts

// The `icon` property should be an emoji string.
// The `tagKey` property refers to a key within the "foodIconTags" section of your language JSON files.
// For example, a `tagKey` of "apple" will look for `t('foodIconTags.apple')` which should return an array of tags.
export interface FoodIconDefinition {
  icon: string; // Emoji character
  tagKey: string; // Base key for tags, e.g., "apple", "banana". Full key will be "foodIconTags.apple"
  priority?: number; // Optional: Higher number means higher priority if multiple tags match
}

export const foodIconDefinitions: FoodIconDefinition[] = [
  // Fruits
  { icon: '🍎', tagKey: 'apple', priority: 10 },
  { icon: '🍌', tagKey: 'banana', priority: 10 },
  { icon: '🍇', tagKey: 'grapes', priority: 10 },
  { icon: '🍓', tagKey: 'strawberry', priority: 10 },
  { icon: '🫐', tagKey: 'blueberry', priority: 10 },
  { icon: '🍊', tagKey: 'orange', priority: 10 },
  { icon: '🍋', tagKey: 'lemonLime', priority: 10 },
  { icon: '🍉', tagKey: 'watermelon', priority: 10 },
  { icon: '🍍', tagKey: 'pineapple', priority: 10 },
  { icon: '🥭', tagKey: 'mango', priority: 10 },
  { icon: '🥝', tagKey: 'kiwi', priority: 10 },
  { icon: '🍑', tagKey: 'peachNectarine', priority: 10 },
  { icon: '🍒', tagKey: 'cherry', priority: 10 },
  { icon: '🍐', tagKey: 'pear', priority: 10 },
  { icon: '🥑', tagKey: 'avocado', priority: 10 },
  { icon: '🥥', tagKey: 'coconut', priority: 10 },
  { icon: '🍅', tagKey: 'tomato', priority: 9 }, // Often culinary vegetable

  // Vegetables
  { icon: '🥕', tagKey: 'carrot', priority: 10 },
  { icon: '🥦', tagKey: 'broccoli', priority: 10 },
  { icon: '🥬', tagKey: 'leafyGreen', priority: 10 },
  { icon: '🥒', tagKey: 'cucumber', priority: 10 },
  { icon: '🌶️', tagKey: 'pepperGeneral', priority: 10 }, // General pepper
  { icon: '🫑', tagKey: 'bellPepper', priority: 11 },   // More specific bell pepper (can cover green, yellow, orange)
  { icon: '🌽', tagKey: 'corn', priority: 10 },
  { icon: '🥔', tagKey: 'potato', priority: 10 },
  { icon: '🧅', tagKey: 'onion', priority: 10 },
  { icon: '🧄', tagKey: 'garlic', priority: 10 },
  { icon: '🍆', tagKey: 'eggplant', priority: 10 },
  { icon: '🍄', tagKey: 'mushroom', priority: 10 },

  // Meats & Poultry
  { icon: '🍗', tagKey: 'poultry', priority: 10 },
  { icon: '🥩', tagKey: 'redMeat', priority: 10 },
  { icon: '🥓', tagKey: 'bacon', priority: 10 },
  { icon: '🍖', tagKey: 'processedMeat', priority: 9 },

  // Seafood
  { icon: '🐟', tagKey: 'fish', priority: 10 },
  { icon: '🦐', tagKey: 'shrimpPrawn', priority: 10 },
  { icon: '🦞', tagKey: 'lobster', priority: 10 },
  { icon: '🦀', tagKey: 'crab', priority: 10 },
  { icon: '🍣', tagKey: 'sushi', priority: 10 },

  // Dairy & Eggs
  { icon: '🥚', tagKey: 'egg', priority: 10 },
  { icon: '🥛', tagKey: 'milk', priority: 10 },
  { icon: '🧀', tagKey: 'cheese', priority: 10 },
  { icon: '🧈', tagKey: 'butter', priority: 10 },
  { icon: '🍦', tagKey: 'iceCream', priority: 8 },
  { icon: '🍧', tagKey: 'yogurt', priority: 10 }, // Changed from 🍧 to a more generic yogurt emoji, or keep 🍧 for frozen

  // Grains, Bread, Pasta, Cereal
  { icon: '🍞', tagKey: 'bread', priority: 10 },
  { icon: '🍚', tagKey: 'rice', priority: 10 },
  { icon: '🍝', tagKey: 'pasta', priority: 10 },
  { icon: '🥣', tagKey: 'cerealOats', priority: 10 },
  { icon: '🌾', tagKey: 'otherGrains', priority: 10 }, // Quinoa, couscous etc.
  { icon: '🫓', tagKey: 'flatbread', priority: 10 },

  // Legumes
  { icon: '🫘', tagKey: 'beansLegumes', priority: 10 },
  { icon: '🥜', tagKey: 'peanut', priority: 9 },

  // Nuts & Seeds
  { icon: '🌰', tagKey: 'nuts', priority: 10 },
  { icon: '🌻', tagKey: 'seeds', priority: 10 }, // Using sunflower as general seed representation

  // Sweets & Snacks
  { icon: '🍩', tagKey: 'donut', priority: 7 },
  { icon: '🍪', tagKey: 'cookie', priority: 7 },
  { icon: '🍫', tagKey: 'chocolate', priority: 7 },
  { icon: '🍰', tagKey: 'cake', priority: 7 },
  { icon: '🍬', tagKey: 'candy', priority: 6 },
  { icon: '🍿', tagKey: 'popcorn', priority: 8 },
  { icon: '🥨', tagKey: 'pretzel', priority: 8 },
  { icon: '🍟', tagKey: 'friesChips', priority: 7 },

  // Drinks
  { icon: '☕', tagKey: 'coffee', priority: 9 },
  { icon: '🍵', tagKey: 'tea', priority: 9 },
  { icon: '🥤', tagKey: 'softDrinkJuice', priority: 8 },
  { icon: '💧', tagKey: 'water', priority: 10 },
  { icon: '🍷', tagKey: 'wine', priority: 7 },
  { icon: '🍺', tagKey: 'beer', priority: 7 },
  { icon: '🍸', tagKey: 'cocktail', priority: 7 },

  // Prepared Meals / Dishes
  { icon: '🍕', tagKey: 'pizza', priority: 8 },
  { icon: '🍔', tagKey: 'burger', priority: 8 },
  { icon: '🌮', tagKey: 'tacoBurrito', priority: 8 },
  { icon: '🥪', tagKey: 'sandwich', priority: 9 },
  { icon: '🍲', tagKey: 'soupStew', priority: 9 },
  { icon: '🥗', tagKey: 'salad', priority: 10 },
  { icon: '🍜', tagKey: 'noodleDish', priority: 9 },


  // Generic fallbacks - these should have broad tags in the language files
  { icon: '🍓', tagKey: 'genericFruit', priority: 2 },
  { icon: '🥬', tagKey: 'genericVegetable', priority: 2 },
  { icon: '🍽️', tagKey: 'genericMeal', priority: 1 },
  { icon: '❓', tagKey: 'unknownFood', priority: 0 }, // Lowest priority
];
---------- END iconDefinitions.ts ----------


---------- AccountSettings.tsx ----------
// src/components/AccountSettings.tsx
import React from 'react';
import { View, ActivityIndicator } from 'react-native';
import { Text, makeStyles, Button, Icon, ListItem, useTheme } from '@rneui/themed';
import { t } from '../localization/i18n';

interface AccountSettingsProps {
    userCoins: number | null;
    isLoadingCoins: boolean;
    isAddingCoins: boolean;
    onAddTestCoins: () => void;
}

const AccountSettings: React.FC<AccountSettingsProps> = ({
    userCoins,
    isLoadingCoins,
    isAddingCoins,
    onAddTestCoins,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    return (
        <View>
            <ListItem bottomDivider containerStyle={styles.listItem}>
                <Icon name="database" type="material-community" color={theme.colors.warning} />
                <ListItem.Content>
                    <ListItem.Title style={styles.listItemTitle}>{t('accountSettings.coinBalance')}</ListItem.Title>
                </ListItem.Content>
                {isLoadingCoins ? (
                    <ActivityIndicator size="small" color={theme.colors.primary} />
                ) : (
                    <Text style={styles.coinValue}>{userCoins !== null ? userCoins : t('accountSettings.notApplicable')}</Text>
                )}
            </ListItem>

            {/* This button and its warning are only available in development builds */}
            {__DEV__ && (
                <>
                    <Button
                        title={t('accountSettings.addTestCoins')}
                        onPress={onAddTestCoins}
                        buttonStyle={[styles.button, { backgroundColor: theme.colors.success, marginTop: 10 }]}
                        icon={<Icon name="plus-circle-outline" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
                        loading={isAddingCoins}
                        disabled={isAddingCoins || isLoadingCoins}
                    />
                    <Text style={styles.testButtonWarning}>
                        {t('accountSettings.testButtonWarning')}
                    </Text>
                </>
            )}
        </View>
    );
};

const useStyles = makeStyles((theme) => ({
    listItem: {
        backgroundColor: theme.colors.background,
        paddingVertical: 15,
    },
    listItemTitle: {
        color: theme.colors.text,
        fontWeight: '500',
        textAlign: 'left',
    },
    coinValue: {
        color: theme.colors.primary,
        fontWeight: 'bold',
        fontSize: 16,
    },
    button: {
        marginBottom: 10,
        borderRadius: 8,
    },
    testButtonWarning: {
        fontSize: 12,
        color: theme.colors.grey3,
        fontStyle: 'italic',
        textAlign: 'center',
        marginTop: 0,
        marginBottom: 15,
        marginHorizontal: 10,
    },
}));

export default AccountSettings;
---------- END AccountSettings.tsx ----------


---------- AddEntryModal.tsx ----------
// src/components/AddEntryModal/AddEntryModal.tsx
import React, { useEffect, useState, useMemo, useCallback, useRef } from "react";
import { View, KeyboardAvoidingView, Platform, Dimensions, StyleSheet, Alert, Keyboard } from "react-native";
import { Overlay, makeStyles, useTheme, Button, Input } from "@rneui/themed";
import { Food } from "../../types/food";
import { isValidNumberInput } from "../../utils/validationUtils";
import { loadRecentFoods, saveRecentFoods, RecentServings, loadRecentServings, saveRecentServings } from "../../services/storageService";
import { getFoodIconUrl } from "../../utils/iconUtils";
import { getGramsFromNaturalLanguage } from "../../utils/units";
import Toast from "react-native-toast-message";
import * as ImagePicker from "expo-image-picker";
import { EstimatedFoodItem, getMultipleFoodsFromImage, getMultipleFoodsFromText, BackendError, determineMimeType } from "../../utils/macros";
import { compressImageIfNeeded, getBase64FromUri } from "../../utils/imageUtils";
import { v4 as uuidv4 } from "uuid";
import QuickAddList from "../QuickAddList";
import { t } from '../../localization/i18n';
import { calculateDailyEntryGrade, FoodGradeResult } from "../../utils/gradingUtils";
import { Settings } from '../../types/settings';
import ModalHeader from './ModalHeader';
import FoodSelectionList from './FoodSelectionList';
import AmountInputSection from './AmountInputSection';

interface AddEntryModalProps {
  isVisible: boolean;
  toggleOverlay: () => void;
  handleAddEntry: (food: Food, grams: number) => void;
  handleAddMultipleEntries: (entries: { food: Food; grams: number }[]) => void;
  foods: Food[];
  isEditMode: boolean;
  initialGrams?: string;
  initialSelectedFoodForEdit?: Food | null;
  onAddNewFoodRequest: () => void;
  onCommitFoodToLibrary: (foodData: Omit<Food, 'id' | 'createdAt'> | Food, isUpdate: boolean) => Promise<Food | null>;
  dailyGoals: Settings['dailyGoals'];
}

const KEYBOARD_VERTICAL_OFFSET = Platform.OS === "ios" ? 80 : 0;
const MAX_RECENT_FOODS = 15;
const MAX_SERVINGS_PER_FOOD = 4;

type UnitMode = "grams" | "auto";
type ModalMode = "normal" | "quickAddSelect" | "quickAddText";

const AddEntryModal: React.FC<AddEntryModalProps> = ({
  isVisible, toggleOverlay, handleAddEntry: parentHandleAddEntry, handleAddMultipleEntries: parentHandleAddMultipleEntries,
  foods, isEditMode, initialGrams, initialSelectedFoodForEdit, onAddNewFoodRequest, onCommitFoodToLibrary, dailyGoals,
}) => {
  const { theme } = useTheme();
  const styles = useStyles();

  const [internalSelectedFood, setInternalSelectedFood] = useState<Food | null>(null);
  const [internalGrams, setInternalGrams] = useState("");
  const [internalSearch, setInternalSearch] = useState("");
  const [recentFoods, setRecentFoods] = useState<Food[]>([]);
  const [recentServings, setRecentServings] = useState<RecentServings>({});
  const [foodIcons, setFoodIcons] = useState<{ [foodName: string]: string | null; }>({});
  const [unitMode, setUnitMode] = useState<UnitMode>("grams");
  const [autoInput, setAutoInput] = useState("");
  const [isAiLoading, setIsAiLoading] = useState(false);

  const [modalMode, setModalMode] = useState<ModalMode>("normal");
  const [quickAddLoading, setQuickAddLoading] = useState(false);
  const [quickAddItems, setQuickAddItems] = useState<EstimatedFoodItem[]>([]);
  const [selectedQuickAddIndices, setSelectedQuickAddIndices] = useState<Set<number>>(new Set());
  const [editingQuickAddItemIndex, setEditingQuickAddItemIndex] = useState<number | null>(null);
  const [editedFoodName, setEditedFoodName] = useState<string>("");
  const [editedGrams, setEditedGrams] = useState<string>("");
  const [selectedMultipleFoods, setSelectedMultipleFoods] = useState<Map<string, { food: Food; grams: number }>>(new Map());
  
  const [quickAddTextInput, setQuickAddTextInput] = useState("");
  const [isTextQuickAddLoading, setIsTextQuickAddLoading] = useState(false);

  const isActionDisabled = isAiLoading || quickAddLoading;

  const resolveAndSetIcon = useCallback((foodName: string) => {
    if (!foodName || foodIcons[foodName] !== undefined) return;
    const icon = getFoodIconUrl(foodName);
    setFoodIcons(prevIcons => ({ ...prevIcons, [foodName]: icon }));
  }, [foodIcons]);

  const foodGradeResult = useMemo((): FoodGradeResult | null => {
    const numericGramsValue = parseFloat(internalGrams);
    if (internalSelectedFood && isValidNumberInput(internalGrams) && numericGramsValue > 0 && dailyGoals) {
        return calculateDailyEntryGrade(internalSelectedFood, numericGramsValue, dailyGoals);
    }
    return null;
  }, [internalSelectedFood, internalGrams, dailyGoals]);

  useEffect(() => {
    const actuallyEditingDailyItem = isEditMode && initialSelectedFoodForEdit && initialGrams !== undefined;
    const isPreSelectedForAdd = !isEditMode && initialSelectedFoodForEdit;

    if (actuallyEditingDailyItem) {
        setModalMode("normal");
        setUnitMode("grams");
        setInternalSelectedFood(initialSelectedFoodForEdit);
        setInternalGrams(initialGrams);
        if (initialSelectedFoodForEdit?.name) resolveAndSetIcon(initialSelectedFoodForEdit.name);
    } else if (isPreSelectedForAdd) {
        setModalMode("normal");
        setUnitMode("grams");
        setInternalSelectedFood(initialSelectedFoodForEdit);
        setInternalGrams(initialGrams || "");
        if (initialSelectedFoodForEdit?.name) resolveAndSetIcon(initialSelectedFoodForEdit.name);
    } 
    
    // Always load recents for non-edit scenarios.
    if (!isEditMode) {
        loadRecentFoods().then(setRecentFoods);
        loadRecentServings().then(setRecentServings);
    }
  }, []); 


  useEffect(() => { recentFoods.forEach(food => resolveAndSetIcon(food.name)); }, [recentFoods, resolveAndSetIcon]);

  const addToRecentFoods = useCallback(async (food: Food) => {
    if (!food || !food.id) return;
    setRecentFoods(prev => {
      const updated = [food, ...prev.filter(f => f.id !== food.id)].slice(0, MAX_RECENT_FOODS);
      saveRecentFoods(updated).catch(() => {}); return updated;
    });
  }, []);

  const addMultipleToRecentServings = useCallback(async (entries: { foodId: string; grams: number }[]) => {
    if (!entries || entries.length === 0) return;
    
    setRecentServings(prevServings => {
        const newServings = { ...prevServings };
        entries.forEach(({ foodId, grams }) => {
            const roundedGrams = Math.round(grams);
            const currentServingsForFood = newServings[foodId] || [];
            const updatedServingsForFood = [roundedGrams, ...currentServingsForFood.filter(g => g !== roundedGrams)];
            newServings[foodId] = [...new Set(updatedServingsForFood)].slice(0, MAX_SERVINGS_PER_FOOD);
        });
        saveRecentServings(newServings).catch(() => {});
        return newServings;
    });
  }, []);

  const servingSizeSuggestions = useMemo(() => {
    if (!internalSelectedFood?.id) return [];
    
    const servingsForFood = recentServings[internalSelectedFood.id] || [];
    if (servingsForFood.length === 0) return [];

    return servingsForFood.map((val, index) => ({
        label: index === 0 ? t('addEntryModal.lastUsedServing', { grams: val }) : `${val}g`,
        value: String(val)
    }));
  }, [internalSelectedFood, recentServings, t]);

  const handleEstimateGrams = useCallback(async () => {
    Keyboard.dismiss(); if (!internalSelectedFood || !autoInput.trim() || isAiLoading) return;
    setIsAiLoading(true);
    try {
      const estimatedGrams = await getGramsFromNaturalLanguage(internalSelectedFood.name, autoInput);
      const roundedGrams = String(Math.round(estimatedGrams)); setInternalGrams(roundedGrams); setUnitMode("grams"); setAutoInput("");
      Toast.show({ type: "success", text1: t('addEntryModal.alertGramsEstimated'), text2: t('addEntryModal.alertGramsEstimatedMessage', {grams: roundedGrams, foodName: internalSelectedFood.name}), position: "bottom" });
    } catch (error) { /* Handled by getGramsFromNaturalLanguage */ } finally { setIsAiLoading(false); }
  }, [internalSelectedFood, autoInput, isAiLoading, t]);

  const handleAddOrUpdateSingleEntry = useCallback(async () => {
    Keyboard.dismiss(); if (!internalSelectedFood?.id) return Alert.alert(t('addEntryModal.alertFoodNotSelected'), t('addEntryModal.alertFoodNotSelectedMessage'));
    const numericGramsValue = parseFloat(internalGrams);
    if (!isValidNumberInput(internalGrams) || numericGramsValue <= 0) return Alert.alert(t('addEntryModal.alertInvalidAmount'), t('addEntryModal.alertInvalidAmountMessage'));
    if (isActionDisabled) return;
    parentHandleAddEntry(internalSelectedFood, numericGramsValue);
    if (!isEditMode) {
        addToRecentFoods(internalSelectedFood);
        addMultipleToRecentServings([{ foodId: internalSelectedFood.id, grams: numericGramsValue }]);
    }
  }, [internalSelectedFood, internalGrams, isActionDisabled, isEditMode, parentHandleAddEntry, addToRecentFoods, addMultipleToRecentServings, t]);

  const handleToggleMultipleFoodSelection = useCallback((food: Food, displayGrams: number) => {
    if (isEditMode || internalSelectedFood) return;
    setSelectedMultipleFoods(prev => { const newMap = new Map(prev); newMap.has(food.id) ? newMap.delete(food.id) : newMap.set(food.id, { food, grams: displayGrams }); return newMap; });
  }, [isEditMode, internalSelectedFood]);

  const handleConfirmAddMultipleSelected = useCallback(async () => {
    if (isEditMode || internalSelectedFood || selectedMultipleFoods.size === 0 || isActionDisabled) return;
    Keyboard.dismiss();
    const entriesToAdd = Array.from(selectedMultipleFoods.values()); if (entriesToAdd.length === 0) return;
    parentHandleAddMultipleEntries(entriesToAdd);
    entriesToAdd.forEach(entry => addToRecentFoods(entry.food));
    const servingsToAdd = entriesToAdd.map(e => ({ foodId: e.food.id, grams: e.grams }));
    addMultipleToRecentServings(servingsToAdd);
    setSelectedMultipleFoods(new Map());
  }, [isEditMode, internalSelectedFood, selectedMultipleFoods, isActionDisabled, parentHandleAddMultipleEntries, addToRecentFoods, addMultipleToRecentServings]);

  const pickImageAndAnalyze = useCallback(async (source: "camera" | "gallery") => {
    if (isEditMode) return;
    setQuickAddItems([]); setSelectedQuickAddIndices(new Set()); setEditingQuickAddItemIndex(null);
    setModalMode("quickAddSelect"); setQuickAddLoading(true); setIsTextQuickAddLoading(false);
    
    let permissionResult, pickerResult: ImagePicker.ImagePickerResult;
    try {
      permissionResult = source === "camera" ? await ImagePicker.requestCameraPermissionsAsync() : await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (!permissionResult.granted) throw new Error("Permission denied");
      pickerResult = source === "camera" ? await ImagePicker.launchCameraAsync({ quality: 1 }) : await ImagePicker.launchImageLibraryAsync({ mediaTypes: ImagePicker.MediaTypeOptions.Images, quality: 1 });
      if (pickerResult.canceled) throw new Error("User cancelled");

      const asset = pickerResult.assets?.[0]; if (!asset) throw new Error(t('addEntryModal.alertQuickAddCouldNotSelect'));
      const compressed = await compressImageIfNeeded(asset);
      const assetForAnalysis = compressed ? { ...asset, uri: compressed.uri, mimeType: 'image/jpeg' } : asset;
      const base64 = await getBase64FromUri(assetForAnalysis.uri);
      const mimeType = determineMimeType(assetForAnalysis);
      const results = await getMultipleFoodsFromImage(base64, mimeType);

      if (results.length === 0) {
        Toast.show({type: 'info', text1: t('addEntryModal.noQuickAddResults'), position: 'bottom'});
        setModalMode("normal");
      } else {
        setQuickAddItems(results); setSelectedQuickAddIndices(new Set(results.map((_, i) => i)));
        results.forEach(item => resolveAndSetIcon(item.foodName));
      }
    } catch (error: any) {
      if (error.message !== "User cancelled" && error.message !== "Permission denied" && !(error instanceof BackendError)) Alert.alert(t('addEntryModal.alertQuickAddError'), error.message || t('addEntryModal.alertQuickAddErrorMessage'));
      setModalMode("normal");
    } finally {
      setQuickAddLoading(false);
    }
  }, [isEditMode, resolveAndSetIcon, t]);

  const handleQuickAddImage = useCallback(() => {
    Keyboard.dismiss(); if (isEditMode || isActionDisabled) return;
    if (editingQuickAddItemIndex !== null) return Alert.alert(t('addEntryModal.alertQuickAddFinishEditing'), t('addEntryModal.alertQuickAddFinishEditingSaveOrCancel'));
    Alert.alert(t('addEntryModal.alertQuickAddFromImageTitle'), t('addEntryModal.alertQuickAddFromImageMessage'), [
        { text: t('addEntryModal.cancel'), style: "cancel" },
        { text: t('addEntryModal.camera'), onPress: () => pickImageAndAnalyze("camera") },
        { text: t('addEntryModal.gallery'), onPress: () => pickImageAndAnalyze("gallery") },
    ]);
  }, [isEditMode, editingQuickAddItemIndex, isActionDisabled, pickImageAndAnalyze, t]);

  const handleQuickAddText = useCallback(() => {
    Keyboard.dismiss(); if (isEditMode || isActionDisabled) return;
    setModalMode('quickAddText');
    setQuickAddItems([]); setSelectedQuickAddIndices(new Set()); setEditingQuickAddItemIndex(null);
  }, [isEditMode, isActionDisabled]);

  const handleAnalyzeText = async () => {
    const textToAnalyze = quickAddTextInput.trim();
    if (!textToAnalyze || quickAddLoading) return;
    Keyboard.dismiss();
    setQuickAddLoading(true); setIsTextQuickAddLoading(true);
    try {
        const results = await getMultipleFoodsFromText(textToAnalyze);
        if (results.length === 0) {
            Toast.show({ type: 'info', text1: t('addEntryModal.noQuickAddResults'), position: 'bottom' });
        } else {
            setQuickAddItems(results); setSelectedQuickAddIndices(new Set(results.map((_, i) => i)));
            results.forEach(item => { if (item.foodName) { resolveAndSetIcon(item.foodName); } });
            setModalMode("quickAddSelect");
        }
    } catch (error) { /* Handled in util */ }
    finally { setQuickAddLoading(false); setIsTextQuickAddLoading(false); }
  };

  const handleToggleQuickAddItem = useCallback((index: number) => {
    if (editingQuickAddItemIndex !== null || isActionDisabled) return;
    setSelectedQuickAddIndices(prev => { const newSet = new Set(prev); newSet.has(index) ? newSet.delete(index) : newSet.add(index); return newSet; });
  }, [editingQuickAddItemIndex, isActionDisabled]);

  const handleEditQuickAddItem = useCallback((index: number) => {
    if (editingQuickAddItemIndex !== null || isActionDisabled) return;
    const item = quickAddItems[index]; setEditingQuickAddItemIndex(index);
    setEditedFoodName(item.foodName); setEditedGrams(String(Math.round(item.estimatedWeightGrams)));
  }, [editingQuickAddItemIndex, quickAddItems, isActionDisabled]);

  const handleSaveQuickAddItemEdit = useCallback(() => {
    if (editingQuickAddItemIndex === null || isActionDisabled) return;
    const trimmedName = editedFoodName.trim(); if (!trimmedName) return Alert.alert(t('addEntryModal.alertQuickAddInvalidName'), t('addEntryModal.alertQuickAddInvalidNameMessage'));
    const numericGrams = parseFloat(editedGrams); if (!isValidNumberInput(editedGrams) || numericGrams <= 0) return Alert.alert(t('addEntryModal.alertQuickAddInvalidGrams'), t('addEntryModal.alertQuickAddInvalidGramsMessage'));
    setQuickAddItems(prev => prev.map((item, i) => i === editingQuickAddItemIndex ? { ...item, foodName: trimmedName, estimatedWeightGrams: Math.round(numericGrams) } : item));
    if (trimmedName) resolveAndSetIcon(trimmedName);
    setEditingQuickAddItemIndex(null); setEditedFoodName(""); setEditedGrams(""); Keyboard.dismiss();
  }, [editingQuickAddItemIndex, editedFoodName, editedGrams, isActionDisabled, resolveAndSetIcon, t]);

  const handleCancelQuickAddItemEdit = useCallback(() => {
    if (isActionDisabled) return; setEditingQuickAddItemIndex(null);
    setEditedFoodName(""); setEditedGrams(""); Keyboard.dismiss();
  }, [isActionDisabled]);

  const handleConfirmQuickAdd = useCallback(() => {
    Keyboard.dismiss(); if (isEditMode || isActionDisabled || editingQuickAddItemIndex !== null || selectedQuickAddIndices.size === 0) return;
    const entriesToAdd = Array.from(selectedQuickAddIndices).map(index => {
        const item = quickAddItems[index];
        const existingFood = foods.find(f => f.name.toLowerCase() === item.foodName.toLowerCase());
        const foodToAdd: Food = existingFood || { id: uuidv4(), name: item.foodName, calories: Math.round(item.calories_per_100g || 0), protein: Math.round(item.protein_per_100g || 0), carbs: Math.round(item.carbs_per_100g || 0), fat: Math.round(item.fat_per_100g || 0), createdAt: new Date().toISOString() };
        return { food: foodToAdd, grams: Math.max(1, Math.round(item.estimatedWeightGrams || 1)) };
    });
    if (entriesToAdd.length > 0) {
        parentHandleAddMultipleEntries(entriesToAdd);
        const servingsToAdd = entriesToAdd.map(e => ({ foodId: e.food.id, grams: e.grams }));
        addMultipleToRecentServings(servingsToAdd);
    }
  }, [foods, quickAddItems, selectedQuickAddIndices, editingQuickAddItemIndex, parentHandleAddMultipleEntries, isEditMode, isActionDisabled, addMultipleToRecentServings]);

  const handleQuickAddGramsChange = useCallback((text: string) => setEditedGrams(text.replace(/[^0-9]/g, "")), []);

  const handleSaveQuickAddItemToLibrary = useCallback(async (item: EstimatedFoodItem, setSavingState: (isSaving: boolean) => void) => {
    setSavingState(true);
    try {
        const foodData: Omit<Food, 'id' | 'createdAt'> = { name: item.foodName, calories: Math.round(item.calories_per_100g), protein: Math.round(item.protein_per_100g), carbs: Math.round(item.carbs_per_100g), fat: Math.round(item.fat_per_100g) };
        const existingFood = foods.find(f => f.name.toLowerCase() === item.foodName.toLowerCase());
        if (existingFood) {
            Alert.alert(t('addEntryModal.alertOverwriteFoodTitle'), t('addEntryModal.alertOverwriteFoodMessage', { foodName: item.foodName }), [
                { text: t('addEntryModal.cancel'), style: 'cancel', onPress: () => setSavingState(false) },
                { text: t('addEntryModal.overwrite'), onPress: async () => {
                    const updatedFood = await onCommitFoodToLibrary({ ...existingFood, ...foodData }, true);
                    if (updatedFood) { Toast.show({ type: 'success', text1: t('addEntryModal.toastFoodUpdatedInLibrary', { foodName: updatedFood.name }), position: 'bottom' }); resolveAndSetIcon(updatedFood.name); }
                    setSavingState(false);
                }},
            ]);
        } else {
            const newFood = await onCommitFoodToLibrary(foodData, false);
            if (newFood) { Toast.show({ type: 'success', text1: t('addEntryModal.toastFoodSavedToLibrary', { foodName: newFood.name }), position: 'bottom' }); resolveAndSetIcon(newFood.name); }
            setSavingState(false);
        }
    } catch (error) { Toast.show({ type: 'error', text1: t('addEntryModal.toastErrorSavingToLibrary'), position: 'bottom' }); setSavingState(false); }
  }, [foods, onCommitFoodToLibrary, resolveAndSetIcon, t]);

  const modalTitle = modalMode === "quickAddSelect" ? (editingQuickAddItemIndex !== null ? t('addEntryModal.titleQuickAddEdit') : quickAddLoading ? t('addEntryModal.titleQuickAddAnalyzing') : t('addEntryModal.titleQuickAddSelect'))
                    : modalMode === "quickAddText" ? t('addEntryModal.titleQuickAddFromText')
                    : isEditMode ? t('addEntryModal.titleEdit') : t('addEntryModal.titleAdd');

  const isSingleAddButtonDisabled = modalMode !== "normal" || !internalSelectedFood || !isValidNumberInput(internalGrams) || parseFloat(internalGrams) <= 0 || isActionDisabled;
  const isMultiAddButtonDisabled = modalMode !== "normal" || selectedMultipleFoods.size === 0 || !!internalSelectedFood || isEditMode || isActionDisabled;
  const isAiButtonDisabled = modalMode !== "normal" || !internalSelectedFood || !autoInput.trim() || isActionDisabled || isAiLoading;
  const isQuickAddConfirmDisabled = isEditMode || modalMode !== "quickAddSelect" || selectedQuickAddIndices.size === 0 || editingQuickAddItemIndex !== null || isActionDisabled || quickAddLoading;
  const isQuickAddImageButtonDisabled = isEditMode || isActionDisabled || quickAddLoading;
  const isQuickAddTextButtonDisabled = isEditMode || isActionDisabled || quickAddLoading;

  return (
    <Overlay isVisible={isVisible} onBackdropPress={!isActionDisabled ? toggleOverlay : undefined} animationType="slide" overlayStyle={styles.overlayContainer}>
      <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={styles.keyboardAvoidingView} keyboardVerticalOffset={KEYBOARD_VERTICAL_OFFSET}>
        <View style={[styles.overlayStyle, { backgroundColor: theme.colors.background }]}>
          <ModalHeader title={modalTitle} isEditMode={isEditMode} modalMode={modalMode} quickAddLoading={quickAddLoading} textQuickAddLoading={isTextQuickAddLoading}
            selectedFood={internalSelectedFood} selectedMultipleFoodsSize={selectedMultipleFoods.size} selectedQuickAddIndicesSize={selectedQuickAddIndices.size}
            editingQuickAddItemIndex={editingQuickAddItemIndex} isActionDisabled={isActionDisabled} isSingleAddButtonDisabled={isSingleAddButtonDisabled}
            isMultiAddButtonDisabled={isMultiAddButtonDisabled} isQuickAddConfirmDisabled={isQuickAddConfirmDisabled} isQuickAddImageButtonDisabled={isQuickAddImageButtonDisabled}
            isQuickAddTextButtonDisabled={isQuickAddTextButtonDisabled} isAiLoading={isAiLoading} toggleOverlay={toggleOverlay} onAddOrUpdateSingleEntry={handleAddOrUpdateSingleEntry}
            onConfirmAddMultipleSelected={handleConfirmAddMultipleSelected} onConfirmQuickAdd={handleConfirmQuickAdd} onQuickAddImage={handleQuickAddImage} onQuickAddText={handleQuickAddText}
            onBackFromQuickAdd={() => { setModalMode("normal"); setQuickAddTextInput(""); }}
          />
          {modalMode === 'normal' && <View style={styles.normalModeContentContainer}><FoodSelectionList search={internalSearch} updateSearch={setInternalSearch} foods={foods} recentFoods={recentFoods} selectedFood={internalSelectedFood} handleSelectFood={setInternalSelectedFood} setGrams={setInternalGrams} setSelectedMultipleFoods={setSelectedMultipleFoods} selectedMultipleFoods={selectedMultipleFoods} handleToggleMultipleFoodSelection={handleToggleMultipleFoodSelection} foodIcons={foodIcons} onAddNewFoodRequest={onAddNewFoodRequest} isActionDisabled={isActionDisabled} isEditMode={isEditMode} recentServings={recentServings} modalMode={modalMode} />{internalSelectedFood && <AmountInputSection selectedFood={internalSelectedFood} grams={internalGrams} setGrams={setInternalGrams} unitMode={unitMode} setUnitMode={setUnitMode} autoInput={autoInput} setAutoInput={setAutoInput} handleEstimateGrams={handleEstimateGrams} isAiLoading={isAiLoading} isAiButtonDisabled={isAiButtonDisabled} isEditMode={isEditMode} servingSizeSuggestions={servingSizeSuggestions} isActionDisabled={isActionDisabled} foodGradeResult={foodGradeResult} />}</View>}
          {modalMode === 'quickAddText' && <View style={styles.quickAddTextView}><Input placeholder={t('addEntryModal.textQuickAdd.placeholder')} multiline numberOfLines={6} value={quickAddTextInput} onChangeText={setQuickAddTextInput} inputStyle={styles.quickAddTextArea} inputContainerStyle={styles.quickAddTextAreaContainer} containerStyle={{ paddingHorizontal: 0 }} autoFocus /><Button title={t('addEntryModal.textQuickAdd.analyzeButton')} onPress={handleAnalyzeText} loading={isTextQuickAddLoading} disabled={isTextQuickAddLoading || !quickAddTextInput.trim()} icon={{ name: 'brain', type: 'material-community', color: theme.colors.white }} buttonStyle={styles.analyzeButton} /></View>}
          {modalMode === 'quickAddSelect' && <QuickAddList items={quickAddItems} selectedIndices={selectedQuickAddIndices} editingIndex={editingQuickAddItemIndex} editedName={editedFoodName} editedGrams={editedGrams} onToggleItem={handleToggleQuickAddItem} onEditItem={handleEditQuickAddItem} onSaveEdit={handleSaveQuickAddItemEdit} onCancelEdit={handleCancelQuickAddItemEdit} onNameChange={setEditedFoodName} onGramsChange={handleQuickAddGramsChange} isLoading={quickAddLoading} foodIcons={foodIcons} style={styles.quickAddListStyle} onSaveItemToLibrary={handleSaveQuickAddItemToLibrary} foods={foods} />}
          <View style={{ height: Platform.OS === 'ios' ? 20 : 40 }} />
        </View>
      </KeyboardAvoidingView>
    </Overlay>
  );
};

const useStyles = makeStyles((theme) => ({
    overlayContainer: { backgroundColor: "transparent", width: "90%", maxWidth: 500, padding: 0, borderRadius: 15, shadowColor: "#000", shadowOffset: { width: 0, height: 3 }, shadowOpacity: 0.2, shadowRadius: 5, elevation: 6, overflow: "hidden", maxHeight: "90%", },
    overlayStyle: { width: "100%", height: "100%", borderRadius: 15, padding: 15, paddingBottom: 0, backgroundColor: theme.colors.background, flex: 1 },
    keyboardAvoidingView: { width: "100%", height: "100%" },
    normalModeContentContainer: { flex: 1, justifyContent: 'flex-start' },
    quickAddListStyle: { flex: 1 },
    quickAddTextView: { flex: 1, justifyContent: 'flex-start', paddingTop: 10 },
    quickAddTextAreaContainer: { height: 150, padding: 8, borderWidth: 1, borderColor: theme.colors.divider, borderRadius: 8, },
    quickAddTextArea: { textAlignVertical: 'top', color: theme.colors.text, fontSize: 16, height: '100%' },
    analyzeButton: { marginTop: 15, borderRadius: 8, backgroundColor: theme.colors.primary },
}));

export default AddEntryModal;
---------- END AddEntryModal.tsx ----------


---------- AmountInputSection.tsx ----------
// src/components/AddEntryModal/AmountInputSection.tsx
import React, { useRef, useEffect } from 'react';
import { View, ScrollView, TouchableOpacity, Keyboard } from 'react-native';
import { Text, Input, Icon, ButtonGroup, Button, useTheme, makeStyles } from '@rneui/themed';
import { Food } from '../../types/food';
import { FoodGradeResult } from '../../utils/gradingUtils';
import { isValidNumberInput } from '../../utils/validationUtils';
import { t } from '../../localization/i18n';

type UnitMode = "grams" | "auto";

interface AmountInputSectionProps {
    selectedFood: Food;
    grams: string;
    setGrams: (grams: string) => void;
    unitMode: UnitMode;
    setUnitMode: (mode: UnitMode) => void;
    autoInput: string;
    setAutoInput: (input: string) => void;
    handleEstimateGrams: () => void;
    isAiLoading: boolean;
    isAiButtonDisabled: boolean;
    isEditMode: boolean;
    servingSizeSuggestions: { label: string; value: string }[];
    isActionDisabled: boolean;
    foodGradeResult: FoodGradeResult | null;
}

const AmountInputSection: React.FC<AmountInputSectionProps> = ({
    selectedFood,
    grams,
    setGrams,
    unitMode,
    setUnitMode,
    autoInput,
    setAutoInput,
    handleEstimateGrams,
    isAiLoading,
    isAiButtonDisabled,
    isEditMode,
    servingSizeSuggestions,
    isActionDisabled,
    foodGradeResult,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const gramsInputRef = useRef<any>(null);

    useEffect(() => {
        if (isEditMode && unitMode === "grams") {
            const timer = setTimeout(() => {
                gramsInputRef.current?.focus();
            }, 150);
            return () => clearTimeout(timer);
        }
    }, [isEditMode, unitMode]);


    const handleGramsChange = (text: string) => {
        const cleanedText = text.replace(/[^0-9.]/g, "").replace(/(\..*?)\./g, "$1");
        setGrams(cleanedText);
    };

    return (
        <View style={styles.amountSection}>
            <View style={styles.unitSelectorContainer}>
                <View style={styles.amountLabelContainer}>
                    <Text style={styles.inputLabel}>{t('addEntryModal.amount')}</Text>
                    {foodGradeResult && (
                        <Text style={[styles.gradePill, { backgroundColor: foodGradeResult.color }]}>
                            {foodGradeResult.letter}
                        </Text>
                    )}
                </View>
                {!isEditMode && (
                    <ButtonGroup
                        buttons={[t('addEntryModal.grams'), t('addEntryModal.autoAi')]}
                        selectedIndex={unitMode === "grams" ? 0 : 1}
                        onPress={(index) => {
                            if (!isActionDisabled) {
                                setUnitMode(index === 0 ? "grams" : "auto");
                                Keyboard.dismiss();
                            }
                        }}
                        containerStyle={styles.buttonGroupContainer}
                        selectedButtonStyle={{ backgroundColor: theme.colors.primary }}
                        textStyle={styles.buttonGroupText}
                        selectedTextStyle={{ color: theme.colors.white }}
                        disabled={isActionDisabled ? [0, 1] : []}
                        disabledStyle={styles.disabledButtonGroup}
                        disabledTextStyle={{ color: theme.colors.grey3 }}
                    />
                )}
            </View>
            {unitMode === "grams" && (
                <>
                    {!isEditMode && servingSizeSuggestions.length > 0 && (
                        <View style={styles.servingSizeRow}>
                            <Text style={styles.servingSizeLabel}>{t('addEntryModal.quickAddServing')}</Text>
                            <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={styles.servingSizeContainer} keyboardShouldPersistTaps="handled">
                                {servingSizeSuggestions.map((suggestion) => (
                                    <TouchableOpacity
                                        key={suggestion.label}
                                        style={[styles.servingSizeButton, isActionDisabled && styles.disabledOverlay]}
                                        onPress={() => {
                                            if (!isActionDisabled) {
                                                setGrams(suggestion.value);
                                                Keyboard.dismiss();
                                            }
                                        }}
                                        disabled={isActionDisabled}
                                    >
                                        <Text style={styles.servingSizeButtonTitle}>{suggestion.label}</Text>
                                    </TouchableOpacity>
                                ))}
                            </ScrollView>
                        </View>
                    )}
                    <Input
                        ref={gramsInputRef}
                        placeholder={isEditMode ? t('addEntryModal.gramsPlaceholderEdit') : t('addEntryModal.gramsPlaceholder')}
                        keyboardType="numeric"
                        value={grams}
                        onChangeText={handleGramsChange}
                        inputStyle={styles.gramInputStyle}
                        inputContainerStyle={styles.gramInputContainerStyle}
                        errorMessage={!isValidNumberInput(grams) && grams !== "" && grams !== "." ? t('addEntryModal.gramsError') : ""}
                        errorStyle={{ color: theme.colors.error }}
                        rightIcon={<Text style={styles.unitText}>g</Text>}
                        containerStyle={{ paddingHorizontal: 0 }}
                        key={`grams-input-${selectedFood.id}-${isEditMode}`}
                        disabled={isActionDisabled}
                        autoFocus={!isEditMode}
                        selectTextOnFocus={true}
                    />
                </>
            )}
            {unitMode === "auto" && !isEditMode && (
                <View style={styles.autoInputRow}>
                    <Input
                        placeholder={t('addEntryModal.autoPlaceholder')}
                        value={autoInput}
                        onChangeText={setAutoInput}
                        inputStyle={[styles.gramInputStyle, styles.autoInputField]}
                        inputContainerStyle={styles.gramInputContainerStyle}
                        containerStyle={styles.autoInputContainer}
                        multiline={false}
                        onSubmitEditing={handleEstimateGrams}
                        key={`auto-input-${selectedFood.id}`}
                        disabled={isActionDisabled}
                        autoFocus
                    />
                    <Button
                        onPress={() => { Keyboard.dismiss(); handleEstimateGrams(); }}
                        disabled={isAiButtonDisabled || isActionDisabled}
                        loading={isAiLoading}
                        buttonStyle={styles.aiButton}
                        icon={isAiLoading ? undefined : (
                            <Icon name="calculator-variant" type="material-community" size={20} color={theme.colors.white} />
                        )}
                        title={isAiLoading ? "" : ""}
                    />
                </View>
            )}
        </View>
    );
};

const useStyles = makeStyles((theme) => ({
    amountSection: {
        marginTop: 10,
        borderTopWidth: 1,
        borderTopColor: theme.colors.divider,
        paddingTop: 15,
        paddingHorizontal: 0,
    },
    unitSelectorContainer: {
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "space-between",
        marginBottom: 15,
        paddingHorizontal: 5,
    },
    amountLabelContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    gradePill: {
        fontSize: 11,
        fontWeight: 'bold',
        color: theme.colors.white,
        paddingHorizontal: 5,
        paddingVertical: 1.5,
        borderRadius: 7,
        marginLeft: 8,
        minWidth: 18,
        textAlign: 'center',
        overflow: 'hidden',
    },
    inputLabel: {
        fontWeight: "600",
        color: theme.colors.secondary,
        fontSize: 14,
        marginRight: 0,
        textTransform: "uppercase",
        textAlign: 'left',
    },
    buttonGroupContainer: {
        flex: 0.7,
        maxWidth: 220,
        height: 35,
        borderRadius: 8,
        borderColor: theme.colors.primary,
        borderWidth: 1,
        backgroundColor: theme.colors.background,
    },
    buttonGroupText: {
        fontSize: 14,
        color: theme.colors.text,
    },
    disabledButtonGroup: {
        backgroundColor: theme.colors.grey5,
    },
    servingSizeRow: {
        flexDirection: "row",
        alignItems: "center",
        marginBottom: 12,
        paddingHorizontal: 5,
    },
    servingSizeLabel: {
        color: theme.colors.secondary,
        fontSize: 13,
        marginRight: 8,
        textAlign: 'left',
    },
    servingSizeContainer: {
        flexGrow: 0,
    },
    servingSizeButton: {
        backgroundColor: theme.colors.grey4,
        borderRadius: 15,
        marginRight: 8,
        paddingHorizontal: 12,
        paddingVertical: 5,
        justifyContent: "center",
        alignItems: "center",
        height: 30,
    },
    servingSizeButtonTitle: {
        color: theme.colors.text,
        fontSize: 13,
    },
    gramInputStyle: {
        color: theme.colors.text,
        fontSize: 16,
        paddingVertical: 8,
        height: 40,
        textAlign: 'left',
    },
    gramInputContainerStyle: {
        borderBottomColor: theme.colors.grey3,
        paddingHorizontal: 5,
    },
    unitText: {
        color: theme.colors.secondary,
        fontSize: 15,
        fontWeight: "500",
        paddingRight: 5,
    },
    autoInputRow: {
        flexDirection: "row",
        alignItems: "center",
        paddingHorizontal: 0,
    },
    autoInputContainer: {
        flex: 1,
        paddingHorizontal: 0,
        marginRight: 10,
    },
    autoInputField: {
        height: 40,
    },
    aiButton: {
        backgroundColor: theme.colors.secondary,
        borderRadius: 20,
        width: 40,
        height: 40,
        padding: 0,
        justifyContent: "center",
        alignItems: "center",
        minWidth: 40,
    },
    disabledOverlay: {
        opacity: 0.6,
    },
}));

export default AmountInputSection;
---------- END AmountInputSection.tsx ----------


---------- FoodSelectionList.tsx ----------
// src/components/AddEntryModal/FoodSelectionList.tsx
import React, { useMemo, useCallback, useRef, useEffect } from 'react';
import { View, FlatList, TouchableOpacity, ActivityIndicator, Platform, Keyboard, StyleSheet, I18nManager } from 'react-native';
import { Text, ListItem, Icon, Button, SearchBar, CheckBox, useTheme, makeStyles } from '@rneui/themed';
import { Food } from '../../types/food';
import { RecentServings } from '../../services/storageService';
import { t } from '../../localization/i18n';
import { findFoodsByTagSearch } from '../../utils/searchUtils';
import { getFoodIconUrl } from '../../utils/iconUtils';

const DEFAULT_GRAMS_FOR_MULTI_ADD = 100;

interface FoodSelectionListProps {
    search: string;
    updateSearch: (search: string) => void;
    foods: Food[]; // Full library
    recentFoods: Food[];
    selectedFood: Food | null;
    handleSelectFood: (food: Food | null) => void;
    setGrams: (grams: string) => void;
    setSelectedMultipleFoods: React.Dispatch<React.SetStateAction<Map<string, { food: Food; grams: number }>>>;
    selectedMultipleFoods: Map<string, { food: Food; grams: number }>;
    handleToggleMultipleFoodSelection: (food: Food, displayGrams: number) => void;
    foodIcons: { [foodName: string]: string | null }; // No 'undefined'
    onAddNewFoodRequest: () => void;
    isActionDisabled: boolean;
    isEditMode: boolean;
    recentServings: RecentServings;
    modalMode: "normal" | "quickAddSelect";
}

type DisplayFoodItem = Food & { isRecent?: boolean };

const FoodSelectionList: React.FC<FoodSelectionListProps> = ({
    search,
    updateSearch,
    foods,
    recentFoods,
    selectedFood, 
    handleSelectFood,
    setGrams,
    setSelectedMultipleFoods,
    selectedMultipleFoods,
    handleToggleMultipleFoodSelection,
    foodIcons,
    onAddNewFoodRequest,
    isActionDisabled,
    isEditMode,
    recentServings,
    modalMode,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const flatListRef = useRef<FlatList<DisplayFoodItem>>(null);

    const filteredFoodsForSearch = useMemo(() => {
        const lowercasedSearchTerm = search.toLowerCase().trim();
        if (!lowercasedSearchTerm) return [];
    
        // 1. Primary search: by name
        const nameMatchedFoods = foods.filter((food) =>
            food.name.toLowerCase().includes(lowercasedSearchTerm)
        );
        const nameMatchIds = new Set(nameMatchedFoods.map(f => f.id));
    
        // 2. Secondary search: by tags, excluding items already found by name
        const tagMatchedFoods = findFoodsByTagSearch(lowercasedSearchTerm, foods);
        const tagMatchedFoodsOnly = tagMatchedFoods.filter(f => !nameMatchIds.has(f.id));
    
        // 3. Combine, with name matches first to ensure priority.
        return [...nameMatchedFoods, ...tagMatchedFoodsOnly];
    }, [foods, search]);

    const listDisplayData = useMemo((): DisplayFoodItem[] => {
        // If a single food is selected, show only that item.
        if (selectedFood) {
            const isSelRecent = recentFoods.some(rf => rf.id === selectedFood.id);
            return [{ ...selectedFood, isRecent: isSelRecent }];
        }

        // If there is an active search term, show search results.
        if (search) {
            return filteredFoodsForSearch;
        }

        // Otherwise, show default list (recents + library).
        const tempCombinedList: DisplayFoodItem[] = [];
        const displayedIds = new Set<string>();

        recentFoods.forEach(rf => {
            if (!displayedIds.has(rf.id)) {
                tempCombinedList.push({ ...rf, isRecent: true });
                displayedIds.add(rf.id);
            }
        });

        const otherLibraryFoods = foods
            .filter(food => !displayedIds.has(food.id))
            .sort((a, b) => a.name.localeCompare(b.name))
            .slice(0, 10);

        otherLibraryFoods.forEach(olf => {
            tempCombinedList.push({ ...olf, isRecent: false });
        });

        return tempCombinedList;
    }, [search, recentFoods, foods, filteredFoodsForSearch, selectedFood]);

    useEffect(() => {
        if (selectedFood && flatListRef.current && listDisplayData.length > 0 && !search) {
            const index = listDisplayData.findIndex(item => item.id === selectedFood.id);
            if (index !== -1) {
                setTimeout(() => {
                    flatListRef.current?.scrollToIndex({ index, animated: true, viewPosition: 0.3 }); 
                }, 150);
            }
        }
    }, [selectedFood, listDisplayData, search]);

    const handleInternalSingleSelectFood = useCallback((item: Food | null) => {
        if (selectedMultipleFoods.size > 0 && item !== null && (!selectedFood || selectedFood.id !== item.id)) {
            Keyboard.dismiss();
            return; 
        }
        Keyboard.dismiss();
        if (selectedFood && item && selectedFood.id === item.id) {
            handleSelectFood(null);
            setGrams(""); 
            updateSearch(""); 
            setSelectedMultipleFoods(new Map()); 
        } else if (item === null) { 
            handleSelectFood(null);
            setGrams("");
        } else if (item !== null) { 
            handleSelectFood(item);
            updateSearch(""); 
            setSelectedMultipleFoods(new Map()); 
            if (!isEditMode) { 
                const lastPortion = recentServings[item.id]?.[0];
                if (lastPortion) {
                    setGrams(String(lastPortion));
                } else {
                    setGrams(String(DEFAULT_GRAMS_FOR_MULTI_ADD)); 
                }
            }
        }
    }, [
        handleSelectFood, 
        updateSearch, 
        selectedFood, 
        setGrams, 
        recentServings, 
        setSelectedMultipleFoods, 
        isEditMode,
        selectedMultipleFoods.size 
    ]);
    
    const handleSearchChange = (text: string) => {
        updateSearch(text);
        if (selectedFood && text.trim() !== "") { 
            handleInternalSingleSelectFood(null);
        }
    };

    const renderFoodItem = ({ item }: { item: DisplayFoodItem }) => {
        const foodItem = item;
        const isSingleSelectedViaState = selectedFood?.id === foodItem.id;
        const isMultiSelected = selectedMultipleFoods.has(foodItem.id);
        const iconIdentifier = getFoodIconUrl(foodItem.name);
        const displayGramsForMulti = recentServings[foodItem.id]?.[0] || DEFAULT_GRAMS_FOR_MULTI_ADD;

        const canShowCheckbox = modalMode === "normal" && !isEditMode && (selectedMultipleFoods.size > 0 || !selectedFood);
        const showSingleSelectCheckmark = isSingleSelectedViaState && selectedMultipleFoods.size === 0 && !search;

        return (
            <TouchableOpacity
                onPress={() => {
                    if (isActionDisabled) return;
                    if (selectedMultipleFoods.size > 0) {
                        handleToggleMultipleFoodSelection(foodItem, displayGramsForMulti);
                    } else {
                        handleInternalSingleSelectFood(foodItem);
                    }
                }}
                disabled={isActionDisabled}
                style={[isActionDisabled && styles.disabledOverlay]}
            >
                <ListItem
                    bottomDivider
                    containerStyle={[
                        styles.listItemContainer,
                        (showSingleSelectCheckmark || isMultiSelected) && styles.selectedListItem,
                        isMultiSelected && styles.multiSelectedListItemBorder,
                    ]}
                >
                    {canShowCheckbox && (
                        <CheckBox
                            checked={isMultiSelected}
                            onPress={() => { 
                                if (isActionDisabled) return;
                                handleToggleMultipleFoodSelection(foodItem, displayGramsForMulti);
                            }}
                            containerStyle={styles.multiSelectCheckboxContainer}
                            size={22}
                            disabled={isActionDisabled}
                        />
                    )}
                    {iconIdentifier ? (
                        <Text style={styles.foodIconEmoji}>{iconIdentifier}</Text>
                    ) : (
                        <View style={styles.defaultIconContainer}>
                            <Icon name="help-outline" type="material" size={22} color={theme.colors.grey3} />
                        </View>
                    )}
                    <ListItem.Content>
                        <ListItem.Title style={styles.listItemTitle} numberOfLines={1} ellipsizeMode="tail">
                            {foodItem.name}
                        </ListItem.Title>
                        {canShowCheckbox && (
                            <ListItem.Subtitle style={styles.listItemSubtitleSecondary}>
                                {t('addEntryModal.grams')}: {displayGramsForMulti}g
                            </ListItem.Subtitle>
                        )}
                        {foodItem.isRecent && !search && (!selectedFood || selectedFood.id !== foodItem.id) && (
                             <Text style={styles.recentBadge}>{t('addEntryModal.recent')}</Text>
                        )}
                    </ListItem.Content>
                    {showSingleSelectCheckmark && (<Icon name="checkmark-circle" type="ionicon" color={theme.colors.primary} size={24} />)}
                </ListItem>
            </TouchableOpacity>
        );
    };

    const renderEmptyOrNoResults = () => {
        if (search && filteredFoodsForSearch.length === 0) {
            return (
                <View style={styles.noResultsContainer}>
                    <Text style={styles.noFoodsText}>
                        {t('addEntryModal.noResults', { searchTerm: search })}
                    </Text>
                    <Button
                        title={t('addEntryModal.addNewFoodButton')}
                        onPress={onAddNewFoodRequest}
                        type="outline"
                        buttonStyle={styles.addNewFoodButton}
                        titleStyle={styles.addNewFoodButtonTitle}
                        icon={<Icon name="add-circle-outline" type="ionicon" size={20} color={theme.colors.primary} />}
                        disabled={isActionDisabled}
                    />
                </View>
            );
        }
        if (!search && foods.length === 0 && recentFoods.length === 0) { 
             return (
                 <View style={styles.noResultsContainer}>
                     <Text style={styles.noFoodsText}>
                         {t('addEntryModal.emptyLibraryMessage')}
                     </Text>
                     <Button
                         title={t('addEntryModal.addNewFoodButton')}
                         onPress={onAddNewFoodRequest}
                         type="outline"
                         buttonStyle={styles.addNewFoodButton}
                         titleStyle={styles.addNewFoodButtonTitle}
                         icon={<Icon name="add-circle-outline" type="ionicon" size={20} color={theme.colors.primary} />}
                         disabled={isActionDisabled}
                     />
                 </View>
             );
        }
        return null;
    };

    return (
        <View>
            <SearchBar
                placeholder={t('addEntryModal.searchPlaceholder')}
                onChangeText={handleSearchChange}
                value={search}
                platform={Platform.OS === "ios" ? "ios" : "android"}
                containerStyle={styles.searchBarContainer}
                inputContainerStyle={styles.searchBarInputContainer}
                inputStyle={styles.searchInputStyle}
                onCancel={() => { updateSearch(""); Keyboard.dismiss();}}
                showCancel={Platform.OS === "ios"}
                onClear={() => updateSearch("")}
                disabled={isActionDisabled || modalMode !== "normal"}
            />
            <FlatList
                ref={flatListRef}
                data={listDisplayData}
                renderItem={renderFoodItem}
                keyExtractor={(item) => `food-sel-${item.id}`}
                ListEmptyComponent={renderEmptyOrNoResults}
                extraData={{ selectedFoodId: selectedFood?.id, selectedMultipleFoodsSize: selectedMultipleFoods.size, search, listLength: listDisplayData.length, recentServings }}
                keyboardShouldPersistTaps="handled"
                initialNumToRender={15}
                maxToRenderPerBatch={10}
                windowSize={21} 
                removeClippedSubviews={Platform.OS === 'android'}
                style={styles.flatListContainer}
                contentContainerStyle={styles.flatListContentContainer}
                getItemLayout={(data, index) => (
                    { length: 65, offset: 65 * index, index } 
                )}
            />
        </View>
    );
};

const useStyles = makeStyles((theme) => ({
    searchBarContainer: {
        backgroundColor: "transparent",
        borderBottomColor: "transparent",
        borderTopColor: "transparent",
        paddingHorizontal: 0,
        marginBottom: 10,
    },
    searchBarInputContainer: {
        borderRadius: 25,
        backgroundColor: theme.colors.searchBg || theme.colors.grey5,
        height: 40,
    },
    searchInputStyle: {
        color: theme.colors.text,
        fontSize: 15,
        textAlign: I18nManager.isRTL ? 'right' : 'left',
    },
    flatListContainer: {
        maxHeight: "90%", 
        minHeight: 150,
    },
    flatListContentContainer: {
        paddingBottom: 10,
    },
    foodIconEmoji: {
        fontSize: 26,
        width: 35,
        height: 35,
        textAlign: 'center',
        textAlignVertical: 'center',
        marginRight: 10,
    },
    defaultIconContainer: {
        width: 35,
        height: 35,
        marginRight: 10,
        borderRadius: 17.5,
        backgroundColor: theme.colors.grey5,
        alignItems: "center",
        justifyContent: "center",
    },
    listItemContainer: {
        backgroundColor: "transparent",
        paddingVertical: 8,
        paddingHorizontal: 5,
        borderBottomColor: theme.colors.divider,
        minHeight: 65,
    },
    selectedListItem: { 
        backgroundColor: theme.colors.grey5, 
        borderRadius: 8,
    },
    multiSelectedListItemBorder: { 
        borderLeftWidth: 3, 
        borderLeftColor: theme.colors.success, 
    },
    multiSelectCheckboxContainer: { 
        padding: 10, 
        marginRight: 0, 
        marginLeft: -10, 
        backgroundColor: 'transparent',
        borderWidth: 0,
    },
    listItemTitle: {
        color: theme.colors.text,
        fontSize: 16,
        fontWeight: "500",
        textAlign: 'left',
        flexShrink: 1,
    },
    listItemSubtitleSecondary: {
        color: theme.colors.secondary,
        fontSize: 12,
        textAlign: 'left',
        marginTop: 2,
    },
    recentBadge: {
        position: 'absolute',
        top: -2,
        right: 0,
        fontSize: 10,
        color: theme.colors.primary,
        backgroundColor: theme.colors.grey5,
        paddingHorizontal: 4,
        paddingVertical: 1,
        borderRadius: 4,
        fontWeight: 'bold',
        textTransform: 'uppercase'
    },
    disabledOverlay: {
        opacity: 0.6,
    },
    noResultsContainer: {
        alignItems: 'center',
        paddingVertical: 20,
        paddingHorizontal: 10,
        minHeight: 150, 
        justifyContent: 'center',
    },
    noFoodsText: {
        color: theme.colors.grey2,
        fontStyle: "italic",
        textAlign: "center",
        marginBottom: 15,
    },
    addNewFoodButton: {
        marginTop: 10,
        borderColor: theme.colors.primary,
        paddingHorizontal: 20,
        borderRadius: 20,
    },
    addNewFoodButtonTitle: {
        color: theme.colors.primary,
        fontWeight: '600',
    },
}));

export default FoodSelectionList;
---------- END FoodSelectionList.tsx ----------


---------- ModalHeader.tsx ----------
// src/components/AddEntryModal/ModalHeader.tsx
import React from 'react';
import { View, TouchableOpacity, ActivityIndicator, StyleSheet, Keyboard } from 'react-native';
import { Text, Icon, Button, useTheme, makeStyles } from '@rneui/themed';
import { Food } from '../../types/food';
import { t } from '../../localization/i18n';

type ModalMode = 'normal' | 'quickAddSelect' | 'quickAddText';

interface ModalHeaderProps {
    title: string;
    isEditMode: boolean;
    modalMode: ModalMode;
    quickAddLoading: boolean;
    textQuickAddLoading: boolean;
    selectedFood: Food | null;
    selectedMultipleFoodsSize: number;
    selectedQuickAddIndicesSize: number;
    editingQuickAddItemIndex: number | null;
    isActionDisabled: boolean;
    isSingleAddButtonDisabled: boolean;
    isMultiAddButtonDisabled: boolean;
    isQuickAddConfirmDisabled: boolean;
    isQuickAddImageButtonDisabled: boolean;
    isQuickAddTextButtonDisabled: boolean;
    isAiLoading: boolean;
    toggleOverlay: () => void;
    onAddOrUpdateSingleEntry: () => void;
    onConfirmAddMultipleSelected: () => void;
    onConfirmQuickAdd: () => void;
    onQuickAddImage: () => void;
    onQuickAddText: () => void;
    onBackFromQuickAdd: () => void;
}

const ModalHeader: React.FC<ModalHeaderProps> = ({
    title, isEditMode, modalMode, quickAddLoading, textQuickAddLoading, selectedFood, selectedMultipleFoodsSize,
    selectedQuickAddIndicesSize, editingQuickAddItemIndex, isActionDisabled, isSingleAddButtonDisabled,
    isMultiAddButtonDisabled, isQuickAddConfirmDisabled, isQuickAddImageButtonDisabled, isQuickAddTextButtonDisabled,
    isAiLoading, toggleOverlay, onAddOrUpdateSingleEntry, onConfirmAddMultipleSelected,
    onConfirmQuickAdd, onQuickAddImage, onQuickAddText, onBackFromQuickAdd,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    const handleClose = () => {
        Keyboard.dismiss();
        toggleOverlay();
    };

    const isBackButtonVisible = (modalMode === 'quickAddSelect' || modalMode === 'quickAddText') && editingQuickAddItemIndex === null;

    return (
        <View style={styles.header}>
            {isBackButtonVisible ? (
                <Button
                    type="clear"
                    onPress={() => { if (isActionDisabled) return; Keyboard.dismiss(); onBackFromQuickAdd(); }}
                    icon={<Icon name="arrow-back" type="ionicon" size={24} color={isActionDisabled ? theme.colors.grey3 : theme.colors.primary} />}
                    containerStyle={styles.closeIconContainer}
                    disabled={isActionDisabled}
                />
            ) : (
                <TouchableOpacity onPress={handleClose} style={styles.closeIconContainer} disabled={isActionDisabled} hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}>
                    <Icon name="close" type="material" size={28} color={isActionDisabled ? theme.colors.grey3 : theme.colors.text} />
                </TouchableOpacity>
            )}

            <Text h4 h4Style={[styles.overlayTitle, isEditMode && modalMode === 'normal' && styles.editModeTitle]} numberOfLines={1} ellipsizeMode="tail">
                {title}
            </Text>

            <View style={styles.headerActionsContainer}>
                {modalMode === 'normal' && (
                    <>
                        {!isEditMode && !selectedFood && (
                            <View style={styles.quickAddIconsContainer}>
                                <TouchableOpacity onPress={onQuickAddText} disabled={isQuickAddTextButtonDisabled} style={styles.headerIcon}>
                                    {quickAddLoading && textQuickAddLoading ? (
                                        <ActivityIndicator size="small" color={theme.colors.primary} />
                                    ) : (
                                        <Icon name="text-box-search-outline" type="material-community" size={26} color={isQuickAddTextButtonDisabled ? theme.colors.grey3 : theme.colors.primary} />
                                    )}
                                </TouchableOpacity>
                                <TouchableOpacity onPress={onQuickAddImage} disabled={isQuickAddImageButtonDisabled} style={styles.headerIcon}>
                                    {quickAddLoading && !textQuickAddLoading ? (
                                        <ActivityIndicator size="small" color={theme.colors.primary} />
                                    ) : (
                                        <Icon name="camera-burst" type="material-community" size={26} color={isQuickAddImageButtonDisabled ? theme.colors.grey3 : theme.colors.primary} />
                                    )}
                                </TouchableOpacity>
                            </View>
                        )}
                        {isEditMode ? (
                            <Button title={t('addEntryModal.buttonUpdate')} onPress={onAddOrUpdateSingleEntry} disabled={isSingleAddButtonDisabled} buttonStyle={[styles.actionButton, styles.updateButton]} titleStyle={styles.buttonTitle} loading={isAiLoading && !!selectedFood} />
                        ) : selectedFood ? (
                            <Button title={t('addEntryModal.buttonAdd')} onPress={onAddOrUpdateSingleEntry} disabled={isSingleAddButtonDisabled} buttonStyle={styles.actionButton} titleStyle={styles.buttonTitle} loading={isAiLoading} />
                        ) : (
                            <Button title={t('addEntryModal.buttonAddSelected', { count: selectedMultipleFoodsSize })} onPress={onConfirmAddMultipleSelected} disabled={isMultiAddButtonDisabled} buttonStyle={[styles.actionButton, { backgroundColor: theme.colors.success }]} titleStyle={styles.buttonTitle} />
                        )}
                    </>
                )}
                {modalMode === 'quickAddSelect' && editingQuickAddItemIndex === null && (
                    <Button title={quickAddLoading ? t('addEntryModal.buttonLoading') : t('addEntryModal.buttonAddSelected', { count: selectedQuickAddIndicesSize })} onPress={onConfirmQuickAdd} disabled={isQuickAddConfirmDisabled} buttonStyle={[styles.actionButton, { backgroundColor: theme.colors.success }]} titleStyle={styles.buttonTitle} loading={quickAddLoading} />
                )}
                {modalMode === 'quickAddText' && <View style={styles.placeholderActionView} />}
                {modalMode === 'quickAddSelect' && editingQuickAddItemIndex !== null && <View style={styles.placeholderActionView} />}
            </View>
        </View>
    );
};

const useStyles = makeStyles((theme) => ({
    header: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 15, paddingHorizontal: 0 },
    closeIconContainer: { padding: 5, minWidth: 40, alignItems: 'flex-start' },
    overlayTitle: { color: theme.colors.text, fontWeight: 'bold', fontSize: 20, textAlign: 'center', flex: 1, marginHorizontal: 5 },
    editModeTitle: { color: theme.colors.warning },
    headerActionsContainer: { flexDirection: 'row', alignItems: 'center', minWidth: 80, justifyContent: 'flex-end' },
    quickAddIconsContainer: { flexDirection: 'row-reverse', alignItems: 'center' },
    headerIcon: { paddingHorizontal: 6, marginHorizontal: 2 },
    actionButton: { borderRadius: 20, paddingHorizontal: 12, paddingVertical: 8, minWidth: 70, marginLeft: 5, backgroundColor: theme.colors.primary },
    updateButton: { backgroundColor: theme.colors.warning },
    buttonTitle: { color: theme.colors.white, fontWeight: '600', fontSize: 14 },
    placeholderActionView: { width: 70, marginLeft: 5 },
}));

export default ModalHeader;
---------- END ModalHeader.tsx ----------


---------- AddFoodModal.tsx ----------
// src/components/AddFoodModal.tsx
import React, { useState, useEffect, useCallback } from "react";
import {
    View,
    KeyboardAvoidingView,
    Platform,
    ActivityIndicator,
    Alert,
    ScrollView,
    StyleSheet,
    TouchableOpacity,
} from "react-native";
import {
    Button,
    Input,
    Text,
    Overlay,
    makeStyles,
    useTheme,
    Icon,
} from "@rneui/themed";
import { Food } from "../types/food";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import Toast from "react-native-toast-message";
import {
    getMacrosFromText,
    getMacrosForImageFile,
    BackendError,
} from "../utils/macros";
import * as ImagePicker from "expo-image-picker";
import { ImagePickerResult } from 'expo-image-picker';
import { compressImageIfNeeded } from '../utils/imageUtils';
import FoodFormFields from "./FoodFormFields";
import { t } from '../localization/i18n';

// Use a specific type for the form data
type FoodFormData = Omit<Food, "id" | "createdAt">;

interface AddFoodModalProps {
    isVisible: boolean;
    toggleOverlay: () => void;
    newFood: FoodFormData;
    editFood: Food | null;
    errors: { [key: string]: string };
    handleInputChange: (
        key: keyof FoodFormData,
        value: string,
        isEdit: boolean
    ) => void;
    handleCreateFood: () => Promise<void>;
    handleUpdateFood: () => Promise<void>;
    validateFood: (food: FoodFormData | Food) => { [key: string]: string } | null;
    setErrors: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>;
}

const KEYBOARD_VERTICAL_OFFSET = Platform.OS === "ios" ? 60 : 0;

const AddFoodModal: React.FC<AddFoodModalProps> = ({
    isVisible,
    toggleOverlay,
    newFood,
    editFood,
    errors,
    handleInputChange,
    handleCreateFood,
    handleUpdateFood,
    validateFood,
    setErrors,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const [loading, setLoading] = useState(false);
    const [mode, setMode] = useState<"normal" | "ingredients">("normal");
    const [ingredients, setIngredients] = useState("");
    const [aiTextLoading, setAiTextLoading] = useState(false);
    const [aiImageLoading, setAiImageLoading] = useState(false);

    useEffect(() => {
        if (isVisible) {
            setErrors({}); setMode("normal"); setIngredients("");
            setAiTextLoading(false); setAiImageLoading(false); setLoading(false);
        }
    }, [isVisible, setErrors]);

    const getCurrentFoodData = (): Partial<FoodFormData> | Partial<Food> => {
        return editFood ? editFood : newFood;
    };

    const handleCreateOrUpdate = async () => {
        const isUpdate = !!editFood;
        const currentData = isUpdate ? editFood : newFood;
        
        const dataToValidate: Food | FoodFormData = {
            ...currentData,
            name: (currentData.name ?? "").trim(),
        };

        const validationErrors = validateFood(dataToValidate);
        if (validationErrors) {
            setErrors(validationErrors);
            Toast.show({ type: "error", text1: t('foodListScreen.fixErrors'), position: 'bottom' });
            return;
        }
        setErrors({}); setLoading(true);
        try {
            if (isUpdate) {
                await handleUpdateFood();
                Toast.show({ type: "success", text1: t('foodListScreen.foodUpdated', { foodName: dataToValidate.name }), position: 'bottom' });
            } else {
                await handleCreateFood();
                Toast.show({ type: "success", text1: t('foodListScreen.foodAdded', { foodName: dataToValidate.name }), position: 'bottom' });
            }
            toggleOverlay();
        } catch (error: any) {
            Alert.alert(t('foodListScreen.errorLoad'), error.message || t(isUpdate ? 'foodListScreen.errorUpdateMessage' : 'foodListScreen.errorCreateMessage'));
        } finally { setLoading(false); }
    };

    const handleAiTextButtonClick = async () => {
        const currentFoodName = (getCurrentFoodData().name ?? "").trim();
        const isUpdate = !!editFood;
        if (mode === "normal") {
            setMode("ingredients");
            handleInputChange("calories", "", isUpdate); handleInputChange("protein", "", isUpdate);
            handleInputChange("carbs", "", isUpdate); handleInputChange("fat", "", isUpdate);
        } else {
            if (!currentFoodName && !ingredients.trim()) { Alert.alert(t('addFoodModal.alertInputNeeded'), t('addFoodModal.alertInputNeededMessage')); return; }
            setAiTextLoading(true);
            try {
                const macros = await getMacrosFromText(currentFoodName, ingredients);
                // The 'macros' object now includes 'foodName'
                if (macros.foodName) {
                    handleInputChange("name", macros.foodName, isUpdate);
                }
                handleInputChange("calories", String(Math.round(macros.calories)), isUpdate);
                handleInputChange("protein", String(Math.round(macros.protein)), isUpdate);
                handleInputChange("carbs", String(Math.round(macros.carbs)), isUpdate);
                handleInputChange("fat", String(Math.round(macros.fat)), isUpdate);
                setMode("normal");
                Toast.show({
                    type: 'info',
                    text1: currentFoodName ? t('addFoodModal.macrosEstimatedText') : t('addFoodModal.foodIdentified'),
                    text2: currentFoodName ? undefined : t('addFoodModal.foodIdentifiedMessage', { foodName: macros.foodName }),
                    position: 'bottom'
                });
            } catch (error) {
                console.error("AI Macro fetch error (recipe - modal):", error);
            } finally {
                setAiTextLoading(false);
            }
        }
    };

    const handleGetImageAndAnalyze = async () => {
        if (aiImageLoading || aiTextLoading || loading) return;
        const processImage = async (pickerResult: ImagePickerResult) => {
            if (pickerResult.canceled) return;
            if (pickerResult.assets && pickerResult.assets.length > 0) {
                const originalAsset = pickerResult.assets[0]; setAiImageLoading(true);
                try {
                     const compressedResult = await compressImageIfNeeded(originalAsset);
                     const assetForAnalysis = compressedResult ? { ...originalAsset, uri: compressedResult.uri, width: compressedResult.width, height: compressedResult.height, mimeType: 'image/jpeg' } : originalAsset;
                     const result = await getMacrosForImageFile(assetForAnalysis);
                     const isUpdate = !!editFood;
                     handleInputChange("name", result.foodName, isUpdate); handleInputChange("calories", String(Math.round(result.calories)), isUpdate);
                     handleInputChange("protein", String(Math.round(result.protein)), isUpdate);
                     handleInputChange("carbs", String(Math.round(result.carbs)), isUpdate);
                     handleInputChange("fat", String(Math.round(result.fat)), isUpdate);
                     setMode("normal"); setIngredients("");
                     Toast.show({ type: 'success', text1: t('addFoodModal.foodIdentified'), text2: t('addFoodModal.foodIdentifiedMessage', { foodName: result.foodName }), position: 'bottom', });
                } catch (analysisError) { console.error("Error during image analysis (modal):", analysisError); }
                finally { setAiImageLoading(false); }
            } else { Alert.alert(t('addFoodModal.errorGetImage'), t('addEntryModal.alertQuickAddCouldNotSelect')); setAiImageLoading(false); }
        };
        Alert.alert(t('addFoodModal.errorGetImage'), t('addFoodModal.errorGetImageMessage'),
            [ { text: t('addEntryModal.cancel'), style: "cancel" },
              { text: t('addEntryModal.camera'), onPress: async () => { try { const perm = await ImagePicker.requestCameraPermissionsAsync(); if (!perm.granted) { Alert.alert(t('addFoodModal.errorPermission'), t('addFoodModal.errorCameraPermission')); return; } const res = await ImagePicker.launchCameraAsync({ quality: 1, exif: false }); await processImage(res); } catch (e) { console.error(e); Alert.alert(t('addFoodModal.errorCamera')); } } },
              { text: t('addEntryModal.gallery'), onPress: async () => { try { const perm = await ImagePicker.requestMediaLibraryPermissionsAsync(); if (!perm.granted) { Alert.alert(t('addFoodModal.errorPermission'), t('addEntryModal.alertQuickAddGalleryPermission')); return; } const res = await ImagePicker.launchImageLibraryAsync({ mediaTypes: ImagePicker.MediaTypeOptions.Images, quality: 1 }); await processImage(res); } catch (e) { console.error(e); Alert.alert(t('addFoodModal.errorGallery')); } } }, ],
            { cancelable: true }
        );
    };

    const isAnyLoading = loading || aiTextLoading || aiImageLoading;
    const combinedOverlayStyle = StyleSheet.flatten([ styles.overlayStyle, { backgroundColor: theme.colors.background } ]);

    return (
        <Overlay isVisible={isVisible} onBackdropPress={!isAnyLoading ? toggleOverlay : undefined} animationType="fade" overlayStyle={styles.overlayContainer} >
            <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={styles.keyboardAvoidingView} keyboardVerticalOffset={KEYBOARD_VERTICAL_OFFSET} >
                <View style={combinedOverlayStyle}>
                    <View style={styles.header}>
                        <Text h4 style={styles.overlayTitle}> {editFood ? t('addFoodModal.titleEdit') : t('addFoodModal.titleAdd')} </Text>
                        <Button title={editFood ? t('addFoodModal.buttonUpdate') : t('addFoodModal.buttonAdd')} onPress={handleCreateOrUpdate}
                                buttonStyle={[ styles.button, { backgroundColor: editFood ? theme.colors.warning : theme.colors.primary } ]}
                                titleStyle={styles.buttonTitle} loading={loading} disabled={isAnyLoading} containerStyle={styles.buttonContainer} />
                        <Icon name="close" type="material" size={28} color={theme.colors.text} onPress={!isAnyLoading ? toggleOverlay : undefined}
                              containerStyle={styles.closeIcon} disabled={isAnyLoading} disabledStyle={{ backgroundColor: 'transparent' }} />
                    </View>
                    <ScrollView keyboardShouldPersistTaps="handled">
                        <View style={styles.imageButtonContainer}>
                            <TouchableOpacity onPress={handleGetImageAndAnalyze} disabled={isAnyLoading} style={styles.iconButton}>
                                {aiImageLoading ? ( <ActivityIndicator size="small" color={theme.colors.primary} /> ) : (
                                    <Icon name="camera-enhance-outline" type="material-community" size={28} color={isAnyLoading ? theme.colors.grey3 : theme.colors.primary} />
                                )}
                            </TouchableOpacity>
                             <Text style={styles.imageButtonLabel}>{t('addFoodModal.getFromImage')}</Text>
                        </View>
                        {mode === "normal" ? (
                            <FoodFormFields values={getCurrentFoodData()} errors={errors} onInputChange={handleInputChange} isEditing={!!editFood} disabled={isAnyLoading} />
                        ) : (
                            <>
                                <View style={styles.backButtonContainer}>
                                    <Icon name="arrow-left" type="material-community" size={24} color={theme.colors.primary} onPress={() => !isAnyLoading && setMode("normal")} disabled={isAnyLoading} containerStyle={styles.backIcon} />
                                    <Text style={[styles.backButtonText, isAnyLoading && styles.disabledText]} onPress={() => !isAnyLoading && setMode("normal")}> {t('addFoodModal.backToManual')} </Text>
                                </View>
                                 <Input
                                    label={t('addFoodModal.ingredientsOptional')} labelStyle={styles.inputLabel} value={ingredients} onChangeText={setIngredients} multiline={true}
                                    numberOfLines={4} inputContainerStyle={[styles.inputContainerStyle, styles.multilineInputContainer]} inputStyle={[styles.inputStyle, styles.multilineInput]}
                                    placeholder={t('addFoodModal.ingredientsPlaceholder')} placeholderTextColor={theme.colors.grey3}
                                    leftIcon={<MaterialCommunityIcons name="format-list-bulleted" size={24} color={theme.colors.grey3} style={styles.multilineIcon} />}
                                    disabled={isAnyLoading}
                                />
                            </>
                        )}
                        <Button
                            title={mode === "normal" ? t('addFoodModal.aiCalculateRecipe') : ingredients ? t('addFoodModal.aiGetFromIngredients') : t('addFoodModal.aiGetFromNameOnly')}
                            onPress={handleAiTextButtonClick} buttonStyle={[styles.button, styles.aiButton, { backgroundColor: theme.colors.secondary }]}
                            titleStyle={styles.aiButtonTitle} loading={aiTextLoading} disabled={isAnyLoading}
                            icon={mode === "normal" ? <MaterialCommunityIcons name="text-box-search-outline" size={18} color={theme.colors.white} style={{ marginRight: 8 }} /> : undefined}
                            containerStyle={[styles.buttonContainer, { marginTop: 15 }]} />
                        <View style={styles.futureInputContainer}>
                            <Text style={styles.futureInputLabel}> {t('addFoodModal.barcodeComingSoon')} </Text>
                        </View>
                    </ScrollView>
                </View>
            </KeyboardAvoidingView>
        </Overlay>
    );
};

const useStyles = makeStyles((theme) => ({
    overlayContainer: { backgroundColor: 'transparent', width: '90%', maxWidth: 500, padding: 0, borderRadius: 15, shadowColor: "#000", shadowOffset: { width: 0, height: 2, }, shadowOpacity: 0.25, shadowRadius: 3.84, elevation: 5, overflow: 'hidden', },
    overlayStyle: { width: '100%', borderRadius: 15, padding: 20, paddingBottom: 0, maxHeight: '97%', backgroundColor: theme.colors.background },
    keyboardAvoidingView: { width: "100%", maxHeight: '100%' },
    header: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 20, paddingBottom: 10, borderBottomWidth: 1, borderBottomColor: theme.colors.divider, },
    overlayTitle: { color: theme.colors.text, fontWeight: "bold", fontSize: 20, flexShrink: 1, marginRight: 10, textAlign: 'left' },
    closeIcon: { padding: 5, marginLeft: 10, },
    imageButtonContainer: { flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start', marginBottom: 15, paddingHorizontal: 10, },
    iconButton: { padding: 8, marginRight: 8, },
    imageButtonLabel: { color: theme.colors.primary, fontSize: 14, fontWeight: '500', textAlign: 'left' },
    inputLabel: { color: theme.colors.text, fontWeight: '500', marginBottom: 2, fontSize: 14, textAlign: 'left' },
    inputContainerStyle: { borderBottomWidth: 1, borderBottomColor: theme.colors.grey4, marginBottom: 5, paddingBottom: 2, },
    inputStyle: { color: theme.colors.text, marginLeft: 10, fontSize: 16, textAlign: 'left' },
    multilineInputContainer: { borderWidth: 1, borderColor: theme.colors.grey4, borderRadius: 8, paddingVertical: 8, paddingHorizontal: 5, marginBottom: 10, borderBottomWidth: 1, borderBottomColor: theme.colors.grey4, minHeight: 100, },
    multilineInput: { marginLeft: 5, textAlignVertical: 'top', fontSize: 16, color: theme.colors.text, textAlign: 'left' },
    multilineIcon: { marginTop: 8, marginRight: 5, },
    futureInputContainer: { backgroundColor: theme.colors.grey5, padding: 15, borderRadius: 10, marginTop: 20, marginBottom: 10, alignItems: "center", },
    futureInputLabel: { color: theme.colors.secondary, fontStyle: "italic", },
    buttonContainer: { },
    button: { borderRadius: 8, paddingHorizontal: 15, paddingVertical: 10, },
    buttonTitle: { color: theme.colors.white, fontWeight: "600", fontSize: 15 },
    aiButton: { paddingVertical: 12, },
    aiButtonTitle: { fontWeight: "600", fontSize: 15, textAlign: 'center', },
    backButtonContainer: { flexDirection: "row", alignItems: "center", marginBottom: 15, marginTop: 5, },
    backIcon: { marginRight: 5, padding: 5, },
    backButtonText: { color: theme.colors.primary, fontSize: 16, fontWeight: '500', textAlign: 'left' },
    disabledText: { color: theme.colors.grey3, }
}));

export default AddFoodModal;
---------- END AddFoodModal.tsx ----------


---------- ConfirmationModal.tsx ----------
// src/components/ConfirmationModal.tsx
// components/ConfirmationModal.tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Overlay, Button, Input, Text, useTheme } from '@rneui/themed';
import { t } from '../localization/i18n';

interface ConfirmationModalProps {
  isVisible: boolean;
  onCancel: () => void;
  onConfirm: () => void;
  confirmationText: string;
  setConfirmationText: (text: string) => void;
  title?: string;
  message?: string;
  inputPlaceholder?: string;
}

const ConfirmationModal: React.FC<ConfirmationModalProps> = ({
  isVisible,
  onCancel,
  onConfirm,
  confirmationText,
  setConfirmationText,
  title,
  message,
  inputPlaceholder
}) => {
  const { theme } = useTheme();

  const modalTitle = title || t('confirmationModal.defaultTitle');
  const modalMessage = message || t('confirmationModal.defaultMessage');
  const modalPlaceholder = inputPlaceholder || t('confirmationModal.enterTextPlaceholder');


  return (
    <Overlay
      isVisible={isVisible}
      onBackdropPress={onCancel}
      overlayStyle={[styles.overlay, { backgroundColor: theme.colors.card }]}
      backdropStyle={styles.backdrop}
    >
      <View style={styles.container}>
        <Text style={[styles.title, {color: theme.colors.text}]}>{modalTitle}</Text>
        <Text style={[styles.message, {color: theme.colors.text}]}>{modalMessage}</Text>
        <Input
          placeholder={modalPlaceholder}
          placeholderTextColor={theme.colors.grey3} // Adjusted for better visibility
          value={confirmationText}
          onChangeText={setConfirmationText}
          containerStyle={styles.inputContainer}
          inputStyle={{ color: theme.colors.text, textAlign: 'left' }}
          inputContainerStyle={{borderBottomColor: theme.colors.text}}
        />
        <View style={styles.buttonContainer}>
          <Button title={t('confirmationModal.cancel')} onPress={onCancel} type="outline" buttonStyle={styles.button} />
          <Button
            title={t('confirmationModal.confirm')}
            onPress={onConfirm}
            color="error"
            buttonStyle={styles.button}
            disabled={confirmationText === ""}
          />
        </View>
      </View>
    </Overlay>
  );
};

const styles = StyleSheet.create({
    overlay: {
        borderRadius: 10,
        width: '80%',
        padding: 0,
    },
  container: {
    padding: 20,
    borderRadius: 10,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  message: {
    marginBottom: 15,
    textAlign: 'center'
  },
  inputContainer: {
    marginBottom: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  button: {
    width: 100,
    padding: 10,
  },
  backdrop: {
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
});

export default ConfirmationModal;
---------- END ConfirmationModal.tsx ----------


---------- DailyEntryListItem.tsx ----------
// src/components/DailyEntryListItem.tsx
import React, { useState, useEffect, useCallback, memo, useMemo } from 'react';
import { View, StyleSheet } from 'react-native';
import { ListItem, Button, Icon as RNEIcon, useTheme, makeStyles, Text } from '@rneui/themed';
import { DailyEntryItem } from '../types/dailyEntry';
import { t } from '../localization/i18n';
import { calculateDailyEntryGrade, FoodGradeResult } from '../utils/gradingUtils';
import { Settings } from '../types/settings';
import { getFoodIconUrl } from '../utils/iconUtils';


interface DailyEntryListItemProps {
    item: DailyEntryItem;
    reversedIndex: number;
    foodIcons: { [foodName: string]: string | null };
    setFoodIcons: React.Dispatch<React.SetStateAction<{ [foodName: string]: string | null }>>;
    onEdit: (item: DailyEntryItem, reversedIndex: number) => void;
    onRemove: (reversedIndex: number) => void;
    isSaving: boolean;
    dailyGoals: Settings['dailyGoals'];
}

const DailyEntryListItem = memo<DailyEntryListItemProps>(({
    item,
    reversedIndex,
    foodIcons,
    setFoodIcons,
    onEdit,
    onRemove,
    isSaving,
    dailyGoals,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    const iconIdentifier = useMemo(() => {
        if (item?.food?.name) {
            if (foodIcons[item.food.name] !== undefined) {
                return foodIcons[item.food.name];
            }
            return getFoodIconUrl(item.food.name); // No locale needed
        }
        return null;
    }, [item.food?.name, foodIcons]);

    useEffect(() => {
        if (item?.food?.name && iconIdentifier !== undefined && foodIcons[item.food.name] === undefined) {
            setFoodIcons(prev => ({ ...prev, [item.food.name]: iconIdentifier }));
        }
    }, [item.food?.name, iconIdentifier, foodIcons, setFoodIcons]);


    const gradeResult: FoodGradeResult | null = useMemo(() => {
        if (!item || !item.food || !dailyGoals) return null;
        return calculateDailyEntryGrade(item.food, item.grams, dailyGoals);
    }, [item, dailyGoals]);


    const renderListItemIcon = () => {
        if (!item?.food) {
             return (
                 <View style={[styles.foodIcon, styles.iconPlaceholder]}>
                     <RNEIcon name="help-circle-outline" type="ionicon" size={20} color={theme.colors.grey3} />
                 </View>
             );
        }
        if (iconIdentifier) {
            return <Text style={styles.foodIconEmoji}>{iconIdentifier}</Text>;
        } else {
            return (
                <View style={[styles.foodIcon, styles.iconPlaceholder]}>
                    <RNEIcon name="fast-food-outline" type="ionicon" size={20} color={theme.colors.grey3} />
                </View>
            );
        }
    };

     if (!item || !item.food) {
         return (
             <ListItem containerStyle={styles.listItemContainer}>
                 <ListItem.Content>
                      <ListItem.Title style={[{color: theme.colors.error}, styles.textLeft]}>{t('dailyEntryScreen.invalidEntryData')}</ListItem.Title>
                 </ListItem.Content>
             </ListItem>
         );
     }

    const handleEditPress = () => { if (!isSaving) onEdit(item, reversedIndex); };
    const handleDeletePress = () => { if (!isSaving) onRemove(reversedIndex); };

    const calculatedCalories = Math.round((item.food.calories / 100) * item.grams);
    const calculatedProtein = Math.round((item.food.protein / 100) * item.grams);
    const calculatedCarbs = Math.round((item.food.carbs / 100) * item.grams);
    const calculatedFat = Math.round((item.food.fat / 100) * item.grams);

    return (
        <ListItem.Swipeable
            bottomDivider
            leftContent={(reset) => (
                <Button
                    title={t('dailyEntryScreen.edit')}
                    onPress={() => { handleEditPress(); reset(); }}
                    icon={{ name: "edit", color: theme.colors.white }}
                    buttonStyle={styles.swipeButtonEdit}
                    titleStyle={styles.swipeButtonTitle}
                    disabled={isSaving}
                />
            )}
            rightContent={(reset) => (
                <Button
                    title={t('dailyEntryScreen.delete')}
                    onPress={() => { handleDeletePress(); reset(); }}
                    icon={{ name: "delete", color: theme.colors.white }}
                    buttonStyle={styles.swipeButtonDelete}
                    titleStyle={styles.swipeButtonTitle}
                    disabled={isSaving}
                />
            )}
            containerStyle={styles.listItemContainer}
        >
            {renderListItemIcon()}
            <ListItem.Content>
                <View style={styles.titleContainer}>
                    {gradeResult && (
                        <Text style={[styles.gradePill, { backgroundColor: gradeResult.color }]}>
                            {gradeResult.letter}
                        </Text>
                    )}
                    <ListItem.Title style={styles.listItemTitle}>
                        {item.food.name}
                    </ListItem.Title>
                </View>
                <ListItem.Subtitle style={styles.listItemSubtitle}>
                    {`${item.grams}g • Cal: ${calculatedCalories} P: ${calculatedProtein} C: ${calculatedCarbs} F: ${calculatedFat}`}
                </ListItem.Subtitle>
            </ListItem.Content>
            <ListItem.Chevron color={theme.colors.grey3} />
        </ListItem.Swipeable>
    );
});

const useStyles = makeStyles((theme) => ({
    foodIcon: { width: 40, height: 40, marginRight: 15, borderRadius: 8, alignItems: 'center', justifyContent: 'center', },
    foodIconEmoji: {
        fontSize: 28,
        width: 40,
        height: 40,
        marginRight: 15,
        textAlign: 'center',
        textAlignVertical: 'center',
    },
    iconPlaceholder: { backgroundColor: theme.colors.grey5, },
    listItemContainer: { backgroundColor: theme.colors.background, paddingVertical: 12, paddingHorizontal: 15, borderBottomColor: theme.colors.divider, },
    titleContainer: { flexDirection: 'row', alignItems: 'center', marginBottom: 3, },
    gradePill: {
        fontSize: 12,
        fontWeight: 'bold',
        color: theme.colors.white,
        paddingHorizontal: 6,
        paddingVertical: 2,
        borderRadius: 8,
        marginRight: 8,
        minWidth: 20,
        textAlign: 'center',
        overflow: 'hidden',
    },
    listItemTitle: {
        color: theme.colors.text,
        fontWeight: "600",
        fontSize: 16,
        flexShrink: 1,
        textAlign: 'left',
    },
    listItemSubtitle: { color: theme.colors.secondary, fontSize: 14, textAlign: 'left', },
    swipeButtonEdit: { minHeight: "100%", backgroundColor: theme.colors.warning, justifyContent: 'center', alignItems: 'center', },
    swipeButtonDelete: { minHeight: "100%", backgroundColor: theme.colors.error, justifyContent: 'center', alignItems: 'center', },
    swipeButtonTitle: { color: theme.colors.white, fontWeight: 'bold', fontSize: 15, },
    textLeft: { textAlign: 'left'},
}));

export default DailyEntryListItem;
---------- END DailyEntryListItem.tsx ----------


---------- DailyGoalsInput.tsx ----------
// src/components/DailyGoalsInput.tsx
// components/DailyGoalsInput.tsx
import React from "react";
import { Input, Text } from "@rneui/themed";
import { MacroType } from "../types/settings";
import { useTheme, makeStyles } from "@rneui/themed"; // Import makeStyles
import { t } from '../localization/i18n';

interface DailyGoalsInputProps {
    dailyGoals: { [key in MacroType]: number };
    onGoalChange: (goalType: MacroType, value: string) => void;
}

const DailyGoalsInput: React.FC<DailyGoalsInputProps> = ({
  dailyGoals,
  onGoalChange,
}) => {
  const { theme } = useTheme();
  const styles = useStyles(); // Use styles

  const getLabel = (macro: MacroType) => {
    switch(macro) {
        case 'calories': return t('dailyGoalsInput.caloriesGoal');
        case 'protein': return t('dailyGoalsInput.proteinGoal');
        case 'carbs': return t('dailyGoalsInput.carbsGoal');
        case 'fat': return t('dailyGoalsInput.fatGoal');
        default: return macro;
    }
  }

  return (
    <>
      {(["calories", "protein", "carbs", "fat"] as MacroType[]).map((macro) => (
        <Input
          key={macro}
          label={<Text style={[styles.labelStyle, { color: theme.colors.text }]}>{getLabel(macro)}</Text>}
          keyboardType="numeric"
          value={dailyGoals?.[macro]?.toString() || ""}
          onChangeText={(value) => onGoalChange(macro, value)}
          style={[styles.inputStyle, { color: theme.colors.text }]} // Apply inputStyle
          inputContainerStyle={{ borderBottomColor: theme.colors.text }}
        />
      ))}
    </>
  );
};

// Add useStyles
const useStyles = makeStyles((theme) => ({
    labelStyle: {
        color: theme.colors.text,
        fontWeight: 'normal', // RNEUI default is bold, make it normal if needed
        textAlign: 'left',
    },
    inputStyle: {
        textAlign: 'left',
    },
}));

export default DailyGoalsInput;
---------- END DailyGoalsInput.tsx ----------


---------- DailyProgress.tsx ----------
// src/components/DailyProgress.tsx
// components/DailyProgress.tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Text, useTheme, makeStyles } from '@rneui/themed'; // Import makeStyles
import { t } from '../localization/i18n';

interface DailyProgressProps {
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  goals: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
  };
}

const DailyProgress: React.FC<DailyProgressProps> = ({
  calories,
  protein,
  carbs,
  fat,
  goals,
}) => {
  const { theme } = useTheme();
  const styles = useStyles(); // Use styles

  const calculateProgress = (current: number, goal?: number) => {
    if (!goal || goal <= 0) return 0;
    return Math.min(current / goal, 1);
  };

  const renderProgressBar = (labelKey: 'calories' | 'protein' | 'carbs' | 'fat', current: number, goal: number | undefined, color: string) => {
      const progress = calculateProgress(current, goal);
      const labelText = t(`dailyProgress.${labelKey}`);
      return (
          <View style={styles.macroContainer} key={labelKey}>
              <View style={styles.labelContainer}>
                    <Text style={[styles.macroLabel, {color: theme.colors.text}]}>{labelText}:</Text>
                    <Text style={[styles.macroValue, {color: theme.colors.text}]}>
                        {`${Math.round(current)} / ${goal || 0}`}
                    </Text>
              </View>
              <View style={styles.progressBarContainer}>
                  <View style={[styles.progressBar, { width: `${progress * 100}%`, backgroundColor: color }]} />
              </View>
          </View>
      )
  }

  return (
    <View style={styles.container}>
        {renderProgressBar('calories', calories, goals.calories, theme.colors.primary)}
        {renderProgressBar('protein', protein, goals.protein, theme.colors.success)}
        {renderProgressBar('carbs', carbs, goals.carbs, theme.colors.warning)}
        {renderProgressBar('fat', fat, goals.fat, theme.colors.error)}
    </View>
  );
};

// Update useStyles for text alignment
const useStyles = makeStyles((theme) => ({
  container: {
    marginBottom: 20,
    padding: 10,
    borderRadius: 8,
  },
  macroContainer: {
    marginBottom: 10,
  },
  labelContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
  },
  macroLabel: {
    fontWeight: 'bold',
    textAlign: 'left',
  },
  macroValue: {
    textAlign: 'right',
  },
  progressBarContainer: {
      backgroundColor: theme.colors.grey5,
      borderRadius: 5,
      height: 10
  },
  progressBar: {
    height: 10,
    borderRadius: 5,
  },
}));

export default DailyProgress;
---------- END DailyProgress.tsx ----------


---------- DataManagementButtons.tsx ----------
// src/components/DataManagementButtons.tsx
// src/components/DataManagementButtons.tsx
import React, { useState } from "react";
import { Alert, Platform } from "react-native";
import { Button, Icon } from "@rneui/themed";
import * as DocumentPicker from "expo-document-picker";
import * as FileSystem from "expo-file-system";
import * as Sharing from 'expo-sharing';
import { formatDateISO } from "../utils/dateUtils";
import {
  clearAllData,
  loadDailyEntries,
  saveDailyEntries,
  loadFoods,
  saveFoods,
  loadSettings,
  saveSettings
} from "../services/storageService";
import ConfirmationModal from "./ConfirmationModal";
import { DailyEntry } from "../types/dailyEntry";
import { Food } from "../types/food";
import { Settings } from "../types/settings";
import { useTheme } from "@rneui/themed";
import { t } from '../localization/i18n';

interface DataManagementButtonsProps {
  onDataOperation: () => void;
}

const DataManagementButtons: React.FC<DataManagementButtonsProps> = ({
    onDataOperation
}) => {
  const [isConfirmationVisible, setIsConfirmationVisible] = useState(false);
  const [confirmationText, setConfirmationText] = useState("");
  const { theme } = useTheme();

  const handleExportData = async () => {
    try {
      const dailyEntries = await loadDailyEntries();
      const { items: foodItems } = await loadFoods(); // Correctly destructure to get the array of food items
      const settings = await loadSettings();
      
      const exportData = { dailyEntries, foods: foodItems, settings }; // Use the foodItems array
      
      const exportDataString = JSON.stringify(exportData, null, 2);
      const formattedDate = formatDateISO(new Date());
      const fileName = `macro_data_${formattedDate}.json`;
      const fileUri = FileSystem.documentDirectory + fileName;
      await FileSystem.writeAsStringAsync(fileUri, exportDataString, { encoding: FileSystem.EncodingType.UTF8, });
      if (!(await Sharing.isAvailableAsync())) {
        Alert.alert(t('dataManagement.exportError'), t('dataManagement.exportErrorNoSharing'));
        return;
      }
      await Sharing.shareAsync(fileUri, { mimeType: 'application/json', dialogTitle: t('dataManagement.exportData'), UTI: 'public.json' });
    } catch (error: any) {
      console.error("Export Error:", error);
      Alert.alert(t('dataManagement.exportFailed'), error.message || t('dataManagement.exportFailedMessage'));
    }
  };

  const handleImportData = async () => {
    try {
      const result = await DocumentPicker.getDocumentAsync({ type: ["application/json", "public.json"], copyToCacheDirectory: true });
      if (result.canceled) { console.log(t('dataManagement.importCancelled')); return; }
      if (result.assets && result.assets.length > 0) {
        const file = result.assets[0];
        if (!file.name?.toLowerCase().endsWith(".json")) { Alert.alert(t('dataManagement.importInvalidFileType'), t('dataManagement.importInvalidFileTypeMessage')); return; }
        if (file.size && file.size > 10 * 1024 * 1024) { Alert.alert(t('dataManagement.importFileTooLarge'), t('dataManagement.importFileTooLargeMessage')); return; }
        const fileContent = await FileSystem.readAsStringAsync(file.uri, { encoding: FileSystem.EncodingType.UTF8, });
        try {
          const importedData = JSON.parse(fileContent);
          if ( typeof importedData !== 'object' || importedData === null || !importedData.hasOwnProperty("dailyEntries") || !Array.isArray(importedData.dailyEntries) || !importedData.hasOwnProperty("foods") || !Array.isArray(importedData.foods) || !importedData.hasOwnProperty("settings") || typeof importedData.settings !== 'object' ) {
            Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedInvalidStructure')); return;
          }
          await saveDailyEntries(importedData.dailyEntries as DailyEntry[]);
          await saveFoods(importedData.foods as Food[]);
          await saveSettings(importedData.settings as Settings);
          Alert.alert(t('dataManagement.importSuccessful'), t('dataManagement.importSuccessfulMessage'));
          onDataOperation();
        } catch (parseError) {
          console.error("JSON Parse Error during import:", parseError);
          Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedParseError')); return;
        }
      } else {
        Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedAccessError'));
      }
    } catch (error: any) {
      console.error("Import Error:", error);
      if (error.code === 'NO_PERMISSIONS') { Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedPermissionError')); }
      else { Alert.alert(t('dataManagement.importFailed'), error.message || t('dataManagement.importFailedUnknownError')); }
    }
  };

  const handleClearData = () => { setIsConfirmationVisible(true); };

  const confirmClearData = async () => {
    if (confirmationText.trim().toUpperCase() === "CLEAR DATA") {
      try {
        await clearAllData();
        Alert.alert(t('dataManagement.clearDataSuccess'), t('dataManagement.clearDataSuccessMessage'));
        onDataOperation();
      } catch (error: any) {
        console.error("Clear Data Error:", error);
        Alert.alert(t('dataManagement.clearDataFailed'), error.message || t('dataManagement.clearDataFailedMessage'));
      } finally {
        setConfirmationText(""); setIsConfirmationVisible(false);
      }
    } else {
      Alert.alert(t('dataManagement.clearConfirmationFailed'), t('dataManagement.clearConfirmationFailedMessage'));
    }
  };

  return (
    <>
      <Button
        title={t('dataManagement.exportData')}
        onPress={handleExportData}
        buttonStyle={{ marginBottom: 10, backgroundColor: theme.colors.primary }}
        icon={<Icon name="export" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
      />
      <Button
        title={t('dataManagement.importData')}
        onPress={handleImportData}
        buttonStyle={{ marginBottom: 10, backgroundColor: theme.colors.primary }}
        icon={<Icon name="import" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
      />
      <Button
        title={t('dataManagement.clearAllData')}
        onPress={handleClearData}
        color="error"
        buttonStyle={{ marginBottom: 10 }}
        icon={<Icon name="trash-can-outline" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
      />
      <ConfirmationModal
        isVisible={isConfirmationVisible}
        onCancel={() => { setIsConfirmationVisible(false); setConfirmationText(""); }}
        onConfirm={confirmClearData}
        confirmationText={confirmationText}
        setConfirmationText={setConfirmationText}
        title={t('dataManagement.confirmClearTitle')}
        message={t('dataManagement.confirmClearMessage')}
        inputPlaceholder={t('dataManagement.confirmClearInputPlaceholder')}
      />
    </>
  );
};

export default DataManagementButtons;

---------- END DataManagementButtons.tsx ----------


---------- DateNavigator.tsx ----------
// src/components/DateNavigator.tsx
import React from 'react';
import { View, TouchableOpacity, StyleSheet } from 'react-native';
import { Button, Text, Icon as RNEIcon, useTheme, makeStyles } from '@rneui/themed';
import { parseISO, isValid } from 'date-fns';
import { formatDateReadableAsync } from '../utils/dateUtils'; // Import async version
import { t } from '../localization/i18n';
import i18n from '../localization/i18n';

interface DateNavigatorProps {
    selectedDate: string;
    onPreviousDay: () => void;
    onNextDay: () => void;
    onShowDatePicker: () => void;
    isSaving: boolean;
    isLoadingData: boolean;
}

const DateNavigator: React.FC<DateNavigatorProps> = ({
    selectedDate,
    onPreviousDay,
    onNextDay,
    onShowDatePicker,
    isSaving,
    isLoadingData,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const [displayDate, setDisplayDate] = React.useState(t('dateNavigator.invalidDate'));

    React.useEffect(() => {
        const updateDisplayDate = async () => {
            const parsedDate = parseISO(selectedDate);
            if (isValid(parsedDate)) {
                const formatted = await formatDateReadableAsync(parsedDate);
                setDisplayDate(formatted);
            } else {
                setDisplayDate(t('dateNavigator.invalidDate'));
            }
        };
        updateDisplayDate();
    }, [selectedDate, i18n.locale]); // Re-run when selectedDate or locale changes

    const isDisabled = isSaving || isLoadingData;

    return (
        <View style={styles.dateNavigation}>
            <Button
                type="clear"
                onPress={onPreviousDay}
                icon={<RNEIcon name="chevron-back-outline" type="ionicon" color={theme.colors.primary} size={28} />}
                buttonStyle={styles.navButton}
                disabled={isDisabled}
                disabledStyle={styles.disabledButton}
            />
            <TouchableOpacity onPress={onShowDatePicker} disabled={isDisabled}>
                <Text h4 h4Style={[styles.dateText, isDisabled && styles.disabledText]}>
                    {displayDate}
                </Text>
            </TouchableOpacity>
            <Button
                type="clear"
                onPress={onNextDay}
                icon={<RNEIcon name="chevron-forward-outline" type="ionicon" color={theme.colors.primary} size={28} />}
                buttonStyle={styles.navButton}
                disabled={isDisabled}
                disabledStyle={styles.disabledButton}
            />
        </View>
    );
};

const useStyles = makeStyles((theme) => ({
    dateNavigation: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingVertical: 10,
        paddingHorizontal: 10,
        backgroundColor: theme.colors.background,
    },
    navButton: {
        paddingHorizontal: 8,
    },
    dateText: {
        fontSize: 18,
        fontWeight: 'bold',
        color: theme.colors.text,
        textAlign: 'center',
        paddingVertical: 5,
    },
    disabledButton: {
        opacity: 0.5,
    },
    disabledText: {
        color: theme.colors.grey3,
    },
}));

export default DateNavigator;
---------- END DateNavigator.tsx ----------


---------- QuickAddItem.tsx ----------
// src/components/Entry/QuickAddItem.tsx
import React, { useMemo, useState } from "react";
import {
  View,
  TouchableOpacity,
  Pressable,
  ActivityIndicator,
} from "react-native";
import {
  ListItem,
  CheckBox,
  Input,
  Icon,
  Text,
  useTheme,
  makeStyles,
} from "@rneui/themed";
import { EstimatedFoodItem } from "../../types/macros";
import { Food } from "../../types/food";
import { isValidNumberInput } from "../../utils/validationUtils";
import { t } from "../../localization/i18n";
// import i18n from "../../localization/i18n"; // No longer needed here
import {
  calculateBaseFoodGrade,
  FoodGradeResult,
} from "../../utils/gradingUtils";
import { getFoodIconUrl } from "../../utils/iconUtils";


interface QuickAddItemProps {
  item: EstimatedFoodItem;
  index: number;
  isSelected: boolean;
  isEditingThisItem: boolean;
  isAnyItemEditing: boolean;
  isLoading?: boolean;
  foodIcons: { [foodName: string]: string | null };
  editedName: string;
  editedGrams: string;
  onToggleItem: (index: number) => void;
  onEditItem: (index: number) => void;
  onSaveEdit: () => void;
  onCancelEdit: () => void;
  onNameChange: (name: string) => void;
  onGramsChange: (grams: string) => void;
  onSaveToLibrary: (
    item: EstimatedFoodItem,
    setSavingState: (isSaving: boolean) => void
  ) => Promise<void>;
  foods: Food[];
}

const QuickAddItem: React.FC<QuickAddItemProps> = ({
  item,
  index,
  isSelected,
  isEditingThisItem,
  isAnyItemEditing,
  isLoading,
  foodIcons,
  editedName,
  editedGrams,
  onToggleItem,
  onEditItem,
  onSaveEdit,
  onCancelEdit,
  onNameChange,
  onGramsChange,
  onSaveToLibrary,
  foods,
}) => {
  const { theme } = useTheme();
  const styles = useStyles();
  const [isSavingToLibrary, setIsSavingToLibrary] = useState(false);

  const estimatedCalories = Math.round(
    (item.calories_per_100g / 100) * item.estimatedWeightGrams
  );

  const tempFoodForGrading: Food = useMemo(
    () => ({
      id: `temp-qa-${index}-${item.foodName}`,
      name: item.foodName,
      calories: item.calories_per_100g,
      protein: item.protein_per_100g,
      carbs: item.carbs_per_100g,
      fat: item.fat_per_100g,
      createdAt: new Date().toISOString(), // Added to satisfy the Food type
    }),
    [
      item.foodName,
      item.calories_per_100g,
      item.protein_per_100g,
      item.carbs_per_100g,
      item.fat_per_100g,
      index,
    ]
  );

  const gradeResult: FoodGradeResult | null = useMemo(
    () => calculateBaseFoodGrade(tempFoodForGrading),
    [tempFoodForGrading]
  );

  const isInLibrary = useMemo(() => {
    return foods.some(food => food.name.toLowerCase() === item.foodName.toLowerCase());
  }, [foods, item.foodName]);

  const handleSaveToLibraryPress = async () => {
    if (isSavingToLibrary || isAnyItemEditing || isLoading) return;
    await onSaveToLibrary(item, setIsSavingToLibrary);
  };

  const renderFoodIcon = (foodName: string) => {
    // Check foodIcons state first, then call getFoodIconUrl (which handles its own caching and lang detection)
    const iconIdentifier = foodIcons[foodName] ?? getFoodIconUrl(foodName);
    if (iconIdentifier) {
      return <Text style={styles.foodIconEmoji}>{iconIdentifier}</Text>;
    }
    return (
      <View style={[styles.foodIconContainer, styles.iconPlaceholder]}>
        <Icon
          name="help-outline"
          type="material"
          size={22}
          color={theme.colors.grey3}
        />
      </View>
    );
  };

  const canPerformActions =
    !isAnyItemEditing && !isLoading && !isSavingToLibrary;

  return (
    <Pressable
      onPress={() => !isEditingThisItem && onToggleItem(index)}
      disabled={
        (isAnyItemEditing && !isEditingThisItem) ||
        isLoading ||
        isSavingToLibrary
      }
    >
      <ListItem
        bottomDivider
        containerStyle={[
          styles.quickAddItemContainer,
          isEditingThisItem && styles.quickAddItemEditing,
          isSelected && !isEditingThisItem && styles.quickAddItemSelected,
          ((isAnyItemEditing && !isEditingThisItem) ||
            isLoading ||
            isSavingToLibrary) &&
            styles.disabledItem,
        ]}
      >
        {isEditingThisItem ? (
          <View style={styles.quickAddEditView}>
            <View style={styles.editIconAndNameRow}>
              {renderFoodIcon(item.foodName)}
              {gradeResult && (
                <Text
                  style={[
                    styles.gradePill,
                    {
                      backgroundColor: gradeResult.color,
                      marginLeft: 0,
                      marginRight: 8,
                    },
                  ]}
                >
                  {gradeResult.letter}
                </Text>
              )}
              <Input
                value={editedName}
                onChangeText={onNameChange}
                placeholder={t("quickAddList.foodNamePlaceholder")}
                inputContainerStyle={styles.quickEditInputContainer}
                inputStyle={styles.quickEditInput}
                containerStyle={styles.quickEditNameContainer}
                autoFocus
                selectTextOnFocus
              />
            </View>
            <View style={styles.quickEditGramsRow}>
              <Input
                value={editedGrams}
                onChangeText={onGramsChange}
                placeholder={t("quickAddList.gramsPlaceholder")}
                keyboardType="numeric"
                inputContainerStyle={styles.quickEditInputContainer}
                inputStyle={styles.quickEditInput}
                containerStyle={styles.quickEditGramsContainer}
                rightIcon={<Text style={styles.quickEditUnitText}>g</Text>}
                errorMessage={
                  !isValidNumberInput(editedGrams) && editedGrams !== ""
                    ? t("quickAddList.errorInvalidGrams")
                    : ""
                }
                errorStyle={styles.inputError}
              />
              <TouchableOpacity
                onPress={onSaveEdit}
                style={styles.quickEditActionButton}
              >
                <Icon
                  name="checkmark-circle"
                  type="ionicon"
                  color={theme.colors.success}
                  size={28}
                />
              </TouchableOpacity>
              <TouchableOpacity
                onPress={onCancelEdit}
                style={styles.quickEditActionButton}
              >
                <Icon
                  name="close-circle"
                  type="ionicon"
                  color={theme.colors.error}
                  size={28}
                />
              </TouchableOpacity>
            </View>
          </View>
        ) : (
          <>
            <CheckBox
              checked={isSelected}
              onPress={() => onToggleItem(index)}
              containerStyle={styles.quickAddCheckbox}
              checkedColor={theme.colors.primary}
              disabled={!canPerformActions}
              size={22}
            />
            {renderFoodIcon(item.foodName)}
            <ListItem.Content>
              <View style={styles.titleAndGradeContainer}>
                {gradeResult && (
                  <Text
                    style={[
                      styles.gradePill,
                      { backgroundColor: gradeResult.color },
                    ]}
                  >
                    {gradeResult.letter}
                  </Text>
                )}
                <ListItem.Title
                  style={styles.quickAddItemTitle}
                  numberOfLines={1}
                  ellipsizeMode="tail"
                >
                  {item.foodName}
                </ListItem.Title>
              </View>
              <ListItem.Subtitle style={styles.quickAddItemSubtitle}>
                {`Est: ${Math.round(
                  item.estimatedWeightGrams
                )}g • ~${estimatedCalories} kcal`}
              </ListItem.Subtitle>
            </ListItem.Content>
            <View style={styles.actionButtonsContainer}>
              {isSavingToLibrary ? (
                <ActivityIndicator
                  size="small"
                  color={theme.colors.primary}
                  style={styles.actionIconPadding}
                />
              ) : (
                <TouchableOpacity
                  onPress={handleSaveToLibraryPress}
                  disabled={!canPerformActions}
                  style={styles.actionIconPadding}
                >
                  <Icon
                    name={isInLibrary ? "bookmark" : "bookmark-plus-outline"}
                    type="material-community"
                    size={22}
                    color={
                      canPerformActions
                        ? theme.colors.primary
                        : theme.colors.grey3
                    }
                  />
                </TouchableOpacity>
              )}
              <TouchableOpacity
                onPress={() => onEditItem(index)}
                disabled={!canPerformActions}
                style={styles.actionIconPadding}
              >
                <Icon
                  name="edit"
                  type="material"
                  size={22}
                  color={
                    canPerformActions ? theme.colors.secondary : theme.colors.grey3
                  }
                />
              </TouchableOpacity>
            </View>
          </>
        )}
      </ListItem>
    </Pressable>
  );
};

const useStyles = makeStyles((theme) => ({
  quickAddItemContainer: {
    paddingVertical: 8,
    paddingHorizontal: 8,
    backgroundColor: theme.colors.background,
    borderBottomColor: theme.colors.divider,
    flexDirection: "row",
    alignItems: "center",
    minHeight: 65,
  },
  quickAddItemSelected: {
    backgroundColor: theme.colors.successLight,
    borderLeftWidth: 4,
    borderLeftColor: theme.colors.success,
  },
  quickAddItemEditing: {
    backgroundColor: theme.colors.background,
    paddingVertical: 12,
    paddingHorizontal: 10,
    borderWidth: 1.5,
    borderColor: theme.colors.primary,
    borderRadius: 8,
    marginVertical: 6,
    marginHorizontal: 2,
    shadowColor: theme.colors.black,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.15,
    shadowRadius: 2.5,
    elevation: 4,
  },
  disabledItem: {
    opacity: 0.6,
  },
  quickAddCheckbox: {
    padding: 0,
    margin: 0,
    marginRight: 10,
    marginLeft: 0,
    backgroundColor: "transparent",
    borderWidth: 0,
  },
  foodIconContainer: {
    width: 38,
    height: 38,
    marginRight: 10,
    borderRadius: 6,
    alignItems: "center",
    justifyContent: "center",
    overflow: "hidden",
  },
  foodIconEmoji: {
    fontSize: 26,
    width: 38,
    height: 38,
    marginRight: 10,
    textAlign: 'center',
    textAlignVertical: 'center',
  },
  iconPlaceholder: {
    backgroundColor: theme.colors.grey5,
  },
  titleAndGradeContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 2,
  },
  gradePill: {
    fontSize: 11,
    fontWeight: "bold",
    color: theme.colors.white,
    paddingHorizontal: 5,
    paddingVertical: 1,
    borderRadius: 6,
    marginRight: 6,
    minWidth: 18,
    textAlign: "center",
    overflow: "hidden",
  },
  quickAddItemTitle: {
    fontWeight: "600",
    color: theme.colors.text,
    fontSize: 15,
    textAlign: "left",
    flexShrink: 1,
  },
  quickAddItemSubtitle: {
    color: theme.colors.secondary,
    fontSize: 12.5,
    textAlign: "left",
  },
  actionButtonsContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginLeft: 8,
  },
  actionIconPadding: {
    paddingVertical: 8,
    paddingHorizontal: 6,
  },
  quickAddEditView: {
    flex: 1,
  },
  editIconAndNameRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  quickEditInputContainer: {
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.primary,
    height: 38,
    paddingHorizontal: 0,
  },
  quickEditInput: {
    fontSize: 15,
    color: theme.colors.text,
    paddingVertical: 0,
    textAlign: "left",
  },
  quickEditNameContainer: {
    flex: 1,
    paddingHorizontal: 0,
  },
  quickEditGramsRow: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 5,
  },
  quickEditGramsContainer: {
    flex: 1,
    paddingHorizontal: 0,
    marginRight: 10,
  },
  quickEditUnitText: {
    color: theme.colors.grey2,
    fontSize: 14,
    fontWeight: "500",
    paddingRight: 5,
  },
  quickEditActionButton: {
    paddingHorizontal: 8,
    paddingVertical: 5,
  },
  inputError: {
    color: theme.colors.error,
    fontSize: 11,
    marginVertical: 0,
    marginLeft: 2,
    height: 14,
    textAlign: "left",
  },
}));

export default QuickAddItem;
---------- END QuickAddItem.tsx ----------


---------- FoodFormFields.tsx ----------
// src/components/FoodFormFields.tsx
import React from 'react';
import { Input, makeStyles, useTheme, Text } from '@rneui/themed'; // Add Text
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { Food } from '../types/food';
import { t } from '../localization/i18n';

// The form deals with data that doesn't include id or createdAt
type FoodFormData = Omit<Food, 'id' | 'createdAt'>;
type FoodFormValues = Partial<FoodFormData>;

interface FoodFormFieldsProps {
    values: FoodFormValues;
    errors: { [key: string]: string };
    onInputChange: (key: keyof FoodFormData, value: string, isEdit: boolean) => void;
    isEditing: boolean;
    disabled: boolean;
}

const FoodFormFields: React.FC<FoodFormFieldsProps> = ({
    values,
    errors,
    onInputChange,
    isEditing,
    disabled,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    const getValue = (key: keyof FoodFormData): string => {
         const val = values[key];
         if (typeof val === 'number') {
              if (val === 0 && !isEditing) return "";
              return String(val);
         }
         return String(val ?? "");
    };

    const getErrorText = (fieldKey: keyof FoodFormData) => {
        const errorKey = errors[fieldKey];
        if (!errorKey) return "";
        // Assuming error keys in en.json map to field names + specific error type
        // e.g., foodFormFields.errorNameRequired, foodFormFields.errorNonNegative
        // This might need adjustment based on how specific your error keys are.
        if (fieldKey === 'name' && errorKey === 'Name is required') return t('foodFormFields.errorNameRequired');
        if (['calories', 'protein', 'carbs', 'fat'].includes(fieldKey) && errorKey === 'Must be a non-negative number') {
            return t('foodFormFields.errorNonNegative');
        }
        return errorKey; // Fallback to the raw error key if no specific translation found
    };

    return (
        <>
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.foodName')}</Text>}
                value={getValue("name")}
                onChangeText={(text) => onInputChange("name", text, isEditing)}
                errorMessage={getErrorText("name")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="food-apple" size={24} color={errors.name ? theme.colors.error : theme.colors.grey3} />}
                disabled={disabled}
                autoCapitalize="words"
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.calories')}</Text>}
                keyboardType="numeric" value={getValue("calories")}
                onChangeText={(text) => onInputChange("calories", text, isEditing)}
                errorMessage={getErrorText("calories")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="fire" size={24} color={errors.calories ? theme.colors.error : theme.colors.grey3} />}
                disabled={disabled}
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.protein')}</Text>}
                keyboardType="numeric" value={getValue("protein")}
                onChangeText={(text) => onInputChange("protein", text, isEditing)}
                errorMessage={getErrorText("protein")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="food-drumstick" size={24} color={errors.protein ? theme.colors.error : theme.colors.grey3} />}
                disabled={disabled}
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.carbs')}</Text>}
                keyboardType="numeric" value={getValue("carbs")}
                onChangeText={(text) => onInputChange("carbs", text, isEditing)}
                errorMessage={getErrorText("carbs")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="bread-slice" size={24} color={errors.carbs ? theme.colors.error : theme.colors.grey3} />}
                disabled={disabled}
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.fat')}</Text>}
                keyboardType="numeric" value={getValue("fat")}
                onChangeText={(text) => onInputChange("fat", text, isEditing)}
                errorMessage={getErrorText("fat")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="oil" size={24} color={errors.fat ? theme.colors.error : theme.colors.grey3} />}
                disabled={disabled}
            />
        </>
    );
};

const useStyles = makeStyles((theme) => ({
    labelStyle: { color: theme.colors.text, fontWeight: '500', marginBottom: 2, fontSize: 14, textAlign: 'left' },
    inputContainerStyle: { borderBottomWidth: 1, borderBottomColor: theme.colors.grey4, marginBottom: 5, paddingBottom: 2, },
    inputStyle: { color: theme.colors.text, marginLeft: 10, fontSize: 16, textAlign: 'left' },
    errorStyle: { color: theme.colors.error, textAlign: 'left' }
}));

export default FoodFormFields;
---------- END FoodFormFields.tsx ----------


---------- FoodItem.tsx ----------
// src/components/FoodItem.tsx
import React, { forwardRef, memo, useMemo, useEffect } from "react";
import { View, TouchableOpacity } from "react-native";
import { ListItem, Icon as RNEIcon, useTheme, Button, makeStyles, Text } from "@rneui/themed";
import { Food } from "../types/food";
import { t } from '../localization/i18n';
import { calculateBaseFoodGrade, FoodGradeResult } from "../utils/gradingUtils";
import { getFoodIconUrl } from "../utils/iconUtils";

interface FoodItemProps {
  food: Food;
  onEdit: (food: Food) => void;
  onDelete: (foodId: string) => void;
  onQuickAdd: (food: Food) => void;
  onShare: (food: Food) => void;
  foodIconUrl: string | null; 
  setFoodIconForName: (name: string, icon: string | null) => void;
}

const FoodItem = memo(forwardRef<any, FoodItemProps>(
  ({ food, onEdit, onDelete, onQuickAdd, onShare, foodIconUrl, setFoodIconForName }, ref) => {
    const { theme } = useTheme();
    const styles = useStyles();

    const iconIdentifier = useMemo(() => {
        if (foodIconUrl !== undefined) return foodIconUrl; 
        return getFoodIconUrl(food.name);
    }, [food.name, foodIconUrl]);

    useEffect(() => {
        if (food.name && iconIdentifier !== undefined && foodIconUrl === undefined) {
            setFoodIconForName(food.name, iconIdentifier);
        }
    }, [food.name, iconIdentifier, foodIconUrl, setFoodIconForName]);

    const gradeResult: FoodGradeResult | null = useMemo(() => {
        return calculateBaseFoodGrade(food);
    }, [food]);

    const renderIcon = () => {
        if (iconIdentifier) {
            return <Text style={styles.foodIconEmoji}>{iconIdentifier}</Text>;
        } else {
            return (
                <View style={styles.foodIconPlaceholderView}>
                    <RNEIcon name="help-outline" type="material" size={22} color={theme.colors.grey3} />
                </View>
            );
        }
    };

    return (
      <ListItem.Swipeable
        ref={ref}
        bottomDivider
        leftContent={(reset) => (
          <Button title={t('foodListScreen.edit')} onPress={() => { onEdit(food); reset(); }} icon={{ name: "edit", color: theme.colors.white }} buttonStyle={styles.swipeButtonEdit} titleStyle={styles.swipeButtonTitle} />
        )}
        rightContent={(reset) => (
          <Button title={t('foodListScreen.delete')} onPress={() => { onDelete(food.id); reset(); }} icon={{ name: "delete", color: theme.colors.white }} buttonStyle={styles.swipeButtonDelete} titleStyle={styles.swipeButtonTitle} />
        )}
        containerStyle={styles.listItemContainer}
      >
        {renderIcon()}
        <ListItem.Content>
          <View style={styles.titleContainer}>
            {gradeResult && (
                <Text style={[styles.gradePill, { backgroundColor: gradeResult.color }]}>
                    {gradeResult.letter}
                </Text>
            )}
            <ListItem.Title style={styles.title} numberOfLines={2} ellipsizeMode="tail">
                {food.name}
            </ListItem.Title>
          </View>
          <ListItem.Subtitle style={styles.subtitle}>
            {`100g: Cal: ${Math.round(food.calories)} P: ${Math.round(food.protein)} C: ${Math.round(food.carbs)} F: ${Math.round(food.fat)}`}
          </ListItem.Subtitle>
        </ListItem.Content>
        <TouchableOpacity onPress={() => onShare(food)} style={styles.actionButton} hitSlop={{ top: 10, bottom: 10, left: 5, right: 5 }}>
            <RNEIcon name="share-variant-outline" type="material-community" color={theme.colors.primary} size={24} />
        </TouchableOpacity>
        <TouchableOpacity onPress={() => onQuickAdd(food)} style={styles.actionButton} hitSlop={{ top: 10, bottom: 10, left: 5, right: 5 }}>
            <RNEIcon name="add-circle-outline" type="ionicon" color={theme.colors.primary} size={26} />
        </TouchableOpacity>
      </ListItem.Swipeable>
    );
  }
));

const useStyles = makeStyles((theme) => ({
    listItemContainer: { backgroundColor: theme.colors.background, paddingVertical: 12, paddingHorizontal: 15, borderBottomColor: theme.colors.divider, },
    titleContainer: { flexDirection: 'row', alignItems: 'center', marginBottom: 3, },
    gradePill: {
        fontSize: 12, fontWeight: 'bold', color: theme.colors.white, 
        paddingHorizontal: 6, paddingVertical: 2, borderRadius: 8,
        marginRight: 8, minWidth: 20, textAlign: 'center', overflow: 'hidden', 
    },
    title: { color: theme.colors.text, fontWeight: "600", fontSize: 16, flexShrink: 1, textAlign: 'left', }, 
    subtitle: { color: theme.colors.secondary, fontSize: 13, marginTop: 2, textAlign: 'left', },
    swipeButtonEdit: { minHeight: "100%", backgroundColor: theme.colors.warning, justifyContent: 'center', alignItems: 'center', },
    swipeButtonDelete: { minHeight: "100%", backgroundColor: theme.colors.error, justifyContent: 'center', alignItems: 'center', },
    swipeButtonTitle: { color: theme.colors.white, fontWeight: 'bold', fontSize: 15, },
    foodIconEmoji: {
        fontSize: 28, width: 40, height: 40,
        marginRight: 15, textAlign: 'center', textAlignVertical: 'center',
    },
    foodIconPlaceholderView: {
        width: 40, height: 40, marginRight: 15, borderRadius: 8, 
        alignItems: 'center', justifyContent: 'center', backgroundColor: theme.colors.grey5,
    },
    actionButton: { 
        paddingHorizontal: 8, justifyContent: 'center',
        alignItems: 'center', marginLeft: 0,
    },
}));

export default FoodItem;
---------- END FoodItem.tsx ----------


---------- QuickAddList.tsx ----------
// src/components/QuickAddList.tsx
import React from 'react';
import {
    View,
    FlatList,
    ActivityIndicator,
} from 'react-native';
import {
    Icon,
    Text,
    useTheme,
    makeStyles,
} from '@rneui/themed';
import { EstimatedFoodItem } from '../types/macros';
import { Food } from '../types/food'; // Import Food type
import { t } from '../localization/i18n';
import QuickAddItem from './Entry/QuickAddItem';

interface QuickAddListProps {
    items: EstimatedFoodItem[];
    selectedIndices: Set<number>;
    editingIndex: number | null;
    editedName: string;
    editedGrams: string;
    onToggleItem: (index: number) => void;
    onEditItem: (index: number) => void;
    onSaveEdit: () => void;
    onCancelEdit: () => void;
    onNameChange: (name: string) => void;
    onGramsChange: (grams: string) => void;
    style?: object;
    isLoading?: boolean;
    foodIcons: { [foodName: string]: string | null | undefined };
    onSaveItemToLibrary: (item: EstimatedFoodItem, setSavingState: (isSaving: boolean) => void) => Promise<void>;
    foods: Food[]; // Add foods prop
}

const QuickAddList: React.FC<QuickAddListProps> = ({
    items,
    selectedIndices,
    editingIndex,
    editedName,
    editedGrams,
    onToggleItem,
    onEditItem,
    onSaveEdit,
    onCancelEdit,
    onNameChange,
    onGramsChange,
    style,
    isLoading,
    foodIcons,
    onSaveItemToLibrary,
    foods, // Destructure foods
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    const renderItem = ({ item, index }: { item: EstimatedFoodItem; index: number }) => {
        const isSelected = selectedIndices.has(index);
        const isEditingThisItem = editingIndex === index;
        const isAnyItemEditing = editingIndex !== null;

        return (
            <QuickAddItem
                item={item}
                index={index}
                isSelected={isSelected}
                isEditingThisItem={isEditingThisItem}
                isAnyItemEditing={isAnyItemEditing}
                isLoading={isLoading}
                foodIcons={foodIcons}
                editedName={isEditingThisItem ? editedName : ''}
                editedGrams={isEditingThisItem ? editedGrams : ''}
                onToggleItem={onToggleItem}
                onEditItem={onEditItem}
                onSaveEdit={onSaveEdit}
                onCancelEdit={onCancelEdit}
                onNameChange={onNameChange}
                onGramsChange={onGramsChange}
                onSaveToLibrary={onSaveItemToLibrary}
                foods={foods} // Pass foods to QuickAddItem
            />
        );
    };

    if (isLoading && items.length === 0) {
         return (
             <View style={styles.centeredContent}>
                 <ActivityIndicator size="large" color={theme.colors.primary} />
                 <Text style={styles.loadingText}>{t('quickAddList.analyzing')}</Text>
             </View>
         );
    }

    return (
        <FlatList
            data={items}
            keyExtractor={(item, index) => `quickadd-${index}-${item.foodName}-${item.estimatedWeightGrams}`}
            renderItem={renderItem}
            ListEmptyComponent={
                !isLoading ? (
                    <View style={styles.emptyListContainer}>
                        <Icon name="image-search-outline" type="material-community" size={48} color={theme.colors.grey3} />
                        <Text style={styles.emptyListText}>{t('quickAddList.emptyMessage')}</Text>
                        <Text style={styles.emptyListSubText}>{t('quickAddList.emptyHint')}</Text>
                    </View>
                ) : null
            }
            style={[styles.listDefaults, style]}
            extraData={{ selectedIndices, editingIndex, foodIcons, isLoading, editedName, editedGrams, foodsLength: foods.length }}
            keyboardShouldPersistTaps="handled"
            contentContainerStyle={items.length === 0 && !isLoading ? styles.listContentContainerEmpty : {paddingBottom: 10}}
        />
    );
};

const useStyles = makeStyles((theme) => ({
    listDefaults: {},
    listContentContainerEmpty: { flexGrow: 1, justifyContent: 'center', },
    emptyListContainer: {
        alignItems: "center",
        justifyContent: 'center',
        paddingVertical: 40,
        paddingHorizontal: 20,
        flexGrow: 1,
    },
    emptyListText: {
        color: theme.colors.grey2,
        fontSize: 16,
        textAlign: "center",
        marginTop: 15,
        fontWeight: '500',
    },
    emptyListSubText: {
        fontSize: 14,
        color: theme.colors.grey3,
        textAlign: "center",
        marginTop: 8,
    },
    centeredContent: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        padding: 20,
        minHeight: 200,
    },
    loadingText: {
        marginTop: 12,
        color: theme.colors.text,
        fontSize: 16,
        fontWeight: "500",
    },
}));

export default QuickAddList;
---------- END QuickAddList.tsx ----------


---------- StatisticsChart.tsx ----------
// src/components/StatisticsChart.tsx
import React from "react";
import { View, StyleSheet, Platform } from "react-native";
import { WebView } from "react-native-webview";
import { Statistics, MacroType, macros as macroKeys } from "../types/settings";
import { useTheme } from "@rneui/themed";
import { t } from '../localization/i18n';
import i18n from '../localization/i18n'; // Import i18n for locale
import * as Localization from 'expo-localization'; // Import Localization

// Declare uPlot as a global variable for TypeScript, as it's loaded via CDN in the WebView
declare const uPlot: any;

// Local interface for uPlot Series configuration to help TypeScript
interface uPlotSeriesConfig {
  stroke?: string;
  width?: number;
  label?: string;
  points?: { show?: boolean; size?: number; fill?: string; stroke?: string; };
  dash?: number[];
  fill?: string;
  // Add other series properties if you use them
}

interface StatisticsChartProps {
  statistics: Statistics;
}

const StatisticsChart: React.FC<StatisticsChartProps> = ({ statistics }) => {
  const { theme } = useTheme();

  const getChartTitle = (macro: MacroType): string => {
    switch(macro) {
        case 'calories': return t('dailyProgress.calories');
        case 'protein': return t('dailyProgress.protein');
        case 'carbs': return t('dailyProgress.carbs');
        case 'fat': return t('dailyProgress.fat');
        default:
            const exhaustiveCheck: never = macro;
            return exhaustiveCheck;
    }
  };

  const chartHeightInHTML = 250;
  const chartVerticalMarginInHTML = 20;
  const totalEstimatedWebViewHeight = macroKeys.length * (chartHeightInHTML + chartVerticalMarginInHTML) + 40; // Extra padding for safety

  const generateChartHTML = () => {
    const chartData = (macroKeys as readonly MacroType[]).reduce((acc, macro) => {
      acc[macro] = statistics[macro].map((series) =>
        series.map((item) => ({ x: item.x / 1000, y: item.y })) // Ensure x is in seconds
      );
      return acc;
    }, {} as { [key in MacroType]: { x: number; y: number }[][] });

    const textColor = theme.colors.text;
    const gridColor = theme.colors.grey5;
    const fontFamily = Platform.OS === 'ios' ? "System" : "sans-serif";

    const lineColors = {
      calories: theme.colors.primary, protein: theme.colors.success,
      carbs: theme.colors.warning, fat: theme.colors.error,
    };

    return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
            <title>Macro Charts</title>
            <style>
                body { font-family: ${fontFamily}; margin: 0; padding: 0; background-color: ${theme.colors.background}; color: ${textColor}; overflow-x: hidden; }
                .chart-container { width: 95%; height: ${chartHeightInHTML}px; margin: ${chartVerticalMarginInHTML / 2}px auto; }
                .no-data-message { display: flex; align-items: center; justify-content: center; height: 100%; text-align: center; color: ${textColor}; font-size: 14px; }
                .u-legend .u-series > td { min-width: 50px; } /* Ensure legend items have some width */
            </style>
            <link rel="stylesheet" href="https://unpkg.com/uplot@1.6.27/dist/uPlot.min.css">
            <script src="https://unpkg.com/uplot@1.6.27/dist/uPlot.iife.min.js"></script>
        </head>
        <body>
            ${(macroKeys as readonly MacroType[]).map((macro) => {
                const currentMacroData = chartData[macro];
                const chartTitle = getChartTitle(macro);
                const isCalories = macro === "calories";
                
                const movingAverageLabel = t('statisticsChart.movingAverage');
                const goalLabel = t('statisticsChart.goal');

                const intakeSeries: uPlotSeriesConfig = {
                    stroke: lineColors[macro],
                    width: 2.5,
                    label: movingAverageLabel,
                    points: { show: false },
                    fill: `${lineColors[macro]}2A`,
                };
                
                const goalSeries: uPlotSeriesConfig = {
                    stroke: "#e74c3c",
                    width: 1.5,
                    dash: [10, 5],
                    label: goalLabel,
                    points: { show: false }
                };

                const seriesConfig: uPlotSeriesConfig[] = [
                    {}, // X-axis
                    intakeSeries
                ];

                if (isCalories) {
                    seriesConfig.push(goalSeries);
                }


                return `
                <div id="${macro}-chart" class="chart-container">
                    <div class="no-data-message">${t("statisticsChart.noData", { chartTitle: chartTitle })}</div>
                </div>
                <script>
                    (function() {
                        const chartElement = document.getElementById('${macro}-chart');
                        try {
                            const dataForChart = ${JSON.stringify(currentMacroData)};
                            let canRender = false;

                            let xValues = [];
                            let yValuesMovingAvg = [];
                            let yValuesGoal = [];
                            
                            // data structure: [ [daily_intake], [moving_avg], [goal]? ]
                            if (dataForChart && dataForChart.length >= 2 && dataForChart[0] && dataForChart[1] && Array.isArray(dataForChart[0]) && dataForChart[0].length >= 1) {
                                // xValues from daily data to get all date points
                                xValues = dataForChart[0].map(d => d.x);
                                // yValues from moving average data
                                yValuesMovingAvg = dataForChart[1].map(d => d.y);
                                canRender = true; 
                                
                                if (${isCalories} && dataForChart.length > 2 && dataForChart[2] && Array.isArray(dataForChart[2])) {
                                    const tempGoalMap = new Map(dataForChart[2].map(p => [p.x, p.y]));
                                    yValuesGoal = xValues.map(x => tempGoalMap.get(x) === undefined ? null : tempGoalMap.get(x));
                                }
                            }

                            if (canRender) {
                                chartElement.innerHTML = ''; // Clear "no data" message
                                const uPlotInstanceData = ${isCalories} 
                                    ? [xValues, yValuesMovingAvg, yValuesGoal] 
                                    : [xValues, yValuesMovingAvg];
                                
                                const opts = {
                                    title: "${chartTitle}",
                                    width: chartElement.offsetWidth,
                                    height: ${chartHeightInHTML},
                                    tzDate: ts => uPlot.tzDate(new Date(ts * 1000), '${Localization.getCalendars()?.[0]?.timeZone || 'UTC'}'),
                                    scales: { x: { time: true }, y: { range: (self, min, max) => [0, Math.max(10, max * 1.25)] } },
                                    axes: [
                                        { stroke: "${textColor}", font: "12px ${fontFamily}", grid: { stroke: "${gridColor}", width: 1 }, ticks: { stroke: "${gridColor}", width: 1 } },
                                        { stroke: "${textColor}", font: "12px ${fontFamily}", grid: { stroke: "${gridColor}", width: 1 }, ticks: { stroke: "${gridColor}", width: 1 }, values: (self, ticks) => ticks.map(rawValue => Math.round(rawValue)) }
                                    ],
                                    series: ${JSON.stringify(seriesConfig)},
                                    legend: { show: false },
                                    cursor: { drag: { setScale: false }, focus: { prox: 30 }, points: { size: 6, fill: (self, i) => self.series[i]._stroke, stroke: (self, i) => self.series[i]._stroke } }
                                };
                                new uPlot(opts, uPlotInstanceData, chartElement);
                            }
                        } catch (e) {
                            console.error('--- ERROR in uPlot script for ${macro} ---', e.message, e.stack);
                            chartElement.innerHTML = '<div class="no-data-message" style="color:red;">Chart Error: ' + e.message + '</div>';
                        }
                    })();
                </script>
            `;}).join("")}
        </body>
        </html>
        `;
  };

  return (
    <View style={[styles.webViewContainer, { height: totalEstimatedWebViewHeight }]}>
      <WebView
        originWhitelist={["*"]}
        source={{ html: generateChartHTML(), baseUrl: Platform.OS === 'android' ? 'file:///android_asset/' : '' }} // baseUrl for Android
        style={styles.webView}
        scalesPageToFit={Platform.OS === 'android'}
        scrollEnabled={false}
        javaScriptEnabled={true}
        domStorageEnabled={true}
        onError={(syntheticEvent) => {
          const {nativeEvent} = syntheticEvent;
          console.warn('WebView error: ', nativeEvent);
        }}
        onHttpError={(syntheticEvent) => { // Useful for 404s on resources like uPlot CSS/JS if CDN fails
            const {nativeEvent} = syntheticEvent;
            console.warn('WebView HTTP error: ', nativeEvent.url, nativeEvent.statusCode, nativeEvent.description);
        }}
        // Log messages from WebView's console.log to React Native console
        onMessage={(event) => {
            console.log("WebView Message:", event.nativeEvent.data);
        }}
        // Inject JavaScript to bridge console.log, console.error, etc.
        // Note: This basic bridge might not capture all nuances or complex objects perfectly.
        injectedJavaScript={`
            (function() {
                const originalConsoleLog = console.log;
                const originalConsoleError = console.error;
                const originalConsoleWarn = console.warn;
                const originalConsoleInfo = console.info;
                const originalConsoleDebug = console.debug;

                const rnBridgePost = (type, args) => {
                    const message = args.map(arg => {
                        if (typeof arg === 'object' || typeof arg === 'function') {
                            try {
                                return JSON.stringify(arg);
                            } catch (e) {
                                return '[Unserializable Object]';
                            }
                        }
                        return String(arg);
                    }).join(' ');
                    window.ReactNativeWebView.postMessage(JSON.stringify({ type: 'CONSOLE', level: type, message: message }));
                };

                console.log = function() { originalConsoleLog.apply(console, arguments); rnBridgePost('LOG', Array.from(arguments)); };
                console.error = function() { originalConsoleError.apply(console, arguments); rnBridgePost('ERROR', Array.from(arguments)); };
                console.warn = function() { originalConsoleWarn.apply(console, arguments); rnBridgePost('WARN', Array.from(arguments)); };
                console.info = function() { originalConsoleInfo.apply(console, arguments); rnBridgePost('INFO', Array.from(arguments)); };
                console.debug = function() { originalConsoleDebug.apply(console, arguments); rnBridgePost('DEBUG', Array.from(arguments)); };
                window.onerror = function(message, source, lineno, colno, error) {
                    rnBridgePost('GLOBAL_ERROR', [message, 'at', source + ':' + lineno + ':' + colno, error ? error.stack : '']);
                    return false; // Let default handler run.
                };
            })();
            true; // note: this is required, or you'll sometimes get silent failures
        `}
        key={`stat-chart-${theme.mode}-${i18n.locale}-${JSON.stringify(statistics).length}`}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  webViewContainer: {
    width: "100%",
    marginTop: 10,
  },
  webView: {
    flex: 1,
    backgroundColor: 'transparent',
  },
});

export default StatisticsChart;
---------- END StatisticsChart.tsx ----------


---------- ThemeSwitch.tsx ----------
// src/components/ThemeSwitch.tsx
// components/ThemeSwitch.tsx
import React from "react";
import { ListItem, Switch, useTheme } from "@rneui/themed";
import { t } from '../localization/i18n';

interface ThemeSwitchProps {
  currentTheme: 'light' | 'dark' | 'system';
  onToggle: (theme: 'light' | 'dark' | 'system') => void;
}

const ThemeSwitch: React.FC<ThemeSwitchProps> = ({ currentTheme, onToggle }) => {
  const { theme } = useTheme();

  return (
    <ListItem
      bottomDivider
      containerStyle={{ backgroundColor: theme.colors.background }}
    >
      <ListItem.Content>
        <ListItem.Title style={{ color: theme.colors.text, textAlign: 'left' }}>
          {t('themeSwitch.darkMode')}
        </ListItem.Title>
      </ListItem.Content>
      <Switch
        value={currentTheme === 'dark'}
        onValueChange={(newValue) => {
          onToggle(newValue ? 'dark' : 'light');
        }}
      />
    </ListItem>
  );
};

export default ThemeSwitch;
---------- END ThemeSwitch.tsx ----------


---------- AuthContext.tsx ----------
import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';
import { loadSettings, saveSettings } from '../services/storageService';
import * as authService from '../services/authService';
import { Settings, LanguageCode } from '../types/settings';
import { Token } from '../types/token';

export interface AuthState {
  authenticated: boolean;
  token: string | null;
}

export interface AuthContextType {
  authState: AuthState;
  settings: Settings;
  isLoading: boolean;
  login: (tokenData: Token) => Promise<void>;
  logout: () => Promise<void>;
  changeTheme: (theme: 'light' | 'dark' | 'system') => void;
  changeLocale: (locale: LanguageCode) => void;
}

const AuthContext = createContext<Partial<AuthContextType>>({});

export function useAuth() {
  return useContext(AuthContext);
}

export const AuthProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const [authState, setAuthState] = useState<AuthState>({ authenticated: false, token: null });
  const [settings, setSettings] = useState<Settings>({
    theme: 'system',
    language: 'system',
    dailyGoals: { calories: 2000, protein: 150, carbs: 200, fat: 70 },
  });
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadAuthData = async () => {
      try {
        const tokenData = await authService.getAuthToken();
        const loadedSettings = await loadSettings();
        setSettings(loadedSettings);

        if (tokenData?.access_token) {
          setAuthState({ authenticated: true, token: tokenData.access_token });
        }
      } catch (e) {
        console.error("Failed to load auth data", e);
      } finally {
        setIsLoading(false);
      }
    };

    loadAuthData();
  }, []);

  const login = async (tokenData: Token) => {
    await authService.setAuthToken(tokenData);
    setAuthState({ authenticated: true, token: tokenData.access_token });
  };

  const logout = async () => {
    await authService.logoutUser(); // This clears tokens and calls backend
    setAuthState({ authenticated: false, token: null });
  };

  const changeTheme = useCallback(async (theme: 'light' | 'dark' | 'system') => {
    const newSettings = { ...settings, theme };
    setSettings(newSettings);
    await saveSettings(newSettings);
  }, [settings]);

  const changeLocale = useCallback(async (locale: LanguageCode) => {
    const newSettings = { ...settings, language: locale };
    setSettings(newSettings);
    await saveSettings(newSettings);
  }, [settings]);

  const value: AuthContextType = {
    authState,
    settings,
    isLoading,
    login,
    logout,
    changeTheme,
    changeLocale,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
---------- END AuthContext.tsx ----------


---------- i18n.ts ----------
// src/localization/i18n.ts
import * as Localization from 'expo-localization';
import { I18n } from 'i18n-js';
import en from './languages/en.json';
import ru from './languages/ru.json';
import he from './languages/he.json';
import { Platform, I18nManager } from 'react-native';
// Import specific date-fns locales statically
import { enUS, ru as ruLocale, he as heLocale } from 'date-fns/locale';

const translations = {
  en,
  ru,
  he,
};

const i18n = new I18n(translations);

// --- Helper Type Generation for Translation Keys ---

// Helper type to recursively generate dot-notation paths including intermediate paths
type Paths<T> = T extends object ? {
    [K in keyof T]: K extends string ? 
        T[K] extends any[] ? `${K}` : // If it's an array, the key itself is a valid path to the array
        `${K}` | `${K}.${Paths<T[K]>}` 
        : never;
}[keyof T] : never;

// Flattens the union type generated by Paths (removes trailing dots)
type FlattenPath<T extends string> =
    T extends `${infer Head}.${infer Tail}` ?
        Tail extends '' ? Head : `${Head}.${FlattenPath<Tail>}` :
    T;

// Final type representing all valid translation keys
export type TranslationKey = FlattenPath<Paths<typeof en>>;

// --- End Helper Type Generation ---


// Set initial locale and handle RTL
export const setLocale = (locale: string) => {
  const languageTag = locale.split('-')[0];
  i18n.locale = languageTag;
  i18n.defaultLocale = 'en';

  const isRTL = languageTag === 'he';
  if (Platform.OS !== 'web' && I18nManager.isRTL !== isRTL) {
    I18nManager.forceRTL(isRTL);
    console.log(`RTL forced to: ${isRTL} for locale: ${languageTag}. App restart/reload may be needed for full layout update.`);
  } else if (Platform.OS === 'web') {
      document.documentElement.dir = isRTL ? 'rtl' : 'ltr';
  }
};

const deviceLocale = Localization.getLocales()?.[0]?.languageTag || 'en-US';
setLocale(deviceLocale);

// Updated t function with generic type for better type safety with `returnObjects: true`
export function t<TResult = string>(scope: TranslationKey, options?: any): TResult {
  return i18n.t(scope as string, { ...options, locale: i18n.locale }) as TResult;
}

// Function to get date-fns locale (unchanged)
export const getDateFnLocale = async () => {
  const currentLocale = i18n.locale.split('-')[0];
  switch (currentLocale) {
    case 'ru':
      return ruLocale;
    case 'he':
      return heLocale;
    case 'en':
    default:
      return enUS;
  }
};

export default i18n;
---------- END i18n.ts ----------


---------- en.json ----------
{
  "app": {
    "initializing": "Initializing...",
    "name": "MacrosVisionAI",
    "alertButtons": {
      "later": "Later",
      "restartNow": "Restart Now"
    }
  },
  "errors": {
    "estimationFailedTitle": "Estimation Failed",
    "analysisFailedTitle": "Analysis Failed",
    "aiGramsProcessingError": "The AI couldn't process the quantity. Please try phrasing it differently (e.g., '1 cup' instead of 'a cup').",
    "unexpectedError": "An unexpected error occurred. Please try again."
  },
  "forgotPasswordScreen": {
    "title": "Reset Password",
    "instructions": "Enter your account's email address and we will send you a link to reset your password.",
    "emailPlaceholder": "Email Address",
    "buttonText": "Send Reset Link",
    "backToLogin": "Back to Login",
    "alertSuccessTitle": "Check Your Email",
    "forgotPasswordLink": "Forgot Password?"
  },
  "settingsScreen": {
    "title": "Settings",
    "account": {
      "title": "Account",
      "actions": "Account Actions",
      "logout": "Logout",
      "logoutConfirmTitle": "Confirm Logout",
      "logoutConfirmMessage": "Are you sure you want to log out?"
    },
    "general": {
      "title": "General"
    },
    "dailyGoals": {
      "title": "Daily Goals"
    },
    "goals": {
      "estimateButton": "Estimate Goals"
    },
    "statistics": {
      "title": "Statistics"
    },
    "dataManagement": {
      "title": "Data Management"
    },
    "language": {
      "title": "Language",
      "system": "System Default",
      "english": "English",
      "russian": "Russian",
      "hebrew": "Hebrew",
      "restartMessage": "Language changed. Restart the app for full effect."
    }
  },
  "accountSettings": {
    "coinBalance": "Coin Balance",
    "addTestCoins": "Add 10 Coins (Test)",
    "testButtonWarning": "Note: The \"Add Coins\" button is for testing/development only and should be removed or secured for production releases.",
    "notApplicable": "N/A",
    "errorLoadCoins": "Could not load coin balance",
    "errorAddCoins": "Failed to Add Coins",
    "coinsAdded": "Coins Added!"
  },
  "themeSwitch": {
    "darkMode": "Dark Mode"
  },
  "dailyGoalsInput": {
    "caloriesGoal": "Calories Goal",
    "proteinGoal": "Protein Goal",
    "carbsGoal": "Carbs Goal",
    "fatGoal": "Fat Goal"
  },
  "dataManagement": {
    "exportData": "Export Data",
    "importData": "Import Data",
    "clearAllData": "Clear All Data",
    "exportError": "Sharing Error",
    "exportErrorNoSharing": "Sharing is not available on your platform.",
    "exportFailed": "Export Failed",
    "exportFailedMessage": "An error occurred while exporting data.",
    "importCancelled": "Import cancelled by user.",
    "importInvalidFileType": "Invalid File Type",
    "importInvalidFileTypeMessage": "Please select a valid '.json' file.",
    "importFileTooLarge": "File Too Large",
    "importFileTooLargeMessage": "The selected file is too large (max 10MB).",
    "importFailed": "Import Failed",
    "importFailedInvalidStructure": "The imported file has an invalid structure or is missing required data (dailyEntries, foods, settings).",
    "importFailedParseError": "The imported file is not valid JSON or has corrupted content.",
    "importFailedAccessError": "Could not access the selected file.",
    "importFailedPermissionError": "Storage permissions are required to import files.",
    "importFailedUnknownError": "An unknown error occurred during import.",
    "importSuccessful": "Import Successful",
    "importSuccessfulMessage": "Data imported and saved successfully.",
    "clearDataSuccess": "Data Cleared",
    "clearDataSuccessMessage": "All application data has been successfully cleared.",
    "clearDataFailed": "Clear Data Failed",
    "clearDataFailedMessage": "Failed to clear data.",
    "confirmClearTitle": "Confirm Clear All Data",
    "confirmClearMessage": "This action is irreversible and will delete all entries, foods, and settings.\n\nEnter \"CLEAR DATA\" to proceed.",
    "confirmClearInputPlaceholder": "Enter \"CLEAR DATA\"",
    "clearConfirmationFailed": "Confirmation Failed",
    "clearConfirmationFailedMessage": "Incorrect confirmation text entered. Data was not cleared.",
    "dataReloaded": "Data reloaded."
  },
  "confirmationModal": {
    "confirm": "Confirm",
    "cancel": "Cancel",
    "defaultTitle": "Confirm Action",
    "defaultMessage": "Are you sure you want to perform this action?",
    "enterTextPlaceholder": "Enter confirmation text",
    "restartRequiredTitle": "Restart Required"
  },
  "dailyEntryScreen": {
    "tabTitle": "Daily Entry",
    "todaysEntries": "Today's Entries",
    "saving": "Saving...",
    "loadingEntries": "Loading Entries...",
    "noEntries": "No entries recorded for this day.",
    "noEntriesHint": "Tap '+' to add your first meal.",
    "entryAdded": "Entry added",
    "entryUpdated": "Entry updated",
    "itemRemoved": "%{itemName} removed",
    "undo": "Tap here to undo",
    "entryRestored": "Entry restored!",
    "itemsAdded": "%{count} item(s) added",
    "toDateFormat": "to %{date}",
    "errorLoad": "Load Error",
    "errorLoadMessage": "Failed to load necessary data.",
    "errorSave": "Save Error",
    "errorSaveMessage": "Could not save changes. Please try again.",
    "errorInvalidDate": "Invalid Date",
    "errorInvalidDateMessage": "Selected date is not valid.",
    "errorEditEntry": "Edit Error",
    "errorEditEntryMessage": "Error preparing entry for edit.",
    "errorAddMultiple": "Add Multiple Error",
    "errorAddMultipleMessage": "Failed to add multiple items.",
    "invalidEntryData": "Invalid Entry Data",
    "edit": "Edit",
    "delete": "Delete"
  },
  "foodListScreen": {
    "tabTitle": "Foods",
    "searchPlaceholder": "Search Your Food Library...",
    "loadingFoods": "Loading Foods...",
    "emptyLibrary": "Your food library is empty.",
    "emptyLibraryHint": "Tap '+' to add your first food item!",
    "noResults": "No foods found matching \"%{searchTerm}\"",
    "errorLoad": "Error",
    "errorLoadMessage": "Failed to load food list.",
    "foodAdded": "%{foodName} added",
    "foodUpdated": "%{foodName} updated",
    "foodDeleted": "%{foodName} deleted",
    "foodRestored": "%{foodName} restored",
    "errorCreate": "Error",
    "errorCreateMessage": "Failed to create food.",
    "errorUpdate": "Error",
    "errorUpdateMessage": "Failed to update food.",
    "errorDelete": "Delete Error",
    "errorDeleteMessage": "Failed to delete food from storage. Restored item.",
    "fixErrors": "Please fix errors",
    "edit": "Edit",
    "delete": "Delete",
    "shareFoodTitle": "Share %{foodName}",
    "shareErrorTitle": "Share Error",
    "shareErrorMessage": "Could not share food item.",
    "deepLinkErrorTitle": "Error Opening Link",
    "deepLinkInvalidData": "The food data from the link is invalid.",
    "deepLinkParseError": "Could not read food data from the link.",
    "sortBy": "Sort by",
    "sortByName": "Name",
    "sortByNewest": "Newest",
    "sortByOldest": "Oldest"
  },
  "addEntryModal": {
    "titleAdd": "Add Entry",
    "titleEdit": "Edit Entry",
    "titleQuickAddSelect": "Select Items to Add",
    "titleQuickAddEdit": "Edit Item",
    "titleQuickAddAnalyzing": "Analyzing...",
    "titleQuickAddFromText": "Quick Add from Text",
    "searchPlaceholder": "Search Foods...",
    "recent": "Recent",
    "noResults": "No foods found matching \"%{searchTerm}\".",
    "emptyLibraryMessage": "Your food library is empty. Tap below to add your first food item!",
    "noQuickAddResults": "No food items found.",
    "amount": "Amount",
    "grams": "Grams",
    "autoAi": "Auto (AI)",
    "quickAddServing": "Quick Add:",
    "lastUsedServing": "Last: %{grams}g",
    "gramsPlaceholder": "Enter grams (e.g., 150)",
    "gramsPlaceholderEdit": "Update grams",
    "gramsError": "Enter a valid number",
    "autoPlaceholder": "Describe quantity (e.g., 1 cup cooked)",
    "buttonAdd": "Add",
    "buttonUpdate": "Update",
    "buttonBack": "Back",
    "buttonAddSelected": "Add %{count}",
    "buttonLoading": "Loading...",
    "quickAddHeader": "Select Items from Image",
    "quickAddHeaderEdit": "Editing Item Details",
    "alertInputMissing": "Input Missing",
    "alertInputMissingMessage": "Please select a food and enter a quantity description.",
    "alertGramsEstimated": "Grams Estimated",
    "alertGramsEstimatedMessage": "Estimated %{grams}g for %{foodName}",
    "alertFoodNotSelected": "Food Not Selected",
    "alertFoodNotSelectedMessage": "Please select a food item.",
    "alertInvalidAmount": "Invalid Amount",
    "alertInvalidAmountMessage": "Please enter a valid positive number for grams.",
    "alertQuickAddPermission": "Permission Required",
    "alertQuickAddCameraPermission": "Camera access needed.",
    "alertQuickAddGalleryPermission": "Gallery access needed.",
    "alertQuickAddUserCancelled": "User cancelled",
    "alertQuickAddCouldNotSelect": "Could not select image.",
    "alertQuickAddError": "Error",
    "alertQuickAddErrorMessage": "An unexpected error occurred.",
    "alertQuickAddFinishEditing": "Finish Editing",
    "alertQuickAddFinishEditingSaveOrCancel": "Please save or cancel the current edit first.",
    "alertQuickAddFromImageTitle": "Quick Add from Image",
    "alertQuickAddFromImageMessage": "Identify multiple foods from an image.",
    "alertQuickAddInvalidName": "Invalid Name",
    "alertQuickAddInvalidNameMessage": "Food name cannot be empty.",
    "alertQuickAddInvalidGrams": "Invalid Grams",
    "alertQuickAddInvalidGramsMessage": "Please enter a valid positive number.",
    "alertQuickAddNoItemsSelected": "No Items Selected",
    "alertQuickAddNoItemsSelectedMessage": "Select items to add.",
    "alertQuickAddNothingToAdd": "Nothing to Add",
    "alertQuickAddNothingToAddMessage": "No valid items were selected or prepared.",
    "alertQuickAddErrorPreparing": "Error",
    "alertQuickAddErrorPreparingMessage": "Could not prepare items to add.",
    "camera": "Camera",
    "gallery": "Gallery",
    "cancel": "Cancel",
    "addNewFoodButton": "Add New Food",
    "alertOverwriteFoodTitle": "Food Exists",
    "alertOverwriteFoodMessage": "A food named \"%{foodName}\" already exists. Overwrite with new macros?",
    "overwrite": "Overwrite",
    "toastFoodSavedToLibrary": "\"%{foodName}\" saved to library.",
    "toastFoodUpdatedInLibrary": "\"%{foodName}\" updated in library.",
    "toastErrorSavingToLibrary": "Error saving food to library.",
    "textQuickAdd": {
      "placeholder": "Describe your meal...\ne.g., '150g chicken breast, a side salad with tomatoes, and one apple'",
      "analyzeButton": "Analyze Text",
      "alertInputEmpty": "Input Empty",
      "alertInputEmptyMessage": "Please type or say what you ate to analyze."
    }
  },
  "addFoodModal": {
    "titleAdd": "Add New Food",
    "titleEdit": "Edit Food",
    "buttonAdd": "Add",
    "buttonUpdate": "Update",
    "getFromImage": "Get from Image",
    "ingredientsOptional": "Ingredients (Optional)",
    "ingredientsPlaceholder": "e.g.\n100g Chicken Breast\n50g Rice\n1 tbsp Olive Oil",
    "backToManual": "Back to Manual Input",
    "aiCalculateRecipe": "Calculate with AI (Recipe/Text)",
    "aiGetFromIngredients": "Get Macros from Ingredients",
    "aiGetFromNameOnly": "Get Macros from Name Only",
    "barcodeComingSoon": "Barcode Input (Coming Soon)",
    "alertInputNeeded": "Input Needed",
    "alertInputNeededMessage": "Please enter a food name or ingredients to analyze.",
    "macrosEstimatedText": "Macros estimated from text.",
    "foodIdentified": "Food Identified!",
    "foodIdentifiedMessage": "Identified as %{foodName}. Macros estimated.",
    "errorGetImage": "Get Image",
    "errorGetImageMessage": "Choose a source for the food image:",
    "errorCamera": "Camera Error",
    "errorGallery": "Gallery Error",
    "errorPermission": "Permission Required",
    "errorCameraPermission": "Camera access needed."
  },
  "foodFormFields": {
    "foodName": "Food Name",
    "calories": "Calories (per 100g)",
    "protein": "Protein (per 100g)",
    "carbs": "Carbs (per 100g)",
    "fat": "Fat (per 100g)",
    "errorNameRequired": "Name is required",
    "errorNonNegative": "Must be a non-negative number"
  },
  "quickAddList": {
    "foodNamePlaceholder": "Food Name",
    "gramsPlaceholder": "Grams",
    "errorInvalidGrams": "Invalid",
    "analyzing": "Analyzing...",
    "emptyMessage": "No identifiable foods found in the image.",
    "emptyHint": "Try a different image or add manually."
  },
  "dailyProgress": {
    "calories": "Calories",
    "protein": "Protein",
    "carbs": "Carbs",
    "fat": "Fat"
  },
  "dateNavigator": {
    "invalidDate": "Invalid Date"
  },
  "utils": {
    "macros": {
      "errorTitle": "AI Analysis Failed",
      "multiItemErrorTitle": "Quick Add Failed",
      "errorMessage": "Could not get a response from the AI. Please try again.",
      "invalidResponse": "The AI gave a response in an unexpected format. Please try again or rephrase your request."
    },
    "units": {
      "errorTitle": "AI Estimation Failed"
    },
    "image": {
      "alertCompressionError": "Compression Error",
      "alertCompressionErrorMessage": "Could not process the image for compression.",
      "errorFailedToRead": "Failed to read image file: %{error}"
    }
  },
  "backendService": {
    "errorInvalidClientId": "Invalid client ID. Please restart the app.",
    "errorRequestFailedParse": "The server sent an unreadable response (Status %{status}).",
    "errorRequestFailedDetailFormat": "The server sent a response with an unexpected format (Status %{status}).",
    "errorRequestFailedWithServerMsg": "The server returned an error (Status %{status}).",
    "errorAuthFailed": "Authentication with the server failed. Please restart the app.",
    "errorPermissionDenied": "Permission denied by server.",
    "errorNotFound": "The requested resource was not found on the server.",
    "errorTooManyRequests": "You're doing that too fast! Please wait a moment and try again.",
    "errorInsufficientCoins": "You don't have enough AI coins for this action. More will be available soon!",
    "errorNetwork": "Could not connect to the server.",
    "errorNetworkTimeout": "The server is taking too long to respond. Please try again in a few moments.",
    "errorNetworkConnection": " Please check your internet connection.",
    "errorNetworkDetails": " Details: %{error}",
    "errorNetworkUnknown": " An unknown network error occurred.",
    "errorEstimateGramsUnexpectedResponse": "Failed to get grams estimation due to an unexpected server response.",
    "errorAddCoinsPositive": "Amount to add must be positive."
  },
  "statisticsChart": {
    "intake": "Intake",
    "goal": "Goal",
    "noData": "No data available to display chart for %{chartTitle}.",
    "movingAverage": "7-Day Avg"
  },
  "questionnaireScreen": {
    "title": "Estimate Your Goals",
    "ageLabel": "Age (years)",
    "agePlaceholder": "e.g., 30",
    "sexLabel": "Sex",
    "sex": {
      "select": "Select Sex...",
      "male": "Male",
      "female": "Female"
    },
    "heightLabel": "Height",
    "heightPlaceholder": "e.g., 175",
    "weightLabel": "Weight",
    "weightPlaceholder": "e.g., 70",
    "activityLevelLabel": "Activity Level",
    "activityLevel": {
      "select": "Select Activity Level...",
      "sedentary": "Sedentary (little or no exercise)",
      "light": "Light (exercise 1-3 days/week)",
      "moderate": "Moderate (exercise 3-5 days/week)",
      "active": "Active (exercise 6-7 days/week)",
      "veryActive": "Very Active (hard exercise or physical job)"
    },
    "primaryGoalLabel": "Primary Goal",
    "primaryGoal": {
      "select": "Select Primary Goal...",
      "loseWeight": "Lose Weight",
      "maintainWeight": "Maintain Weight",
      "gainMuscle": "Gain Muscle"
    },
    "goalIntensityLabel": "Goal Intensity",
    "goalIntensity": {
      "select": "Select Intensity...",
      "mild": "Mild",
      "moderate": "Moderate",
      "aggressive": "Aggressive"
    },
    "calculateButton": "Calculate & Save Goals",
    "validation": {
      "invalidAge": "Enter a valid age (1-120).",
      "selectSex": "Please select your sex.",
      "invalidHeight": "Enter a valid height (50-250 cm).",
      "invalidWeight": "Enter a valid weight (20-300 kg).",
      "selectActivityLevel": "Please select your activity level.",
      "selectPrimaryGoal": "Please select your primary goal.",
      "selectGoalIntensity": "Please select your goal intensity.",
      "fixErrors": "Please fix the errors above."
    },
    "error": {
      "calculationFailedTitle": "Calculation Error",
      "calculationFailedMessage": "Could not calculate goals. Please check your inputs.",
      "genericSaveTitle": "Save Error",
      "genericSaveMessage": "Could not save the estimated goals. Please try again."
    },
    "toast": {
      "goalsCalculated": "Goals calculated and saved!",
      "minCaloriesAdjustedTitle": "Calories Adjusted",
      "minCaloriesAdjustedMessage": "Your calorie goal was adjusted to a minimum of %{calories} kcal."
    }
  },
  "foodIconTags": {
    "apple": ["apple", "red apple", "green apple", "gala", "fuji", "granny smith", "apples"],
    "banana": ["banana", "plantain", "bananas"],
    "grapes": ["grape", "grapes"],
    "strawberry": ["strawberry", "strawberries"],
    "blueberry": ["blueberry", "blueberries"],
    "orange": ["orange", "mandarin", "tangerine", "clementine", "oranges"],
    "lemonLime": ["lemon", "lime", "lemons"],
    "watermelon": ["watermelon"],
    "pineapple": ["pineapple"],
    "mango": ["mango", "mangoes"],
    "kiwi": ["kiwi", "kiwifruit"],
    "peachNectarine": ["peach", "nectarine", "peaches"],
    "cherry": ["cherry", "cherries"],
    "pear": ["pear", "pears"],
    "avocado": ["avocado", "avocados"],
    "coconut": ["coconut", "coconuts"],
    "tomato": ["tomato", "tomatoes", "roma tomato", "cherry tomato", "heirloom tomato"],
    "carrot": ["carrot", "carrots"],
    "broccoli": ["broccoli", "broccolini"],
    "leafyGreen": ["lettuce", "spinach", "kale", "greens", "leafy green", "romaine", "arugula", "swiss chard", "collard greens"],
    "cucumber": ["cucumber", "cucumbers", "pickle", "pickles", "gherkin"],
    "pepperGeneral": ["pepper", "chili", "chilli", "jalapeno", "capsicum", "pimiento"],
    "bellPepper": ["bell pepper", "green pepper", "red pepper", "yellow pepper", "orange pepper"],
    "corn": ["corn", "maize", "sweet corn", "corn on the cob"],
    "potato": ["potato", "potatoes", "sweet potato", "yam", "russet", "red potato", "yukon gold"],
    "onion": ["onion", "shallot", "spring onion", "scallion", "red onion", "yellow onion", "white onion", "onions"],
    "garlic": ["garlic", "garlic clove"],
    "eggplant": ["eggplant", "aubergine"],
    "mushroom": ["mushroom", "mushrooms", "portobello", "shiitake", "champignon", "cremini", "oyster mushroom"],
    "poultry": ["chicken", "chicken breast", "chicken thigh", "chicken leg", "drumstick", "turkey", "duck", "poultry", "roast chicken", "grilled chicken"],
    "redMeat": ["beef", "steak", "mince", "ground beef", "pork", "lamb", "veal", "red meat", "patty", "roast beef", "pork chop", "loin"],
    "bacon": ["bacon", "pancetta"],
    "processedMeat": ["ham", "sausage", "hot dog", "frankfurter", "chorizo", "salami", "pepperoni", "bologna", "bratwurst", "processed meat"],
    "fish": ["fish", "salmon", "tuna", "cod", "tilapia", "mackerel", "sardine", "halibut", "white fish", "trout", "sea bass", "grilled fish", "baked fish"],
    "shrimpPrawn": ["shrimp", "prawn", "prawns", "shellfish"],
    "lobster": ["lobster", "crayfish", "shellfish"],
    "crab": ["crab", "shellfish"],
    "sushi": ["sushi", "sashimi", "raw fish", "nigiri", "maki", "uramaki"],
    "egg": ["egg", "eggs", "scrambled eggs", "fried egg", "omelette", "boiled egg", "poached egg"],
    "milk": ["milk", "dairy milk", "cow milk", "soy milk", "almond milk", "oat milk", "plant milk", "rice milk", "coconut milk", "goat milk"],
    "cheese": ["cheese", "cheddar", "mozzarella", "parmesan", "gouda", "brie", "feta", "cottage cheese", "swiss cheese", "provolone", "blue cheese", "goat cheese", "cream cheese"],
    "butter": ["butter", "margarine"],
    "iceCream": ["ice cream", "gelato", "sorbet", "frozen yogurt", "sherbet"],
    "yogurt": ["yogurt", "yoghurt", "greek yogurt", "plain yogurt", "flavored yogurt", "dairy"],
    "bread": ["bread", "toast", "bagel", "croissant", "bun", "roll", "sourdough", "whole wheat bread", "white bread", "rye bread", "multigrain bread", "baguette"],
    "rice": ["rice", "white rice", "brown rice", "basmati rice", "jasmine rice", "wild rice", "grain"],
    "pasta": ["pasta", "spaghetti", "macaroni", "noodles", "fettuccine", "lasagna", "ramen", "penne", "linguine"],
    "cerealOats": ["cereal", "oats", "oatmeal", "granola", "muesli", "porridge", "corn flakes", "bran flakes"],
    "otherGrains": ["quinoa", "couscous", "barley", "bulgur", "farro", "spelt", "millet", "ancient grain"],
    "flatbread": ["tortilla", "wrap", "pita", "naan", "flatbread", "chapati", "roti"],
    "beansLegumes": ["beans", "black beans", "kidney beans", "chickpeas", "garbanzo beans", "lentils", "peas", "legume", "edamame", "soybeans", "lima beans", "pinto beans"],
    "peanut": ["peanut", "peanuts", "peanut butter"],
    "nuts": ["nuts", "almond", "walnut", "cashew", "pecan", "pistachio", "hazelnut", "brazil nut", "macadamia nut", "mixed nuts"],
    "seeds": ["seeds", "sunflower seeds", "pumpkin seeds", "chia seeds", "flax seeds", "sesame seeds", "hemp seeds"],
    "donut": ["donut", "doughnut", "pastry", "fritter"],
    "cookie": ["cookie", "biscuit", "shortbread", "macaroon"],
    "chocolate": ["chocolate", "chocolate bar", "dark chocolate", "milk chocolate", "white chocolate", "cocoa", "cacao"],
    "cake": ["cake", "cupcake", "muffin", "brownie", "cheesecake", "pound cake"],
    "candy": ["candy", "sweets", "gummy", "lollipop", "jelly beans", "taffy", "fudge", "marshmallow"],
    "popcorn": ["popcorn"],
    "pretzel": ["pretzel", "pretzels"],
    "friesChips": ["fries", "french fries", "chips", "potato chips", "crisps", "potato wedges", "sweet potato fries"],
    "coffee": ["coffee", "espresso", "latte", "cappuccino", "americano", "mocha", "cold brew"],
    "tea": ["tea", "green tea", "black tea", "herbal tea", "chai", "oolong tea", "white tea"],
    "softDrinkJuice": ["soda", "coke", "pepsi", "soft drink", "juice", "orange juice", "apple juice", "smoothie", "protein shake", "lemonade", "iced tea (sweetened)"],
    "water": ["water", "bottled water", "mineral water", "sparkling water", "still water"],
    "wine": ["wine", "red wine", "white wine", "rosé wine", "sparkling wine", "champagne", "alcohol"],
    "beer": ["beer", "lager", "ale", "stout", "ipa", "pilsner", "craft beer", "alcohol"],
    "cocktail": ["cocktail", "spirit", "liquor", "vodka", "gin", "rum", "whiskey", "tequila", "margarita", "martini", "alcohol"],
    "pizza": ["pizza", "margherita pizza", "pepperoni pizza", "hawaiian pizza", "vegetarian pizza", "deep dish pizza"],
    "burger": ["burger", "hamburger", "cheeseburger", "veggie burger", "chicken burger", "slider"],
    "tacoBurrito": ["taco", "burrito", "quesadilla", "fajita", "enchilada", "mexican food"],
    "sandwich": ["sandwich", "sub", "blt", "club sandwich", "panini", "grilled cheese", "wrap sandwich"],
    "soupStew": ["soup", "stew", "broth", "chowder", "pho", "consomme", "minestrone", "chili con carne"],
    "salad": ["salad", "caesar salad", "greek salad", "garden salad", "cobb salad", "fruit salad", "pasta salad", "potato salad"],
    "noodleDish": ["ramen noodles", "pho noodles", "noodle soup", "pad thai", "chow mein", "lo mein", "soba", "udon"],
    "genericFruit": ["fruit", "tropical fruit", "stone fruit", "citrus fruit", "berries"],
    "genericVegetable": ["vegetable", "veg", "root vegetable", "cruciferous", "greens"],
    "genericMeal": ["food", "meal", "dish", "plate", "entrée", "main course", "snack", "lunch", "dinner", "breakfast", "generic food", "cooked food", "leftovers"],
    "unknownFood": ["unknown", "unidentified"]
  }
}
---------- END en.json ----------


---------- he.json ----------
{
  "app": {
    "initializing": "מאתחל...",
    "name": "MacrosVisionAI",
    "alertButtons": {
      "later": "אחר כך",
      "restartNow": "הפעל מחדש כעת"
    }
  },
  "errors": {
    "estimationFailedTitle": "ההערכה נכשלה",
    "analysisFailedTitle": "הניתוח נכשל",
    "aiGramsProcessingError": "הבינה המלאכותית לא הצליחה לעבד את הכמות. אנא נסה לנסח זאת אחרת (למשל, 'כוס אחת' במקום 'כוס').",
    "unexpectedError": "אירעה שגיאה בלתי צפויה. אנא נסה שוב."
  },
  "forgotPasswordScreen": {
    "title": "איפוס סיסמה",
    "instructions": "הזן את כתובת האימייל של חשבונך ונשלח לך קישור לאיפוס הסיסמה.",
    "emailPlaceholder": "כתובת אימייל",
    "buttonText": "שלח קישור לאיפוס",
    "backToLogin": "חזרה להתחברות",
    "alertSuccessTitle": "בדוק את האימייל שלך",
    "forgotPasswordLink": "שכחת סיסמה?"
  },
  "settingsScreen": {
    "title": "הגדרות",
    "account": {
      "title": "חשבון",
      "actions": "פעולות חשבון",
      "logout": "התנתק",
      "logoutConfirmTitle": "אישור התנתקות",
      "logoutConfirmMessage": "האם אתה בטוח שברצונך להתנתק?"
    },
    "general": {
      "title": "כללי"
    },
    "dailyGoals": {
      "title": "יעדים יומיים"
    },
    "goals": {
      "estimateButton": "הערכת יעדים"
    },
    "statistics": {
      "title": "סטטיסטיקה"
    },
    "dataManagement": {
      "title": "ניהול נתונים"
    },
    "language": {
      "title": "שפה",
      "system": "ברירת מחדל של המערכת",
      "english": "אנגלית",
      "russian": "רוסית",
      "hebrew": "עברית",
      "restartMessage": "השפה שונתה. הפעל מחדש את האפליקציה להשפעה מלאה."
    }
  },
  "accountSettings": {
    "coinBalance": "מאזן מטבעות",
    "addTestCoins": "הוסף 10 מטבעות (בדיקה)",
    "testButtonWarning": "הערה: כפתור \"הוסף מטבעות\" מיועד לבדיקה/פיתוח בלבד ויש להסירו או לאבטחו בגרסאות ייצור.",
    "notApplicable": "לא זמין",
    "errorLoadCoins": "לא ניתן היה לטעון את מאזן המטבעות",
    "errorAddCoins": "נכשל בהוספת מטבעות",
    "coinsAdded": "מטבעות נוספו!"
  },
  "themeSwitch": {
    "darkMode": "מצב כהה"
  },
  "dailyGoalsInput": {
    "caloriesGoal": "יעד קלוריות",
    "proteinGoal": "יעד חלבון",
    "carbsGoal": "יעד פחמימות",
    "fatGoal": "יעד שומן"
  },
  "dataManagement": {
    "exportData": "ייצוא נתונים",
    "importData": "ייבוא נתונים",
    "clearAllData": "נקה את כל הנתונים",
    "exportError": "שגיאת שיתוף",
    "exportErrorNoSharing": "שיתוף אינו זמין בפלטפורמה שלך.",
    "exportFailed": "הייצוא נכשל",
    "exportFailedMessage": "אירעה שגיאה בעת ייצוא נתונים.",
    "importCancelled": "הייבוא בוטל על ידי המשתמש.",
    "importInvalidFileType": "סוג קובץ לא חוקי",
    "importInvalidFileTypeMessage": "אנא בחר קובץ '.json' חוקי.",
    "importFileTooLarge": "הקובץ גדול מדי",
    "importFileTooLargeMessage": "הקובץ שנבחר גדול מדי (מקסימום 10MB).",
    "importFailed": "הייבוא נכשל",
    "importFailedInvalidStructure": "לקובץ המיובא יש מבנה לא חוקי או שחסרים בו נתונים נדרשים (dailyEntries, foods, settings).",
    "importFailedParseError": "הקובץ המיובא אינו JSON חוקי או שתוכנו פגום.",
    "importFailedAccessError": "לא ניתן היה לגשת לקובץ שנבחר.",
    "importFailedPermissionError": "נדרשות הרשאות אחסון לייבוא קבצים.",
    "importFailedUnknownError": "אירעה שגיאה לא ידועה במהלך הייבוא.",
    "importSuccessful": "הייבוא הושלם בהצלחה",
    "importSuccessfulMessage": "הנתונים יובאו ונשמרו בהצלחה.",
    "clearDataSuccess": "הנתונים נוקו",
    "clearDataSuccessMessage": "כל נתוני היישום נוקו בהצלחה.",
    "clearDataFailed": "ניקוי הנתונים נכשל",
    "clearDataFailedMessage": "ניקוי הנתונים נכשל.",
    "confirmClearTitle": "אשר ניקוי כל הנתונים",
    "confirmClearMessage": "פעולה זו אינה הפיכה ותמחק את כל הרשומות, המאכלים וההגדרות.\n\nהזן \"CLEAR DATA\" כדי להמשיך.",
    "confirmClearInputPlaceholder": "הזן \"CLEAR DATA\"",
    "clearConfirmationFailed": "האישור נכשל",
    "clearConfirmationFailedMessage": "הוזן טקסט אישור שגוי. הנתונים לא נוקו.",
    "dataReloaded": "הנתונים נטענו מחדש."
  },
  "confirmationModal": {
    "confirm": "אשר",
    "cancel": "ביטול",
    "defaultTitle": "אשר פעולה",
    "defaultMessage": "האם אתה בטוח שברצונך לבצע פעולה זו?",
    "enterTextPlaceholder": "הזן טקסט אישור",
    "restartRequiredTitle": "נדרשת הפעלה מחדש"
  },
  "dailyEntryScreen": {
    "tabTitle": "יומן יומי",
    "todaysEntries": "רשומות להיום",
    "saving": "שומר...",
    "loadingEntries": "טוען רשומות...",
    "noEntries": "אין רשומות מתועדות ליום זה.",
    "noEntriesHint": "הקש '+' כדי להוסיף את הארוחה הראשונה שלך.",
    "entryAdded": "רשומה נוספה",
    "entryUpdated": "רשומה עודכנה",
    "itemRemoved": "%{itemName} הוסר",
    "undo": "הקש כאן לביטול",
    "entryRestored": "הרשומה שוחזרה!",
    "itemsAdded": "%{count} פריט(ים) נוספו",
    "toDateFormat": "לתאריך %{date}",
    "errorLoad": "שגיאת טעינה",
    "errorLoadMessage": "טעינת הנתונים הדרושים נכשלה.",
    "errorSave": "שגיאת שמירה",
    "errorSaveMessage": "לא ניתן לשמור שינויים. אנא נסה שוב.",
    "errorInvalidDate": "תאריך לא חוקי",
    "errorInvalidDateMessage": "התאריך שנבחר אינו חוקי.",
    "errorEditEntry": "שגיאת עריכה",
    "errorEditEntryMessage": "שגיאה בהכנת רשומה לעריכה.",
    "errorAddMultiple": "שגיאה בהוספה מרובה",
    "errorAddMultipleMessage": "נכשל בהוספת מספר פריטים.",
    "invalidEntryData": "נתוני רשומה לא חוקיים",
    "edit": "ערוך",
    "delete": "מחק"
  },
  "foodListScreen": {
    "tabTitle": "מאכלים",
    "searchPlaceholder": "חפש בספריית המאכלים שלך...",
    "loadingFoods": "טוען מאכלים...",
    "emptyLibrary": "ספריית המאכלים שלך ריקה.",
    "emptyLibraryHint": "הקש '+' כדי להוסיף את פריט המזון הראשון שלך!",
    "noResults": "לא נמצאו מאכלים התואמים ל-\"%{searchTerm}\"",
    "errorLoad": "שגיאה",
    "errorLoadMessage": "טעינת רשימת המאכלים נכשלה.",
    "foodAdded": "%{foodName} נוסף",
    "foodUpdated": "%{foodName} עודכן",
    "foodDeleted": "%{foodName} נמחק",
    "foodRestored": "%{foodName} שוחזר",
    "errorCreate": "שגיאה",
    "errorCreateMessage": "יצירת המאכל נכשלה.",
    "errorUpdate": "שגיאה",
    "errorUpdateMessage": "עדכון המאכל נכשל.",
    "errorDelete": "שגיאת מחיקה",
    "errorDeleteMessage": "מחיקת המאכל מהאחסון נכשלה. הפריט שוחזר.",
    "fixErrors": "אנא תקן שגיאות",
    "edit": "ערוך",
    "delete": "מחק",
    "shareFoodTitle": "שתף את %{foodName}",
    "shareErrorTitle": "שגיאת שיתוף",
    "shareErrorMessage": "לא ניתן היה לשתף את פריט המזון.",
    "deepLinkErrorTitle": "שגיאה בפתיחת הקישור",
    "deepLinkInvalidData": "נתוני המזון מהקישור אינם חוקיים.",
    "deepLinkParseError": "לא ניתן היה לקרוא את נתוני המזון מהקישור.",
    "sortBy": "מיין לפי",
    "sortByName": "שם",
    "sortByNewest": "החדש ביותר",
    "sortByOldest": "הישן ביותר"
  },
  "addEntryModal": {
    "titleAdd": "הוסף רשומה",
    "titleEdit": "ערוך רשומה",
    "titleQuickAddSelect": "בחר פריטים להוספה",
    "titleQuickAddEdit": "ערוך פריט",
    "titleQuickAddAnalyzing": "מנתח...",
    "titleQuickAddFromText": "הוספה מהירה מטקסט",
    "searchPlaceholder": "חפש מאכלים...",
    "recent": "אחרונים",
    "noResults": "לא נמצאו מאכלים התואמים ל-\"%{searchTerm}\".",
    "emptyLibraryMessage": "ספריית המאכלים שלך ריקה. לחץ למטה להוספת המאכל הראשון שלך!",
    "noQuickAddResults": "לא נמצאו פריטי מזון.",
    "amount": "כמות",
    "grams": "גרם",
    "autoAi": "אוטומטי (AI)",
    "quickAddServing": "הוספה מהירה:",
    "lastUsedServing": "אחרון: %{grams}ג",
    "gramsPlaceholder": "הזן גרמים (למשל, 150)",
    "gramsPlaceholderEdit": "עדכן גרמים",
    "gramsError": "הזן מספר חוקי",
    "autoPlaceholder": "תאר כמות (למשל, 1 כוס מבושל)",
    "buttonAdd": "הוסף",
    "buttonUpdate": "עדכן",
    "buttonBack": "חזור",
    "buttonAddSelected": "הוסף %{count}",
    "buttonLoading": "טוען...",
    "quickAddHeader": "בחר פריטים מהתמונה",
    "quickAddHeaderEdit": "עריכת פרטי פריט",
    "alertInputMissing": "קלט חסר",
    "alertInputMissingMessage": "אנא בחר מאכל והזן תיאור כמות.",
    "alertGramsEstimated": "גרמים הוערכו",
    "alertGramsEstimatedMessage": "הוערכו %{grams} גרם עבור %{foodName}",
    "alertFoodNotSelected": "מאכל לא נבחר",
    "alertFoodNotSelectedMessage": "אנא בחר פריט מזון.",
    "alertInvalidAmount": "כמות לא חוקית",
    "alertInvalidAmountMessage": "אנא הזן מספר חיובי חוקי עבור גרמים.",
    "alertQuickAddPermission": "נדרשת הרשאה",
    "alertQuickAddCameraPermission": "נדרשת גישה למצלמה.",
    "alertQuickAddGalleryPermission": "נדרשת גישה לגלריה.",
    "alertQuickAddUserCancelled": "בוטל על ידי המשתמש",
    "alertQuickAddCouldNotSelect": "לא ניתן לבחור תמונה.",
    "alertQuickAddError": "שגיאה",
    "alertQuickAddErrorMessage": "אירעה שגיאה בלתי צפויה.",
    "alertQuickAddFinishEditing": "סיים עריכה",
    "alertQuickAddFinishEditingSaveOrCancel": "אנא שמור או בטל את העריכה הנוכחית תחילה.",
    "alertQuickAddFromImageTitle": "הוספה מהירה מתמונה",
    "alertQuickAddFromImageMessage": "זהה מספר מאכלים מתמונה.",
    "alertQuickAddInvalidName": "שם לא חוקי",
    "alertQuickAddInvalidNameMessage": "שם המאכל אינו יכול להיות ריק.",
    "alertQuickAddInvalidGrams": "גרמים לא חוקיים",
    "alertQuickAddInvalidGramsMessage": "אנא הזן מספר חיובי חוקי.",
    "alertQuickAddNoItemsSelected": "לא נבחרו פריטים",
    "alertQuickAddNoItemsSelectedMessage": "בחר פריטים להוספה.",
    "alertQuickAddNothingToAdd": "אין מה להוסיף",
    "alertQuickAddNothingToAddMessage": "לא נבחרו או הוכנו פריטים חוקיים.",
    "alertQuickAddErrorPreparing": "שגיאה",
    "alertQuickAddErrorPreparingMessage": "לא ניתן היה להכין פריטים להוספה.",
    "camera": "מצלמה",
    "gallery": "גלריה",
    "cancel": "ביטול",
    "addNewFoodButton": "הוסף מאכל חדש",
    "alertOverwriteFoodTitle": "מאכל קיים",
    "alertOverwriteFoodMessage": "מאכל בשם \"%{foodName}\" כבר קיים. האם להחליף עם הנתונים החדשים?",
    "overwrite": "החלף",
    "toastFoodSavedToLibrary": "\"%{foodName}\" נשמר לספרייה.",
    "toastFoodUpdatedInLibrary": "\"%{foodName}\" עודכן בספרייה.",
    "toastErrorSavingToLibrary": "שגיאה בשמירת המאכל לספרייה.",
    "textQuickAdd": {
      "placeholder": "תאר את הארוחה שלך...\nלמשל, '150ג חזה עוף, סלט קטן עם עגבניות, ותפוח אחד'",
      "analyzeButton": "נתח טקסט",
      "alertInputEmpty": "קלט ריק",
      "alertInputEmptyMessage": "אנא הקלד או אמור מה אכלת לצורך הניתוח."
    }
  },
  "addFoodModal": {
    "titleAdd": "הוסף מאכל חדש",
    "titleEdit": "ערוך מאכל",
    "buttonAdd": "הוסף",
    "buttonUpdate": "עדכן",
    "getFromImage": "קבל מתמונה",
    "ingredientsOptional": "רכיבים (אופציונלי)",
    "ingredientsPlaceholder": "למשל\n100ג חזה עוף\n50ג אורז\n1 כף שמן זית",
    "backToManual": "חזרה להזנה ידנית",
    "aiCalculateRecipe": "חשב עם AI (מתכון/טקסט)",
    "aiGetFromIngredients": "קבל מאקרואים מרכיבים",
    "aiGetFromNameOnly": "קבל מאקרואים משם בלבד",
    "barcodeComingSoon": "הזנת ברקוד (בקרוב)",
    "alertInputNeeded": "נדרש קלט",
    "alertInputNeededMessage": "אנא הזן שם מאכל או רכיבים לניתוח.",
    "macrosEstimatedText": "מאקרואים הוערכו מטקסט.",
    "foodIdentified": "מאכל זוהה!",
    "foodIdentifiedMessage": "זוהה כ-%{foodName}. מאקרואים הוערכו.",
    "errorGetImage": "קבל תמונה",
    "errorGetImageMessage": "בחר מקור לתמונת המאכל:",
    "errorCamera": "שגיאת מצלמה",
    "errorGallery": "שגיאת גלריה",
    "errorPermission": "נדרשת הרשאה",
    "errorCameraPermission": "נדרשת גישה למצלמה."
  },
  "foodFormFields": {
    "foodName": "שם המאכל",
    "calories": "קלוריות (ל-100 גרם)",
    "protein": "חלבון (ל-100 גרם)",
    "carbs": "פחמימות (ל-100 גרם)",
    "fat": "שומן (ל-100 גרם)",
    "errorNameRequired": "שם הוא שדה חובה",
    "errorNonNegative": "חייב להיות מספר אי-שלילי"
  },
  "quickAddList": {
    "foodNamePlaceholder": "שם המאכל",
    "gramsPlaceholder": "גרמים",
    "errorInvalidGrams": "לא חוקי",
    "analyzing": "מנתח...",
    "emptyMessage": "לא נמצאו מאכלים הניתנים לזיהוי בתמונה.",
    "emptyHint": "נסה תמונה אחרת או הוסף ידנית."
  },
  "dailyProgress": {
    "calories": "קלוריות",
    "protein": "חלבון",
    "carbs": "פחמימות",
    "fat": "שומן"
  },
  "dateNavigator": {
    "invalidDate": "תאריך לא חוקי"
  },
  "utils": {
    "macros": {
      "errorTitle": "ניתוח AI נכשל",
      "multiItemErrorTitle": "הוספה מהירה נכשלה",
      "errorMessage": "לא ניתן היה לקבל תגובה מה-AI. אנא נסה שוב.",
      "invalidResponse": "ה-AI נתן תגובה בפורמט לא צפוי. אנא נסה שוב או נסח מחדש את בקשתך."
    },
    "units": {
      "errorTitle": "הערכת AI נכשלה"
    },
    "image": {
      "alertCompressionError": "שגיאת דחיסה",
      "alertCompressionErrorMessage": "לא ניתן היה לעבד את התמונה לדחיסה.",
      "errorFailedToRead": "קריאת קובץ התמונה נכשלה: %{error}"
    }
  },
  "backendService": {
    "errorInvalidClientId": "מזהה לקוח לא חוקי. אנא הפעל מחדש את האפליקציה.",
    "errorRequestFailedParse": "השרת שלח תגובה לא קריאה (סטטוס %{status}).",
    "errorRequestFailedDetailFormat": "השרת שלח תגובה בפורמט לא צפוי (סטטוס %{status}).",
    "errorRequestFailedWithServerMsg": "השרת החזיר שגיאה (סטטוס %{status}).",
    "errorAuthFailed": "האימות מול השרת נכשל. אנא הפעל מחדש את האפליקציה.",
    "errorPermissionDenied": "הגישה נדחתה על ידי השרת.",
    "errorNotFound": "המשאב המבוקש לא נמצא בשרת.",
    "errorTooManyRequests": "אתה מבצע זאת מהר מדי! אנא המתן רגע ונסה שוב.",
    "errorInsufficientCoins": "אין לך מספיק מטבעות AI לפעולה זו. עוד יהיו זמינים בקרוב!",
    "errorNetwork": "לא ניתן להתחבר לשרת.",
    "errorNetworkTimeout": "לשרת לוקח יותר מדי זמן להגיב. אנא נסה שוב בעוד מספר רגעים.",
    "errorNetworkConnection": " אנא בדוק את חיבור הרשת שלך.",
    "errorNetworkDetails": " פרטים: %{error}",
    "errorNetworkUnknown": " אירעה שגיאת רשת לא ידועה.",
    "errorEstimateGramsUnexpectedResponse": "קבלת הערכת גרמים נכשלה עקב תגובת שרת לא צפויה.",
    "errorAddCoinsPositive": "הסכום להוספה חייב להיות חיובי."
  },
  "statisticsChart": {
    "intake": "צריכה",
    "goal": "יעד",
    "noData": "אין נתונים זמינים להצגת תרשים עבור %{chartTitle}.",
    "movingAverage": "ממוצע 7 ימים"
  },
  "questionnaireScreen": {
    "title": "הערכת היעדים שלך",
    "ageLabel": "גיל (שנים)",
    "agePlaceholder": "לדוגמה, 30",
    "sexLabel": "מין",
    "sex": {
      "select": "בחר מין...",
      "male": "זכר",
      "female": "נקבה"
    },
    "heightLabel": "גובה",
    "heightPlaceholder": "לדוגמה, 175",
    "weightLabel": "משקל",
    "weightPlaceholder": "לדוגמה, 70",
    "activityLevelLabel": "רמת פעילות",
    "activityLevel": {
      "select": "בחר רמת פעילות...",
      "sedentary": "יושבני (מעט או ללא פעילות גופנית)",
      "light": "קל (פעילות 1-3 ימים בשבוע)",
      "moderate": "בינוני (פעילות 3-5 ימים בשבוע)",
      "active": "פעיל (פעילות 6-7 ימים בשבוע)",
      "veryActive": "פעיל מאוד (פעילות מאומצת או עבודה פיזית)"
    },
    "primaryGoalLabel": "מטרה עיקרית",
    "primaryGoal": {
      "select": "בחר מטרה עיקרית...",
      "loseWeight": "ירידה במשקל",
      "maintainWeight": "שמירה על המשקל",
      "gainMuscle": "עלייה במסת שריר"
    },
    "goalIntensityLabel": "עצימות המטרה",
    "goalIntensity": {
      "select": "בחר עצימות...",
      "mild": "מתונה",
      "moderate": "בינונית",
      "aggressive": "אגרסיבית"
    },
    "calculateButton": "חשב ושמור יעדים",
    "validation": {
      "invalidAge": "הזן גיל תקין (1-120).",
      "selectSex": "אנא בחר את מינך.",
      "invalidHeight": "הזן גובה תקין (50-250 ס\"מ).",
      "invalidWeight": "הזן משקל תקין (20-300 ק\"ג).",
      "selectActivityLevel": "אנא בחר את רמת הפעילות שלך.",
      "selectPrimaryGoal": "אנא בחר את המטרה העיקרית שלך.",
      "selectGoalIntensity": "אנא בחר את עצימות המטרה שלך.",
      "fixErrors": "אנא תקן את השגיאות למעלה."
    },
    "error": {
      "calculationFailedTitle": "שגיאת חישוב",
      "calculationFailedMessage": "לא ניתן היה לחשב את היעדים. אנא בדוק את הקלט שלך.",
      "genericSaveTitle": "שגיאת שמירה",
      "genericSaveMessage": "לא ניתן היה לשמור את היעדים המוערכים. אנא נסה שוב."
    },
    "toast": {
      "goalsCalculated": "היעדים חושבו ונשמרו!",
      "minCaloriesAdjustedTitle": "הקלוריות עודכנו",
      "minCaloriesAdjustedMessage": "יעד הקלוריות שלך עודכן למינימום של %{calories} קק\"ל."
    }
  },
  "foodIconTags": {
    "apple": ["תפוח", "תפוח עץ", "תפוח אדום", "תפוח ירוק", "גאלה", "פוג'י", "גרני סמית", "תפוחים"],
    "banana": ["בננה", "בננות"],
    "grapes": ["ענב", "ענבים"],
    "strawberry": ["תות", "תות שדה", "תותים"],
    "blueberry": ["אוכמנית", "אוכמניות"],
    "orange": ["תפוז", "מנדרינה", "קלמנטינה", "תפוזים"],
    "lemonLime": ["לימון", "ליים", "לימונים"],
    "watermelon": ["אבטיח"],
    "pineapple": ["אננס"],
    "mango": ["מנגו"],
    "kiwi": ["קיווי"],
    "peachNectarine": ["אפרסק", "נקטרינה", "אפרסקים"],
    "cherry": ["דובדבן", "דובדבנים", "גודגדן"],
    "pear": ["אגס", "אגסים"],
    "avocado": ["אבוקדו"],
    "coconut": ["קוקוס"],
    "tomato": ["עגבניה", "עגבניות", "עגבניית שרי", "עגבניית תמר"],
    "carrot": ["גזר", "גזרים"],
    "broccoli": ["ברוקולי"],
    "leafyGreen": ["חסה", "תרד", "קייל", "עלים ירוקים", "רומית", "אורוגולה", "מנגולד", "עלי בייבי"],
    "cucumber": ["מלפפון", "מלפפונים", "חמוץ", "חמוצים", "קפונאטה"],
    "pepperGeneral": ["פלפל", "צ'ילי", "חריף", "חלפיניו", "שיפקה"],
    "bellPepper": ["גמבה", "פלפל ירוק", "פלפל אדום", "פלפל צהוב", "פלפל כתום"],
    "corn": ["תירס", "קלחי תירס"],
    "potato": ["תפוח אדמה", "תפוחי אדמה", "בטטה", "יאם", "תפוד"],
    "onion": ["בצל", "שאלוט", "בצל ירוק", "בצלים", "עירית"],
    "garlic": ["שום", "שן שום"],
    "eggplant": ["חציל", "חצילים"],
    "mushroom": ["פטרייה", "פטריות", "פורטובלו", "שיטאקי", "שמפיניון", "ירדן"],
    "poultry": ["עוף", "חזה עוף", "כרע עוף", "שוק עוף", "פולקע", "הודו", "ברווז", "עוף בגריל", "עוף צלוי", "פרגית"],
    "redMeat": ["בקר", "סטייק", "בשר טחון", "קציצה", "חזיר", "טלה", "עגל", "בשר אדום", "צלעות", "אנטריקוט", "סינטה"],
    "bacon": ["בייקון", "פנצ'טה"],
    "processedMeat": ["נקניק", "נקניקיה", "פסטרמה", "קבנוס", "סלמי", "פפרוני", "בשר מעובד", "האם"],
    "fish": ["דג", "סלמון", "טונה", "בקלה", "אמנון", "מקרל", "סרדין", "הליבוט", "דג לבן", "פורל", "דג בגריל", "דג אפוי", "לברק", "מוסר"],
    "shrimpPrawn": ["שרימפס", "חסילון", "פירות ים", "פרוון"],
    "lobster": ["לובסטר", "סרטן נהרות", "פירות ים"],
    "crab": ["סרטן", "פירות ים"],
    "sushi": ["סושי", "סשימי", "דג נא", "ניגירי", "מאקי", "רול"],
    "egg": ["ביצה", "ביצים", "ביצה מקושקשת", "ביצת עין", "אומלט", "ביצה קשה", "חביתה"],
    "milk": ["חלב", "חלב פרה", "חלב סויה", "חלב שקדים", "חלב שיבולת שועל", "חלב צמחי", "חלב אורז", "חלב קוקוס", "חלב עיזים"],
    "cheese": ["גבינה", "צ'דר", "מוצרלה", "פרמזן", "גאודה", "ברי", "פטה", "קוטג'", "גבינה שוויצרית", "גבינה כחולה", "גבינת עיזים", "גבינת שמנת", "צפתית", "בולגרית"],
    "butter": ["חמאה", "מרגרינה"],
    "iceCream": ["גלידה", "ג'לאטו", "סורבה", "יוגורט קפוא", "ארטיק"],
    "yogurt": ["יוגורט", "יוגורט יווני", "יוגורט טבעי", "מעדן חלב", "לבן", "אשל"],
    "bread": ["לחם", "טוסט", "בייגל", "קרואסון", "לחמניה", "גליל", "לחם מחמצת", "לחם מלא", "לחם לבן", "לחם שיפון", "באגט", "חלה"],
    "rice": ["אורז", "אורז לבן", "אורז חום", "אורז בסמטי", "אורז יסמין", "אורז בר", "דגן", "אורז מלא"],
    "pasta": ["פסטה", "ספגטי", "מקרוני", "אטריות", "פטוצ'יני", "לזניה", "ראמן", "פנה", "רביולי"],
    "cerealOats": ["דגני בוקר", "שיבולת שועל", "דייסה", "גרנולה", "מוזלי", "קורנפלקס", "ברנפלקס"],
    "otherGrains": ["קינואה", "קוסקוס", "שעורה", "בורגול", "פארו", "כוסמין", "דוחן", "גריסים"],
    "flatbread": ["טורטיה", "לאפה", "פיתה", "נאן", "צ'פאטי", "רוטי", "מצה"],
    "beansLegumes": ["שעועית", "שעועית שחורה", "שעועית אדומה", "חומוס", "גרגרי חומוס", "עדשים", "אפונה", "קטניות", "אדממה", "פולי סויה", "פול"],
    "peanut": ["בוטן", "בוטנים", "חמאת בוטנים"],
    "nuts": ["אגוזים", "שקד", "אגוז מלך", "קשיו", "פקאן", "פיסטוק", "אגוז לוז", "אגוז ברזיל", "אגוזי מקדמיה", "ערמונים"],
    "seeds": ["זרעים", "גרעיני חמניה", "גרעיני דלעת", "זרעי צ'יה", "זרעי פשתן", "שומשום", "זרעי המפ", "גרעינים"],
    "donut": ["סופגניה", "דונאט", "מאפה"],
    "cookie": ["עוגיה", "ביסקוויט", "מקרון", "עוגיות"],
    "chocolate": ["שוקולד", "חטיף שוקולד", "שוקולד מריר", "שוקולד חלב", "שוקולד לבן", "קקאו"],
    "cake": ["עוגה", "קאפקייק", "מאפין", "בראוני", "עוגת גבינה", "רולדה"],
    "candy": ["ממתק", "ממתקים", "סוכריה", "סוכריות גומי", "סוכריה על מקל", "מרשמלו", "טופי"],
    "popcorn": ["פופקורן"],
    "pretzel": ["בייגלה", "פרעצל"],
    "friesChips": ["צ'יפס", "טוגנים", "תפוצ'יפס", "חטיף תפוחי אדמה", "פוטטו"],
    "coffee": ["קפה", "אספרסו", "לאטה", "קפוצ'ינו", "אמריקנו", "מוקה", "קפה קר", "נס קפה"],
    "tea": ["תה", "תה ירוק", "תה שחור", "תה צמחים", "צ'אי", "חליטת צמחים"],
    "softDrinkJuice": ["משקה קל", "קולה", "סודה", "מיץ", "מיץ תפוזים", "מיץ תפוחים", "שייק", "שייק חלבון", "לימונדה", "אייס טי", "משקה מוגז"],
    "water": ["מים", "מים מינרליים", "סודה (מים)"],
    "wine": ["יין", "יין אדום", "יין לבן", "רוזה", "יין מבעבע", "שמפניה", "אלכוהול"],
    "beer": ["בירה", "לאגר", "אייל", "סטאוט", "אלכוהול"],
    "cocktail": ["קוקטייל", "משקה חריף", "ליקר", "וודקה", "ג'ין", "רום", "וויסקי", "טקילה", "מרגריטה", "אלכוהול"],
    "pizza": ["פיצה", "פיצה מרגריטה", "פיצה פפרוני"],
    "burger": ["המבורגר", "בורגר", "צ'יזבורגר", "בורגר צמחוני", "קציצת המבורגר"],
    "tacoBurrito": ["טאקו", "בוריטו", "קסאדייה", "פاهיטה", "אנצ'ילדה", "אוכל מקסיקני"],
    "sandwich": ["כריך", "סנדוויץ'", "טוסט", "באגט"],
    "soupStew": ["מרק", "נזיד", "ציר", "צ'אודר", "פו", "מרק ירקות", "מרק עוף"],
    "salad": ["סלט", "סלט קיסר", "סלט יווני", "סלט ירקות", "סלט פירות", "סלט טונה"],
    "noodleDish": ["ראמן", "אטריות פו", "מרק אטריות", "פאד תאי", "נודלס מוקפץ", "אטריות אורז", "אטריות ביצים"],
    "genericFruit": ["פרי", "פירות", "פירות יער", "פירות הדר", "פירות טרופיים"],
    "genericVegetable": ["ירק", "ירקות", "ירקות שורש", "ירקות עלים", "ירוקים"],
    "genericMeal": ["אוכל", "ארוחה", "מנה", "צלחת", "מנה עיקרית", "חטיף", "ארוחת צהריים", "ארוחת ערב", "ארוחת בוקר", "אוכל כללי", "אוכל מבושל", "שאריות", "תבשיל"],
    "unknownFood": ["לא ידוע", "לא מזוהה", "אחר"]
  }
}
---------- END he.json ----------


---------- ru.json ----------
{
  "app": {
    "initializing": "Инициализация...",
    "name": "MacrosVisionAI",
    "alertButtons": {
      "later": "Позже",
      "restartNow": "Перезапустить сейчас"
    }
  },
  "errors": {
    "estimationFailedTitle": "Ошибка оценки",
    "analysisFailedTitle": "Ошибка анализа",
    "aiGramsProcessingError": "ИИ не смог обработать количество. Попробуйте перефразировать (например, '1 чашка' вместо 'чашка').",
    "unexpectedError": "Произошла непредвиденная ошибка. Пожалуйста, попробуйте еще раз."
  },
  "forgotPasswordScreen": {
    "title": "Сброс пароля",
    "instructions": "Введите адрес электронной почты вашей учетной записи, и мы вышлем вам ссылку для сброса пароля.",
    "emailPlaceholder": "Адрес электронной почты",
    "buttonText": "Отправить ссылку для сброса",
    "backToLogin": "Назад ко входу",
    "alertSuccessTitle": "Проверьте вашу почту",
    "forgotPasswordLink": "Забыли пароль?"
  },
  "settingsScreen": {
    "title": "Настройки",
    "account": {
      "title": "Аккаунт",
      "actions": "Действия с аккаунтом",
      "logout": "Выйти",
      "logoutConfirmTitle": "Подтвердите выход",
      "logoutConfirmMessage": "Вы уверены, что хотите выйти?"
    },
    "general": {
      "title": "Общие"
    },
    "dailyGoals": {
      "title": "Дневные цели"
    },
    "goals": {
      "estimateButton": "Рассчитать цели"
    },
    "statistics": {
      "title": "Статистика"
    },
    "dataManagement": {
      "title": "Управление данными"
    },
    "language": {
      "title": "Язык",
      "system": "Системный",
      "english": "Английский",
      "russian": "Русский",
      "hebrew": "Иврит",
      "restartMessage": "Язык изменен. Перезапустите приложение для полного эффекта."
    }
  },
  "accountSettings": {
    "coinBalance": "Баланс монет",
    "addTestCoins": "Добавить 10 монет (Тест)",
    "testButtonWarning": "Примечание: Кнопка \"Добавить монеты\" предназначена только для тестирования/разработки и должна быть удалена или защищена в релизных версиях.",
    "notApplicable": "Н/Д",
    "errorLoadCoins": "Не удалось загрузить баланс монет",
    "errorAddCoins": "Не удалось добавить монеты",
    "coinsAdded": "Монеты добавлены!"
  },
  "themeSwitch": {
    "darkMode": "Темный режим"
  },
  "dailyGoalsInput": {
    "caloriesGoal": "Цель калорий",
    "proteinGoal": "Цель белков",
    "carbsGoal": "Цель углеводов",
    "fatGoal": "Цель жиров"
  },
  "dataManagement": {
    "exportData": "Экспорт данных",
    "importData": "Импорт данных",
    "clearAllData": "Очистить все данные",
    "exportError": "Ошибка экспорта",
    "exportErrorNoSharing": "Экспорт недоступен на вашей платформе.",
    "exportFailed": "Экспорт не удался",
    "exportFailedMessage": "Произошла ошибка при экспорте данных.",
    "importCancelled": "Импорт отменен пользователем.",
    "importInvalidFileType": "Неверный тип файла",
    "importInvalidFileTypeMessage": "Пожалуйста, выберите действительный файл '.json'.",
    "importFileTooLarge": "Файл слишком большой",
    "importFileTooLargeMessage": "Выбранный файл слишком большой (макс. 10 МБ).",
    "importFailed": "Импорт не удался",
    "importFailedInvalidStructure": "Импортированный файл имеет неверную структуру или отсутствуют необходимые данные (dailyEntries, foods, settings).",
    "importFailedParseError": "Импортированный файл не является действительным JSON или имеет поврежденное содержимое.",
    "importFailedAccessError": "Не удалось получить доступ к выбранному файлу.",
    "importFailedPermissionError": "Для импорта файлов требуются разрешения на доступ к хранилищу.",
    "importFailedUnknownError": "Во время импорта произошла неизвестная ошибка.",
    "importSuccessful": "Импорт успешен",
    "importSuccessfulMessage": "Данные успешно импортированы и сохранены.",
    "clearDataSuccess": "Данные очищены",
    "clearDataSuccessMessage": "Все данные приложения были успешно очищены.",
    "clearDataFailed": "Не удалось очистить данные",
    "clearDataFailedMessage": "Не удалось очистить данные.",
    "confirmClearTitle": "Подтвердить очистку всех данных",
    "confirmClearMessage": "Это действие необратимо и удалит все записи, продукты и настройки.\n\nВведите \"CLEAR DATA\" для продолжения.",
    "confirmClearInputPlaceholder": "Введите \"CLEAR DATA\"",
    "clearConfirmationFailed": "Подтверждение не удалось",
    "clearConfirmationFailedMessage": "Введен неверный текст подтверждения. Данные не были очищены.",
    "dataReloaded": "Данные перезагружены."
  },
  "confirmationModal": {
    "confirm": "Подтвердить",
    "cancel": "Отмена",
    "defaultTitle": "Подтвердите действие",
    "defaultMessage": "Вы уверены, что хотите выполнить это действие?",
    "enterTextPlaceholder": "Введите текст подтверждения",
    "restartRequiredTitle": "Требуется перезапуск"
  },
  "dailyEntryScreen": {
    "tabTitle": "Дневник",
    "todaysEntries": "Записи за сегодня",
    "saving": "Сохранение...",
    "loadingEntries": "Загрузка записей...",
    "noEntries": "Записей за этот день нет.",
    "noEntriesHint": "Нажмите '+', чтобы добавить первую запись о еде.",
    "entryAdded": "Запись добавлена",
    "entryUpdated": "Запись обновлена",
    "itemRemoved": "%{itemName} удалено",
    "undo": "Нажмите, чтобы отменить",
    "entryRestored": "Запись восстановлена!",
    "itemsAdded": "%{count} элемент(ов) добавлено",
    "toDateFormat": "к %{date}",
    "errorLoad": "Ошибка загрузки",
    "errorLoadMessage": "Не удалось загрузить необходимые данные.",
    "errorSave": "Ошибка сохранения",
    "errorSaveMessage": "Не удалось сохранить изменения. Пожалуйста, попробуйте еще раз.",
    "errorInvalidDate": "Неверная дата",
    "errorInvalidDateMessage": "Выбранная дата недействительна.",
    "errorEditEntry": "Ошибка редактирования",
    "errorEditEntryMessage": "Ошибка подготовки записи к редактированию.",
    "errorAddMultiple": "Ошибка добавления нескольких",
    "errorAddMultipleMessage": "Не удалось добавить несколько элементов.",
    "invalidEntryData": "Неверные данные записи",
    "edit": "Изменить",
    "delete": "Удалить"
  },
  "foodListScreen": {
    "tabTitle": "Продукты",
    "searchPlaceholder": "Поиск в вашей библиотеке продуктов...",
    "loadingFoods": "Загрузка продуктов...",
    "emptyLibrary": "Ваша библиотека продуктов пуста.",
    "emptyLibraryHint": "Нажмите '+', чтобы добавить первый продукт!",
    "noResults": "Продукты, соответствующие \"%{searchTerm}\", не найдены",
    "errorLoad": "Ошибка",
    "errorLoadMessage": "Не удалось загрузить список продуктов.",
    "foodAdded": "%{foodName} добавлено",
    "foodUpdated": "%{foodName} обновлено",
    "foodDeleted": "%{foodName} удалено",
    "foodRestored": "%{foodName} восстановлено",
    "errorCreate": "Ошибка",
    "errorCreateMessage": "Не удалось создать продукт.",
    "errorUpdate": "Ошибка",
    "errorUpdateMessage": "Не удалось обновить продукт.",
    "errorDelete": "Ошибка удаления",
    "errorDeleteMessage": "Не удалось удалить продукт из хранилища. Элемент восстановлен.",
    "fixErrors": "Пожалуйста, исправьте ошибки",
    "edit": "Изменить",
    "delete": "Удалить",
    "shareFoodTitle": "Поделиться %{foodName}",
    "shareErrorTitle": "Ошибка",
    "shareErrorMessage": "Не удалось поделиться продуктом.",
    "deepLinkErrorTitle": "Ошибка открытия ссылки",
    "deepLinkInvalidData": "Данные о продукте из ссылки недействительны.",
    "deepLinkParseError": "Не удалось прочитать данные о продукте из ссылки.",
    "sortBy": "Сортировать по",
    "sortByName": "Имени",
    "sortByNewest": "Новые",
    "sortByOldest": "Старые"
  },
  "addEntryModal": {
    "titleAdd": "Добавить запись",
    "titleEdit": "Изменить запись",
    "titleQuickAddSelect": "Выберите элементы для добавления",
    "titleQuickAddEdit": "Изменить элемент",
    "titleQuickAddAnalyzing": "Анализ...",
    "titleQuickAddFromText": "Быстрое добавление по тексту",
    "searchPlaceholder": "Поиск продуктов...",
    "recent": "Недавние",
    "noResults": "Продукты, соответствующие \"%{searchTerm}\", не найдены.",
    "emptyLibraryMessage": "Ваша библиотека продуктов пуста. Нажмите ниже, чтобы добавить первый продукт!",
    "noQuickAddResults": "Продукты не найдены.",
    "amount": "Количество",
    "grams": "Граммы",
    "autoAi": "Авто (ИИ)",
    "quickAddServing": "Быстрое добавление:",
    "lastUsedServing": "Пред.: %{grams}г",
    "gramsPlaceholder": "Введите граммы (например, 150)",
    "gramsPlaceholderEdit": "Обновить граммы",
    "gramsError": "Введите действительное число",
    "autoPlaceholder": "Опишите количество (например, 1 чашка приготовленного)",
    "buttonAdd": "Добавить",
    "buttonUpdate": "Обновить",
    "buttonBack": "Назад",
    "buttonAddSelected": "Добавить %{count}",
    "buttonLoading": "Загрузка...",
    "quickAddHeader": "Выберите элементы с изображения",
    "quickAddHeaderEdit": "Редактирование сведений об элементе",
    "alertInputMissing": "Отсутствует ввод",
    "alertInputMissingMessage": "Пожалуйста, выберите продукт и введите описание количества.",
    "alertGramsEstimated": "Граммы оценены",
    "alertGramsEstimatedMessage": "Оценено %{grams}г для %{foodName}",
    "alertFoodNotSelected": "Продукт не выбран",
    "alertFoodNotSelectedMessage": "Пожалуйста, выберите продукт.",
    "alertInvalidAmount": "Неверное количество",
    "alertInvalidAmountMessage": "Пожалуйста, введите действительное положительное число для граммов.",
    "alertQuickAddPermission": "Требуется разрешение",
    "alertQuickAddCameraPermission": "Необходим доступ к камере.",
    "alertQuickAddGalleryPermission": "Необходим доступ к галерее.",
    "alertQuickAddUserCancelled": "Отменено пользователем",
    "alertQuickAddCouldNotSelect": "Не удалось выбрать изображение.",
    "alertQuickAddError": "Ошибка",
    "alertQuickAddErrorMessage": "Произошла непредвиденная ошибка.",
    "alertQuickAddFinishEditing": "Завершите редактирование",
    "alertQuickAddFinishEditingSaveOrCancel": "Пожалуйста, сначала сохраните или отмените текущее редактирование.",
    "alertQuickAddFromImageTitle": "Быстрое добавление с изображения",
    "alertQuickAddFromImageMessage": "Определите несколько продуктов с изображения.",
    "alertQuickAddInvalidName": "Неверное имя",
    "alertQuickAddInvalidNameMessage": "Название продукта не может быть пустым.",
    "alertQuickAddInvalidGrams": "Неверные граммы",
    "alertQuickAddInvalidGramsMessage": "Пожалуйста, введите действительное положительное число.",
    "alertQuickAddNoItemsSelected": "Элементы не выбраны",
    "alertQuickAddNoItemsSelectedMessage": "Выберите элементы для добавления.",
    "alertQuickAddNothingToAdd": "Нечего добавлять",
    "alertQuickAddNothingToAddMessage": "Не выбрано или не подготовлено ни одного действительного элемента.",
    "alertQuickAddErrorPreparing": "Ошибка",
    "alertQuickAddErrorPreparingMessage": "Не удалось подготовить элементы для добавления.",
    "camera": "Камера",
    "gallery": "Галерея",
    "cancel": "Отмена",
    "addNewFoodButton": "Добавить новый продукт",
    "alertOverwriteFoodTitle": "Продукт существует",
    "alertOverwriteFoodMessage": "Продукт с названием \"%{foodName}\" уже существует. Перезаписать новыми данными?",
    "overwrite": "Перезаписать",
    "toastFoodSavedToLibrary": "\"%{foodName}\" сохранено в библиотеку.",
    "toastFoodUpdatedInLibrary": "\"%{foodName}\" обновлено в библиотеке.",
    "toastErrorSavingToLibrary": "Ошибка сохранения продукта в библиотеку.",
    "textQuickAdd": {
      "placeholder": "Опишите ваш прием пищи...\nнапример, '150г куриной грудки, небольшой салат с помидорами и одно яблоко'",
      "analyzeButton": "Анализировать текст",
      "alertInputEmpty": "Пустое поле",
      "alertInputEmptyMessage": "Пожалуйста, напишите или произнесите, что вы съели, для анализа."
    }
  },
  "addFoodModal": {
    "titleAdd": "Добавить новый продукт",
    "titleEdit": "Изменить продукт",
    "buttonAdd": "Добавить",
    "buttonUpdate": "Обновить",
    "getFromImage": "Получить с изображения",
    "ingredientsOptional": "Ингредиенты (необязательно)",
    "ingredientsPlaceholder": "например\n100г куриной грудки\n50г риса\n1 ст.л. оливкового масла",
    "backToManual": "Назад к ручному вводу",
    "aiCalculateRecipe": "Рассчитать с помощью ИИ (Рецепт/Текст)",
    "aiGetFromIngredients": "Получить макросы из ингредиентов",
    "aiGetFromNameOnly": "Получить макросы только по названию",
    "barcodeComingSoon": "Ввод штрих-кода (скоро)",
    "alertInputNeeded": "Требуется ввод",
    "alertInputNeededMessage": "Пожалуйста, введите название продукта или ингредиенты для анализа.",
    "macrosEstimatedText": "Макросы оценены по тексту.",
    "foodIdentified": "Продукт определен!",
    "foodIdentifiedMessage": "Определено как %{foodName}. Макросы оценены.",
    "errorGetImage": "Получить изображение",
    "errorGetImageMessage": "Выберите источник изображения продукта:",
    "errorCamera": "Ошибка камеры",
    "errorGallery": "Ошибка галереи",
    "errorPermission": "Требуется разрешение",
    "errorCameraPermission": "Необходим доступ к камере."
  },
  "foodFormFields": {
    "foodName": "Название продукта",
    "calories": "Калории (на 100г)",
    "protein": "Белки (на 100г)",
    "carbs": "Углеводы (на 100г)",
    "fat": "Жиры (на 100г)",
    "errorNameRequired": "Название обязательно",
    "errorNonNegative": "Должно быть неотрицательным числом"
  },
  "quickAddList": {
    "foodNamePlaceholder": "Название продукта",
    "gramsPlaceholder": "Граммы",
    "errorInvalidGrams": "Неверно",
    "analyzing": "Анализ...",
    "emptyMessage": "На изображении не найдено опознаваемых продуктов.",
    "emptyHint": "Попробуйте другое изображение или добавьте вручную."
  },
  "dailyProgress": {
    "calories": "Калории",
    "protein": "Белки",
    "carbs": "Углеводы",
    "fat": "Жиры"
  },
  "dateNavigator": {
    "invalidDate": "Неверная дата"
  },
  "utils": {
    "macros": {
      "errorTitle": "Ошибка анализа ИИ",
      "multiItemErrorTitle": "Ошибка быстрого добавления",
      "errorMessage": "Не удалось получить ответ от ИИ. Пожалуйста, попробуйте еще раз.",
      "invalidResponse": "ИИ дал ответ в неожиданном формате. Пожалуйста, попробуйте еще раз или перефразируйте свой запрос."
    },
    "units": {
      "errorTitle": "Ошибка оценки ИИ"
    },
    "image": {
      "alertCompressionError": "Ошибка сжатия",
      "alertCompressionErrorMessage": "Не удалось обработать изображение для сжатия.",
      "errorFailedToRead": "Не удалось прочитать файл изображения: %{error}"
    }
  },
  "backendService": {
    "errorInvalidClientId": "Неверный идентификатор клиента. Пожалуйста, перезапустите приложение.",
    "errorRequestFailedParse": "Сервер отправил нечитаемый ответ (Статус %{status}).",
    "errorRequestFailedDetailFormat": "Сервер отправил ответ в неожиданном формате (Статус %{status}).",
    "errorRequestFailedWithServerMsg": "Сервер вернул ошибку (Статус %{status}).",
    "errorAuthFailed": "Ошибка аутентификации на сервере. Пожалуйста, перезапустите приложение.",
    "errorPermissionDenied": "Доступ запрещен сервером.",
    "errorNotFound": "Запрошенный ресурс не найден на сервере.",
    "errorTooManyRequests": "Вы делаете это слишком быстро! Пожалуйста, подождите немного и попробуйте снова.",
    "errorInsufficientCoins": "У вас недостаточно монет ИИ для этого действия. Скоро будет больше!",
    "errorNetwork": "Не удалось подключиться к серверу.",
    "errorNetworkTimeout": "Сервер слишком долго отвечает. Пожалуйста, повторите попытку через несколько секунд.",
    "errorNetworkConnection": " Пожалуйста, проверьте ваше интернет-соединение.",
    "errorNetworkDetails": " Детали: %{error}",
    "errorNetworkUnknown": " Произошла неизвестная сетевая ошибка.",
    "errorEstimateGramsUnexpectedResponse": "Не удалось оценить граммы из-за неожиданного ответа сервера.",
    "errorAddCoinsPositive": "Сумма для добавления должна быть положительной."
  },
  "statisticsChart": {
    "intake": "Потребление",
    "goal": "Цель",
    "noData": "Нет данных для отображения графика для %{chartTitle}.",
    "movingAverage": "Среднее за 7 дн."
  },
  "questionnaireScreen": {
    "title": "Оценка ваших целей",
    "ageLabel": "Возраст (лет)",
    "agePlaceholder": "например, 30",
    "sexLabel": "Пол",
    "sex": {
      "select": "Выберите пол...",
      "male": "Мужской",
      "female": "Женский"
    },
    "heightLabel": "Рост",
    "heightPlaceholder": "например, 175",
    "weightLabel": "Вес",
    "weightPlaceholder": "например, 70",
    "activityLevelLabel": "Уровень активности",
    "activityLevel": {
      "select": "Выберите уровень активности...",
      "sedentary": "Сидячий (мало или нет упражнений)",
      "light": "Легкий (упражнения 1-3 раза/нед)",
      "moderate": "Умеренный (упражнения 3-5 раз/нед)",
      "active": "Активный (упражнения 6-7 раз/нед)",
      "veryActive": "Очень активный (тяжелые упражнения или физическая работа)"
    },
    "primaryGoalLabel": "Основная цель",
    "primaryGoal": {
      "select": "Выберите основную цель...",
      "loseWeight": "Сбросить вес",
      "maintainWeight": "Поддерживать вес",
      "gainMuscle": "Набрать мышечную массу"
    },
    "goalIntensityLabel": "Интенсивность цели",
    "goalIntensity": {
      "select": "Выберите интенсивность...",
      "mild": "Легкая",
      "moderate": "Умеренная",
      "aggressive": "Агрессивная"
    },
    "calculateButton": "Рассчитать и сохранить цели",
    "validation": {
      "invalidAge": "Введите действительный возраст (1-120).",
      "selectSex": "Пожалуйста, выберите ваш пол.",
      "invalidHeight": "Введите действительный рост (50-250 см).",
      "invalidWeight": "Введите действительный вес (20-300 кг).",
      "selectActivityLevel": "Пожалуйста, выберите ваш уровень активности.",
      "selectPrimaryGoal": "Пожалуйста, выберите вашу основную цель.",
      "selectGoalIntensity": "Пожалуйста, выберите интенсивность цели.",
      "fixErrors": "Пожалуйста, исправьте ошибки выше."
    },
    "error": {
      "calculationFailedTitle": "Ошибка расчета",
      "calculationFailedMessage": "Не удалось рассчитать цели. Пожалуйста, проверьте введенные данные.",
      "genericSaveTitle": "Ошибка сохранения",
      "genericSaveMessage": "Не удалось сохранить рассчитанные цели. Пожалуйста, попробуйте еще раз."
    },
    "toast": {
      "goalsCalculated": "Цели рассчитаны и сохранены!",
      "minCaloriesAdjustedTitle": "Калории скорректированы",
      "minCaloriesAdjustedMessage": "Ваша цель по калориям была скорректирована до минимума в %{calories} ккал."
    }
  },
  "foodIconTags": {
    "apple": ["яблоко", "красное яблоко", "зеленое яблоко", "гала", "фуджи", "гренни смит", "яблоки"],
    "banana": ["банан", "бананы"],
    "grapes": ["виноград"],
    "strawberry": ["клубника", "земляника"],
    "blueberry": ["голубика", "черника"],
    "orange": ["апельсин", "мандарин", "клементин", "апельсины"],
    "lemonLime": ["лимон", "лайм", "лимоны"],
    "watermelon": ["арбуз"],
    "pineapple": ["ананас"],
    "mango": ["манго"],
    "kiwi": ["киви"],
    "peachNectarine": ["персик", "нектарин", "персики"],
    "cherry": ["вишня", "черешня"],
    "pear": ["груша", "груши"],
    "avocado": ["авокадо"],
    "coconut": ["кокос", "кокосы"],
    "tomato": ["помидор", "томат", "помидоры", "томаты", "черри", "сливка"],
    "carrot": ["морковь", "морковка"],
    "broccoli": ["брокколи"],
    "leafyGreen": ["салат", "шпинат", "капуста кале", "зелень", "листовая зелень", "руккола", "мангольд", "айсберг"],
    "cucumber": ["огурец", "огурцы", "соленый огурец", "маринованный огурец", "корнишон"],
    "pepperGeneral": ["перец", "чили", "халапеньо", "паприка", "острый перец"],
    "bellPepper": ["сладкий перец", "болгарский перец", "зеленый перец", "красный перец", "желтый перец", "оранжевый перец"],
    "corn": ["кукуруза", "зерно кукурузы", "кукурузный початок"],
    "potato": ["картофель", "картошка", "батат", "ямс"],
    "onion": ["лук", "репчатый лук", "зеленый лук", "лук-шалот", "порей"],
    "garlic": ["чеснок", "зубчик чеснока"],
    "eggplant": ["баклажан", "баклажаны"],
    "mushroom": ["гриб", "грибы", "шампиньон", "портобелло", "шиитаке", "вешенка", "белый гриб", "лисичка"],
    "poultry": ["курица", "куриная грудка", "куриное бедро", "куриная ножка", "индейка", "утка", "птица", "жареная курица", "курица гриль", "филе курицы"],
    "redMeat": ["говядина", "стейк", "фарш", "свинина", "баранина", "телятина", "красное мясо", "котлета", "жаркое", "свиная отбивная", "вырезка"],
    "bacon": ["бекон", "грудинка"],
    "processedMeat": ["ветчина", "колбаса", "сосиска", "сарделька", "чоризо", "салями", "пепперони", "сервелат", "мясные деликатесы", "буженина"],
    "fish": ["рыба", "лосось", "тунец", "треска", "тилапия", "скумбрия", "сельдь", "сардина", "палтус", "белая рыба", "форель", "морской окунь", "жареная рыба", "запеченная рыба", "хек", "минтай"],
    "shrimpPrawn": ["креветка", "креветки", "морепродукты", "королевская креветка"],
    "lobster": ["лобстер", "омар", "рак", "морепродукты"],
    "crab": ["краб", "морепродукты", "крабовое мясо"],
    "sushi": ["суши", "роллы", "сашими", "сырая рыба", "нигири", "маки", "Филадельфия", "Калифорния"],
    "egg": ["яйцо", "яйца", "яичница", "омлет", "вареное яйцо", "яйцо пашот"],
    "milk": ["молоко", "коровье молоко", "соевое молоко", "миндальное молоко", "овсяное молоко", "растительное молоко", "рисовое молоко", "кокосовое молоко", "козье молоко", "кефир", "ряженка", "простокваша"],
    "cheese": ["сыр", "чеддер", "моцарелла", "пармезан", "гауда", "бри", "фета", "творог", "швейцарский сыр", "проволоне", "голубой сыр", "козий сыр", "сливочный сыр", "российский сыр", "адыгейский сыр"],
    "butter": ["масло сливочное", "маргарин", "спред"],
    "iceCream": ["мороженое", "джелато", "сорбет", "замороженный йогурт", "пломбир", "эскимо"],
    "yogurt": ["йогурт", "греческий йогурт", "натуральный йогурт", "питьевой йогурт", "биойогурт"],
    "bread": ["хлеб", "тост", "бублик", "круассан", "булка", "булочка", "лаваш", "цельнозерновой хлеб", "белый хлеб", "ржаной хлеб", "багет", "батон", "чиабатта"],
    "rice": ["рис", "белый рис", "коричневый рис", "рис басмати", "рис жас민", "дикий рис", "крупа", "бурый рис"],
    "pasta": ["макароны", "паста", "спагетти", "лапша", "фетучини", "лазанья", "рамен", "вермишель", "рожки", "перья"],
    "cerealOats": ["хлопья", "овсянка", "овсяные хлопья", "гранола", "мюсли", "каша", "кукурузные хлопья", "гречка"],
    "otherGrains": ["киноа", "кус-кус", "ячмень", "булгур", "полба", "пшено", "крупы", "перловка"],
    "flatbread": ["тортилья", "лаваш", "пита", "наан", "лепешка", "чапати", "роти", "маца"],
    "beansLegumes": ["фасоль", "черная фасоль", "красная фасоль", "нут", "чечевица", "горох", "бобовые", "эдамаме", "соевые бобы", "маш"],
    "peanut": ["арахис", "арахисовая паста", "земляной орех"],
    "nuts": ["орехи", "миндаль", "грецкий орех", "кешью", "пекан", "фисташки", "фундук", "бразильский орех", "макадамия", "смесь орехов", "кедровый орех"],
    "seeds": ["семечки", "семена подсолнечника", "тыквенные семечки", "семена чиа", "семена льна", "кунжут", "конопляные семена"],
    "donut": ["пончик", "пышка", "выпечка", "донат"],
    "cookie": ["печенье", "бисквит", "галета", "макарун", "овсяное печенье", "пряник"],
    "chocolate": ["шоколад", "шоколадная плитка", "темный шоколад", "молочный шоколад", "белый шоколад", "какао", "шоколадка"],
    "cake": ["торт", "пирожное", "кекс", "маффин", "брауни", "чизкейк", "рулет"],
    "candy": ["конфета", "конфеты", "сладости", "леденец", "мармелад", "ирис", "зефир", "пастила", "карамель"],
    "popcorn": ["попкорн", "воздушная кукуруза"],
    "pretzel": ["крендель", "соломка", "брецель"],
    "friesChips": ["картофель фри", "картошка фри", "чипсы", "картофельные чипсы", "картофельные дольки", "наггетсы (картофельные)"],
    "coffee": ["кофе", "эспрессо", "латте", "капучино", "американо", "мокко", "холодный кофе", "растворимый кофе"],
    "tea": ["чай", "зеленый чай", "черный чай", "травяной чай", "чай масала", "улун", "белый чай", "каркаде", "пуэр"],
    "softDrinkJuice": ["газировка", "лимонад", "кола", "пепси", "безалкогольный напиток", "сок", "апельсиновый сок", "яблочный сок", "смузи", "протеиновый коктейль", "холодный чай (сладкий)", "морс", "компот"],
    "water": ["вода", "бутилированная вода", "минеральная вода", "газированная вода", "негазированная вода", "питьевая вода"],
    "wine": ["вино", "красное вино", "белое вино", "розовое вино", "игристое вино", "шампанское", "алкоголь"],
    "beer": ["пиво", "лагер", "эль", "стаут", "алкоголь", "крафтовое пиво"],
    "cocktail": ["коктейль", "спиртное", "ликер", "водка", "джин", "ром", "виски", "текила", "маргарита", "мартини", "алкоголь", "напиток алкогольный"],
    "pizza": ["пицца", "маргарита", "пепперони", "гавайская пицца"],
    "burger": ["бургер", "гамбургер", "чизбургер", "вегетарианский бургер", "куриный бургер", "сэндвич с котлетой"],
    "tacoBurrito": ["тако", "буррито", "кесадилья", "фахита", "энчилада", "мексиканская еда", "шаурма"],
    "sandwich": ["сэндвич", "бутерброд", "панини", "горячий бутерброд", "тост с начинкой", "клаб сэндвич"],
    "soupStew": ["суп", "рагу", "бульон", "похлебка", "борщ", "щи", "солянка", "гуляш", "харчо", "уха"],
    "salad": ["салат", "цезарь", "греческий салат", "овощной салат", "фруктовый салат", "оливье", "винегрет", "салат с тунцом"],
    "noodleDish": ["лапша рамен", "суп фо", "суп с лапшой", "пад тай", "вок", "удон", "соба", "фунчоза"],
    "genericFruit": ["фрукт", "фрукты", "ягода", "ягоды", "цитрус", "цитрусовые", "экзотический фрукт"],
    "genericVegetable": ["овощ", "овощи", "корнеплод", "зелень листовая", "огородные овощи"],
    "genericMeal": ["еда", "блюдо", "обед", "ужин", "завтрак", "перекус", "готовое блюдо", "остатки еды", "пища", "кушанье", "трапеза"],
    "unknownFood": ["неизвестно", "неопознано", "другое", "прочее"]
  }
}
---------- END ru.json ----------


---------- AppNavigator.tsx ----------
// src/navigation/AppNavigator.tsx
import React from 'react';
import { Platform, useColorScheme, Alert, DevSettings, I18nManager, Text, View } from 'react-native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator, NativeStackNavigationOptions } from '@react-navigation/native-stack';
import { NavigationContainer, DefaultTheme, DarkTheme, RouteProp } from '@react-navigation/native';
import { Icon, useTheme, ThemeProvider, createTheme } from '@rneui/themed';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import * as Linking from 'expo-linking';
import * as Localization from 'expo-localization';

import DailyEntryScreen from '../screens/DailyEntryScreen';
import FoodListScreen from '../screens/FoodListScreen';
import SettingsScreen from '../screens/SettingsScreen';
import QuestionnaireScreen from '../screens/QuestionnaireScreen';
import LoginScreen from '../screens/LoginScreen';
import RegisterScreen from '../screens/RegisterScreen';
import ForgotPasswordScreen from '../screens/ForgotPasswordScreen';

import { useAuth, AuthContextType } from '../context/AuthContext';
import { LanguageCode } from '../types/settings';
import i18n, { setLocale, t } from '../localization/i18n';
import { Food } from '../types/food';
import { setLogoutListener } from '../services/authService';

// Define ParamLists
export type MainTabParamList = {
  DailyEntryRoute: { quickAddFood?: Food };
  FoodListRoute: { openAddFoodModal?: boolean, foodData?: string };
  SettingsStackRoute: undefined;
};

export type SettingsStackParamList = {
  SettingsHome: undefined;
  Questionnaire: undefined;
};

export type AuthStackParamList = {
  Login: undefined;
  Register: undefined;
  ForgotPassword: undefined;
};

export type RootStackParamList = {
  Auth: undefined;
  Main: undefined;
};

// Create Navigators
const Tab = createBottomTabNavigator<MainTabParamList>();
const SettingsStackNav = createNativeStackNavigator<SettingsStackParamList>();
const AuthStack = createNativeStackNavigator<AuthStackParamList>();
const RootStack = createNativeStackNavigator<RootStackParamList>();

// Linking configuration
const linking = {
  prefixes: [Linking.createURL('/')],
  config: {
    screens: {
      Main: {
          path: '', 
          screens: {
              FoodListRoute: 'open-add-food-modal', 
          }
      },
    }
  },
};

// Theming
declare module "@rneui/themed" {
  export interface Colors { text: string; card: string; successLight: string; }
}
const lightThemeColors = { primary: "#2e86de", secondary: "#6c757d", background: "#f8f9fa", grey5: "#e9ecef", white: "#ffffff", grey4: "#ced4da", success: "#28a745", successLight: "#d4edda", black: "#000000", text: "#212529", card: "#ffffff", error: "#dc3545", warning: "#ffc107", disabled: "#6c757d", divider: "#ced4da", platform: { ios: {}, android: {}, web: {}, default: {} } as any, grey0: "#f8f9fa", grey1: "#e9ecef", grey2: "#dee2e6", grey3: "#ced4da", greyOutline: "#adb5bd", searchBg: "#ffffff", };
const darkThemeColors = { primary: "#2e86de", secondary: "#adb5bd", background: "#121212", grey5: "#2c2c2c", white: "#ffffff", grey4: "#343a40", success: "#28a745", successLight: "#1f5139", black: "#000000", text: "#f8f9fa", card: "#1e1e1e", error: "#dc3545", warning: "#ffc107", disabled: "#495057", divider: "#343a40", platform: { ios: {}, android: {}, web: {}, default: {} } as any, grey0: "#212529", grey1: "#2c2c2c", grey2: "#343a40", grey3: "#8899a6", greyOutline: "#8899a6", searchBg: "#1e1e1e", };

// Settings Stack Navigator Component
function SettingsStackNavigatorComponent({ onThemeChange, onLocaleChange, onDataOperation, onLogout }: { onThemeChange: (theme: 'light' | 'dark' | 'system') => void; onLocaleChange: (locale: LanguageCode) => void; onDataOperation: () => void; onLogout: () => void; }) {
  const { theme } = useTheme();
  return (
    <SettingsStackNav.Navigator screenOptions={{ headerStyle: { backgroundColor: theme.colors.background }, headerTitleStyle: { color: theme.colors.text }, headerTintColor: theme.colors.primary, headerTitleAlign: 'center' }}>
      <SettingsStackNav.Screen name="SettingsHome" options={{ title: t('settingsScreen.title') }}>
        {(props) => <SettingsScreen {...props} onThemeChange={onThemeChange} onLocaleChange={onLocaleChange} onDataOperation={onDataOperation} onLogout={onLogout} />}
      </SettingsStackNav.Screen>
      <SettingsStackNav.Screen name="Questionnaire" component={QuestionnaireScreen} options={{ title: t('questionnaireScreen.title') }} />
    </SettingsStackNav.Navigator>
  );
}

// Main Tab Navigator Component
function MainTabNavigator({ onThemeChange, onLocaleChange, onLogout }: { onThemeChange: (theme: 'light' | 'dark' | 'system') => void; onLocaleChange: (locale: LanguageCode) => void; onLogout: () => void; }) {
  const { theme } = useTheme();
  const [foodListRefresh, setFoodListRefresh] = React.useState(false);
  const handleFoodChange = React.useCallback(() => setFoodListRefresh(prev => !prev), []);

  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName: string = '';
          if (route.name === 'DailyEntryRoute') iconName = focused ? 'calendar' : 'calendar-outline';
          else if (route.name === 'FoodListRoute') iconName = focused ? 'fast-food' : 'fast-food-outline';
          else if (route.name === 'SettingsStackRoute') iconName = focused ? 'settings' : 'settings-outline';
          return <Icon name={iconName} type='ionicon' size={size} color={color} />;
        },
        tabBarActiveTintColor: theme.colors.primary,
        tabBarInactiveTintColor: theme.colors.secondary,
        headerShown: false,
        tabBarStyle: { backgroundColor: theme.colors.background, borderTopColor: theme.colors.divider },
        tabBarLabelStyle: { fontWeight: 'bold' }
      })}
    >
      <Tab.Screen name="DailyEntryRoute" options={{ title: t('dailyEntryScreen.tabTitle') }}>
        {() => <DailyEntryScreen key={`${foodListRefresh}-${i18n.locale}`} />}
      </Tab.Screen>
      <Tab.Screen name="FoodListRoute" options={{ title: t('foodListScreen.tabTitle') }}>
        {() => <FoodListScreen onFoodChange={handleFoodChange} key={`${foodListRefresh}-${i18n.locale}`} />}
      </Tab.Screen>
      <Tab.Screen name="SettingsStackRoute" options={{ title: t('settingsScreen.title') }}>
        {() => <SettingsStackNavigatorComponent onThemeChange={onThemeChange} onLocaleChange={onLocaleChange} onDataOperation={handleFoodChange} onLogout={onLogout} />}
      </Tab.Screen>
    </Tab.Navigator>
  );
}

// Auth Stack Navigator Component
function AuthNavigator() {
    const { theme } = useTheme();
    const screenOptions: NativeStackNavigationOptions = {
        headerShown: false,
        contentStyle: { backgroundColor: theme.colors.background }
    };
    return (
        <AuthStack.Navigator screenOptions={screenOptions}>
            <AuthStack.Screen name="Login" component={LoginScreen} />
            <AuthStack.Screen name="Register" component={RegisterScreen} />
            <AuthStack.Screen name="ForgotPassword" component={ForgotPasswordScreen} />
        </AuthStack.Navigator>
    )
}

// App Content - Determines which stack to show
function AppContent() {
  const { authState, settings, changeTheme, changeLocale, logout } = useAuth() as AuthContextType;
  const colorScheme = useColorScheme();

  React.useEffect(() => {
    if (logout) {
      setLogoutListener(logout);
    }
    return () => setLogoutListener(null); // Cleanup on unmount
  }, [logout]);

  const themeMode = settings.theme;
  const currentThemeConfig = React.useMemo(() => {
    const isDark = themeMode === 'system' ? colorScheme === 'dark' : themeMode === 'dark';
    return isDark ? { mode: 'dark' as const, colors: darkThemeColors } : { mode: 'light' as const, colors: lightThemeColors };
  }, [themeMode, colorScheme]);

  const navigationTheme = React.useMemo(() => ({
    dark: { ...DarkTheme, colors: { ...DarkTheme.colors, primary: currentThemeConfig.colors.primary, background: currentThemeConfig.colors.background, card: currentThemeConfig.colors.card, text: currentThemeConfig.colors.text, border: currentThemeConfig.colors.divider, notification: currentThemeConfig.colors.successLight, }, },
    light: { ...DefaultTheme, colors: { ...DefaultTheme.colors, primary: currentThemeConfig.colors.primary, background: currentThemeConfig.colors.background, card: currentThemeConfig.colors.card, text: currentThemeConfig.colors.text, border: currentThemeConfig.colors.divider, notification: currentThemeConfig.colors.success, }, },
  }), [currentThemeConfig]);
  
  const handleLocaleChange = (newLocale: LanguageCode) => {
    const oldLocale = settings.language === 'system' ? (Localization.getLocales()?.[0]?.languageTag || 'en-US').split('-')[0] : settings.language;
    changeLocale(newLocale);
    const newEffectiveLocale = newLocale === 'system' ? (Localization.getLocales()?.[0]?.languageTag || 'en-US').split('-')[0] : newLocale;

    const oldIsRTL = oldLocale === 'he';
    const newIsRTL = newEffectiveLocale === 'he';

    if (oldIsRTL !== newIsRTL && Platform.OS !== 'web') {
        Alert.alert( t('confirmationModal.restartRequiredTitle'), t('settingsScreen.language.restartMessage'),
            [ { text: t('app.alertButtons.later'), style: "cancel" },
              { text: t('app.alertButtons.restartNow'), onPress: () => DevSettings.reload() } ]
        );
    } else if (Platform.OS === 'web' && oldIsRTL !== newIsRTL) {
        window.location.reload();
    }
  };

  const LoadingFallback = () => (
      <View style={{flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: currentThemeConfig.colors.background}}>
          <Text style={{color: currentThemeConfig.colors.text}}>Loading...</Text>
      </View>
  )

  return (
    <ThemeProvider theme={createTheme(currentThemeConfig)}>
        <SafeAreaView style={{ flex: 1, backgroundColor: currentThemeConfig.colors.background }}>
            <StatusBar style={currentThemeConfig.mode === "dark" ? "light" : "dark"} backgroundColor={currentThemeConfig.colors.background} />
            <NavigationContainer 
                linking={linking} 
                theme={currentThemeConfig.mode === 'dark' ? navigationTheme.dark : navigationTheme.light} 
                fallback={<LoadingFallback />}
            >
                <RootStack.Navigator screenOptions={{ headerShown: false }}>
                    {authState.authenticated ? (
                         <RootStack.Screen name="Main">
                             {() => <MainTabNavigator onThemeChange={changeTheme} onLocaleChange={handleLocaleChange} onLogout={logout!} />}
                         </RootStack.Screen>
                    ) : (
                        <RootStack.Screen name="Auth" component={AuthNavigator} />
                    )}
                </RootStack.Navigator>
            </NavigationContainer>
        </SafeAreaView>
    </ThemeProvider>
  );
}

// Main AppNavigator export
export default function AppNavigator() {
    const { isLoading, settings } = useAuth() as AuthContextType;
    
    React.useEffect(() => {
        if (settings) {
            const lang = settings.language === 'system' ? (Localization.getLocales()?.[0]?.languageTag || 'en-US') : settings.language;
            setLocale(lang);
        }
    }, [settings]);

    if (isLoading) {
        return (
            <SafeAreaView style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
                <Text>Initializing App...</Text>
            </SafeAreaView>
        )
    }

    return <AppContent />;
}
---------- END AppNavigator.tsx ----------


---------- DailyEntryScreen.tsx ----------
// src/screens/DailyEntryScreen.tsx
import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { View, FlatList, Alert, Platform, StyleSheet, ActivityIndicator, I18nManager } from "react-native";
import { DailyEntry, DailyEntryItem } from "../types/dailyEntry";
import { Food } from "../types/food";
import { getFoods, createFood, updateFood as updateFoodService } from "../services/foodService";
import { saveDailyEntries, loadDailyEntries, loadSettings } from "../services/storageService";
import { getTodayDateString, formatDateISO, formatDateReadableAsync } from "../utils/dateUtils";
// isValidNumberInput is not directly used in this file after changes
import DailyProgress from "../components/DailyProgress";
import { Text, FAB, makeStyles, useTheme, Divider, Icon as RNEIcon } from "@rneui/themed";
import DateTimePicker, { DateTimePickerEvent } from "@react-native-community/datetimepicker";
import { addDays, subDays, parseISO, formatISO, isValid } from "date-fns";
import { SafeAreaView } from "react-native-safe-area-context";
import AddEntryModal from "../components/AddEntryModal/AddEntryModal";
import "react-native-get-random-values";
import Toast from "react-native-toast-message";
import { useFocusEffect, useNavigation, useRoute, RouteProp } from "@react-navigation/native";
import { getFoodIconUrl } from "../utils/iconUtils";
import DateNavigator from "../components/DateNavigator";
import DailyEntryListItem from "../components/DailyEntryListItem";
import { t } from '../localization/i18n';
import i18n from '../localization/i18n';
import { Settings as AppSettings } from "../types/settings";
import { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';
import { MainTabParamList } from "../navigation/AppNavigator";

type DailyEntryScreenNavigationProp = BottomTabNavigationProp<MainTabParamList, 'DailyEntryRoute'>;
type DailyEntryScreenRouteProp = RouteProp<MainTabParamList, 'DailyEntryRoute'>;

const DailyEntryScreen: React.FC = () => {
  const [dailyEntries, setDailyEntries] = useState<DailyEntry[]>([]);
  const [selectedDate, setSelectedDate] = useState<string>(getTodayDateString());
  const [foods, setFoods] = useState<Food[]>([]);
  
  const [isOverlayVisible, setIsOverlayVisible] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [dailyGoals, setDailyGoals] = useState<AppSettings['dailyGoals']>({ calories: 2000, protein: 150, carbs: 200, fat: 70 });
  
  const [editIndex, setEditIndex] = useState<number | null>(null); // This is reversedIndex
  const [initialGramsForEdit, setInitialGramsForEdit] = useState<string | undefined>(undefined);
  const [foodForEditModal, setFoodForEditModal] = useState<Food | null>(null);

  const [foodIcons, setFoodIcons] = useState<{ [foodName: string]: string | null; }>({});
  const [isLoadingData, setIsLoadingData] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [readableDate, setReadableDate] = useState('');
  const [pendingQuickAddFood, setPendingQuickAddFood] = useState<Food | null>(null);

  const { theme } = useTheme();
  const styles = useStyles();

  const navigation = useNavigation<DailyEntryScreenNavigationProp>();
  const route = useRoute<DailyEntryScreenRouteProp>();

  useEffect(() => {
    const updateDateForToast = async () => {
      const parsedDate = parseISO(selectedDate);
      if (isValid(parsedDate)) {
        const formatted = await formatDateReadableAsync(parsedDate);
        setReadableDate(formatted);
      } else {
        setReadableDate(t('dateNavigator.invalidDate'));
      }
    };
    updateDateForToast();
  }, [selectedDate, i18n.locale, t]);

  const resolveAndSetIcon = useCallback((foodName: string) => {
    if (!foodName) return;
    if (foodIcons[foodName] === undefined) {
      const icon = getFoodIconUrl(foodName);
      setFoodIcons(prev => ({ ...prev, [foodName]: icon }));
    }
  }, [foodIcons]);

  const triggerIconPrefetch = useCallback((entries: DailyEntry[], currentSelectedDate: string) => {
    const uniqueFoodNames = new Set<string>();
    entries.forEach(entry => { 
      if (entry.date === currentSelectedDate && entry.items) { 
        entry.items.forEach(item => { 
          if (item.food?.name) uniqueFoodNames.add(item.food.name); 
        }); 
      } 
    });

    if (uniqueFoodNames.size > 0) {
      const newIconsStateBatch: { [key: string]: string | null } = {};
      Array.from(uniqueFoodNames).forEach(name => {
        if (foodIcons[name] === undefined) {
           newIconsStateBatch[name] = getFoodIconUrl(name);
        }
      });
      if (Object.keys(newIconsStateBatch).length > 0) {
          setFoodIcons(prev => ({ ...prev, ...newIconsStateBatch }));
      }
    }
  }, [foodIcons]);

  const loadData = useCallback(async () => {
    setIsLoadingData(true);
    try {
      const [foodsResult, loadedEntries, loadedSettings] = await Promise.all([
        getFoods(),
        loadDailyEntries(),
        loadSettings(),
      ]);

      const loadedFoodsArray = foodsResult.items;

      setDailyGoals(loadedSettings?.dailyGoals ?? { calories: 2000, protein: 150, carbs: 200, fat: 70 });
      loadedFoodsArray.sort((a, b) => a.name.localeCompare(b.name));
      setFoods(loadedFoodsArray);
      setDailyEntries(loadedEntries);
      triggerIconPrefetch(loadedEntries, selectedDate);
    } catch (error) {
      console.error("Error in DailyEntryScreen loadData:", error);
      Alert.alert(t('dailyEntryScreen.errorLoad'), t('dailyEntryScreen.errorLoadMessage'));
      setFoods([]); setDailyEntries([]); setDailyGoals({ calories: 0, protein: 0, carbs: 0, fat: 0 });
    } finally {
      setIsLoadingData(false);
    }
  }, [selectedDate, triggerIconPrefetch, t]);

  useEffect(() => {
    const quickAddFoodParam = route.params?.quickAddFood;
    if (quickAddFoodParam) {
      setPendingQuickAddFood(quickAddFoodParam);
      navigation.setParams({ quickAddFood: undefined }); 
    }
  }, [route.params, navigation]);

  useEffect(() => {
    if (pendingQuickAddFood && !isLoadingData && !isOverlayVisible && foods.length > 0) {
      const foodExistsInLibrary = foods.find(f => f.id === pendingQuickAddFood.id);
      const foodToUse = foodExistsInLibrary || pendingQuickAddFood;
  
      setFoodForEditModal(foodToUse);
      setInitialGramsForEdit("");    
      setEditIndex(null);            
  
      if (foodToUse.name) resolveAndSetIcon(foodToUse.name);
      setIsOverlayVisible(true);      
      setPendingQuickAddFood(null);   
    }
  }, [pendingQuickAddFood, isLoadingData, isOverlayVisible, foods, resolveAndSetIcon]);

  useFocusEffect(
    useCallback(() => {
      loadData();
      return () => {};
    }, [loadData]) 
  );

  const currentEntryItems = useMemo(() => {
    const entry = dailyEntries.find((e) => e.date === selectedDate);
    return entry ? [...entry.items].reverse() : [];
  }, [dailyEntries, selectedDate]);

  const getOriginalIndex = useCallback((reversedIndex: number): number => {
    const entry = dailyEntries.find((e) => e.date === selectedDate);
    if (!entry || reversedIndex < 0 || reversedIndex >= entry.items.length) return -1;
    return entry.items.length - 1 - reversedIndex;
  }, [dailyEntries, selectedDate]);

  const updateAndSaveEntries = useCallback(async (updaterOrNewEntries: DailyEntry[] | ((prevEntries: DailyEntry[]) => DailyEntry[])) => {
    setIsSaving(true);
    const previousEntriesState = dailyEntries; // Capture current state for potential rollback

    let newEntriesForStateAndSave: DailyEntry[];
    if (typeof updaterOrNewEntries === 'function') {
        newEntriesForStateAndSave = updaterOrNewEntries(previousEntriesState);
    } else {
        newEntriesForStateAndSave = updaterOrNewEntries;
    }

    setDailyEntries(newEntriesForStateAndSave); // Update React state

    try {
      await saveDailyEntries(newEntriesForStateAndSave); // Save the determined new state
    } catch (error) {
      Alert.alert(t('dailyEntryScreen.errorSave'), t('dailyEntryScreen.errorSaveMessage'));
      setDailyEntries(previousEntriesState); // Rollback React state
    } finally {
      setIsSaving(false);
    }
  }, [dailyEntries, t]);

  const handleSingleEntryActionFinal = useCallback(async (foodToAdd: Food, gramsToAdd: number) => {
    if (isSaving) return;
    const entryItem: DailyEntryItem = { food: foodToAdd, grams: gramsToAdd };
    const isEditingThisAction = editIndex !== null;
    
    await updateAndSaveEntries((prevDailyEntries) => {
        const existingEntryIndex = prevDailyEntries.findIndex((entry) => entry.date === selectedDate);
        let updatedEntriesArray: DailyEntry[];
        if (existingEntryIndex > -1) {
            const existingEntry = prevDailyEntries[existingEntryIndex];
            let updatedItems: DailyEntryItem[];
            if (isEditingThisAction && editIndex !== null) { // Ensure editIndex is not null
                const originalEditIndex = getOriginalIndex(editIndex);
                if (originalEditIndex === -1) {
                    console.error("Edit error: original index not found for reversed index:", editIndex);
                    return prevDailyEntries; // Return previous state if error
                }
                updatedItems = existingEntry.items.map((item, index) => index === originalEditIndex ? entryItem : item);
            } else {
                updatedItems = [entryItem, ...(existingEntry.items ?? [])];
            }
            const updatedEntry = { ...existingEntry, items: updatedItems };
            updatedEntriesArray = prevDailyEntries.map((entry, index) => index === existingEntryIndex ? updatedEntry : entry);
        } else {
            if (isEditingThisAction) {
                console.error("Edit error: entry to edit not found for date:", selectedDate);
                return prevDailyEntries; // Return previous state if error
            }
            const newDailyEntry: DailyEntry = { date: selectedDate, items: [entryItem] };
            updatedEntriesArray = [...prevDailyEntries, newDailyEntry];
            updatedEntriesArray.sort((a, b) => a.date.localeCompare(b.date));
        }
        return updatedEntriesArray;
    });

    if (foodToAdd?.name) resolveAndSetIcon(foodToAdd.name);
    
    setIsOverlayVisible(false);
    setEditIndex(null);
    setInitialGramsForEdit(undefined);
    setFoodForEditModal(null);

    Toast.show({ type: "success", text1: t(isEditingThisAction ? 'dailyEntryScreen.entryUpdated' : 'dailyEntryScreen.entryAdded'), position: "bottom", visibilityTime: 2000, });
  }, [ isSaving, editIndex, selectedDate, getOriginalIndex, updateAndSaveEntries, resolveAndSetIcon, t ]);


  const handleAddMultipleEntriesFinal = useCallback(async (entriesToAdd: { food: Food; grams: number }[]) => {
    if (isSaving) return;
    try {
      if (!entriesToAdd || entriesToAdd.length === 0) return;
      const newItems: DailyEntryItem[] = entriesToAdd.map((entry) => ({ food: entry.food, grams: entry.grams }));
      
      await updateAndSaveEntries((prevDailyEntries) => {
          const existingEntryIndex = prevDailyEntries.findIndex((entry) => entry.date === selectedDate);
          let updatedEntriesArray: DailyEntry[];
          if (existingEntryIndex > -1) {
            const existingEntry = prevDailyEntries[existingEntryIndex];
            const updatedItems = [...newItems, ...(existingEntry.items ?? [])];
            const updatedEntry = { ...existingEntry, items: updatedItems };
            updatedEntriesArray = prevDailyEntries.map((entry, index) => index === existingEntryIndex ? updatedEntry : entry);
          } else {
            const newDailyEntry: DailyEntry = { date: selectedDate, items: newItems };
            updatedEntriesArray = [...prevDailyEntries, newDailyEntry];
            updatedEntriesArray.sort((a, b) => a.date.localeCompare(b.date));
          }
          return updatedEntriesArray;
      });

      newItems.forEach(item => { if (item.food?.name) resolveAndSetIcon(item.food.name); });
      
      Toast.show({ type: "success", text1: t('dailyEntryScreen.itemsAdded', { count: entriesToAdd.length }), text2: t('dailyEntryScreen.toDateFormat', { date: readableDate }), position: "bottom", visibilityTime: 3000, });
      
      setIsOverlayVisible(false); 
      setEditIndex(null);
      setInitialGramsForEdit(undefined);
      setFoodForEditModal(null);
    } catch (error) { Alert.alert(t('dailyEntryScreen.errorAddMultiple'), t('dailyEntryScreen.errorAddMultipleMessage')); setIsOverlayVisible(false); }
  }, [selectedDate, isSaving, updateAndSaveEntries, readableDate, resolveAndSetIcon, t]);


  const handleUndoRemoveEntry = useCallback(async (itemToRestore: DailyEntryItem, entryDate: string, originalIndexToRestoreAt: number) => {
    if (isSaving) return;
    Toast.hide(); 
    await updateAndSaveEntries((prevDailyEntries) => {
        const entryIdx = prevDailyEntries.findIndex(e => e.date === entryDate);
        let finalEntries: DailyEntry[];
        if (entryIdx > -1) {
            const entryToUpdate = prevDailyEntries[entryIdx];
            const currentItems = [...entryToUpdate.items];
            currentItems.splice(originalIndexToRestoreAt, 0, itemToRestore);
            const restoredEntry = { ...entryToUpdate, items: currentItems };
            finalEntries = prevDailyEntries.map((entry, i) => i === entryIdx ? restoredEntry : entry);
        } else {
            const newDailyEntry: DailyEntry = { date: entryDate, items: [itemToRestore] };
            finalEntries = [...prevDailyEntries, newDailyEntry];
            finalEntries.sort((a, b) => a.date.localeCompare(b.date));
        }
        return finalEntries;
    });
    Toast.show({ type: "success", text1: t('dailyEntryScreen.entryRestored'), visibilityTime: 1500, position: "bottom" });
  }, [isSaving, updateAndSaveEntries, t]);

  const undoHandlerRef = useRef(handleUndoRemoveEntry);
  useEffect(() => { undoHandlerRef.current = handleUndoRemoveEntry; }, [handleUndoRemoveEntry]);

  const handleRemoveEntry = useCallback(async (reversedItemIndex: number) => {
    if (isSaving) return;
    const originalItemIndex = getOriginalIndex(reversedItemIndex);
    if (originalItemIndex === -1) {
      console.error("handleRemoveEntry: Original index not found for reversed index:", reversedItemIndex);
      return;
    }

    const entryForToast = dailyEntries.find((e) => e.date === selectedDate);
    const itemToRemoveForToast = entryForToast?.items[originalItemIndex];

    if (!itemToRemoveForToast) {
      console.error("handleRemoveEntry: Item to remove not found in current state for Toast.");
      return;
    }

    await updateAndSaveEntries((prevDailyEntries) => {
      const currentEntryIndex = prevDailyEntries.findIndex((e) => e.date === selectedDate);
      if (currentEntryIndex === -1) {
        console.warn("handleRemoveEntry (updater): Entry not found for date:", selectedDate);
        return prevDailyEntries;
      }
      const currentEntry = prevDailyEntries[currentEntryIndex];
      if (originalItemIndex < 0 || originalItemIndex >= currentEntry.items.length) {
        console.warn("handleRemoveEntry (updater): Original item index out of bounds.");
        return prevDailyEntries;
      }
      
      const updatedItems = currentEntry.items.filter((_, i) => i !== originalItemIndex);
      
      if (updatedItems.length === 0) {
        return prevDailyEntries.filter((entry) => entry.date !== selectedDate);
      } else {
        const updatedEntry = { ...currentEntry, items: updatedItems };
        return prevDailyEntries.map((entry, i) => i === currentEntryIndex ? updatedEntry : entry);
      }
    });

    Toast.show({
        type: "info",
        text1: t('dailyEntryScreen.itemRemoved', { itemName: itemToRemoveForToast.food.name }),
        text2: t('dailyEntryScreen.undo'),
        position: "bottom",
        bottomOffset: 80,
        visibilityTime: 4000,
        onPress: () => undoHandlerRef.current(itemToRemoveForToast, selectedDate, originalItemIndex),
    });
  }, [dailyEntries, selectedDate, isSaving, getOriginalIndex, updateAndSaveEntries, t]);


  const toggleOverlay = useCallback((itemToEdit: DailyEntryItem | null = null, reversedItemIndex: number | null = null) => {
    if (isSaving) return;
    
    if (itemToEdit && reversedItemIndex !== null) {
      setFoodForEditModal(itemToEdit.food); 
      setInitialGramsForEdit(String(itemToEdit.grams));
      setEditIndex(reversedItemIndex); // Store reversedIndex
      if (itemToEdit.food.name) resolveAndSetIcon(itemToEdit.food.name); 
    } else {
      setFoodForEditModal(null);
      setInitialGramsForEdit(undefined);
      setEditIndex(null);
    }
    setIsOverlayVisible((current) => !current);
  }, [isSaving, resolveAndSetIcon]);

  const handleAddNewFoodRequestFromModal = useCallback(() => {
    if (isSaving) return;
    setIsOverlayVisible(false); 
    setFoodForEditModal(null);
    setInitialGramsForEdit(undefined);
    setEditIndex(null);
    navigation.navigate('FoodListRoute', { openAddFoodModal: true });
  }, [isSaving, navigation]);


  const handleCommitFoodItemToMainLibrary = useCallback(async (
    foodData: Omit<Food, 'id' | 'createdAt'> | Food,
    isUpdate: boolean
  ): Promise<Food | null> => {
    if (isSaving) return null;
    setIsSaving(true);
    try {
      let committedFood: Food;
      if (isUpdate && 'id' in foodData) { // Ensure it's a Food object for update
        committedFood = await updateFoodService(foodData as Food);
        setFoods(prevFoods =>
          prevFoods.map(f => (f.id === committedFood.id ? committedFood : f)).sort((a, b) => a.name.localeCompare(b.name))
        );
      } else if (!isUpdate && !('id' in foodData)) { // Ensure it's Omit<Food, 'id'> for create
        committedFood = await createFood(foodData as Omit<Food, 'id' | 'createdAt'>);
        setFoods(prevFoods => [...prevFoods, committedFood].sort((a, b) => a.name.localeCompare(b.name)));
      } else {
        throw new Error("Invalid data for commitFoodItemToMainLibrary");
      }
      if(committedFood.name) resolveAndSetIcon(committedFood.name);
      return committedFood;
    } catch (error) {
      console.error("Error committing food to library:", error);
      Alert.alert( t('foodListScreen.errorLoad'), error instanceof Error ? error.message : t(isUpdate ? 'foodListScreen.errorUpdateMessage' : 'foodListScreen.errorCreateMessage') );
      return null;
    } finally {
      setIsSaving(false);
    }
  }, [isSaving, resolveAndSetIcon, t]);


  const handleEditEntryViaModal = (item: DailyEntryItem, reversedIndex: number) => toggleOverlay(item, reversedIndex);

  const handleDateChange = useCallback((event: DateTimePickerEvent, selectedDateValue?: Date) => {
    const isAndroidDismiss = Platform.OS === "android" && event.type === "dismissed";
    setShowDatePicker(Platform.OS === "ios"); // Keep open on iOS until done
    if (!isAndroidDismiss && event.type === "set" && selectedDateValue) {
      if (isValid(selectedDateValue)) {
        const formattedDate = formatISO(selectedDateValue, { representation: "date" });
        if (formattedDate !== selectedDate) {
           setSelectedDate(formattedDate);
           setEditIndex(null); // Reset edit index when date changes
        }
      } else {
        Alert.alert(t('dailyEntryScreen.errorInvalidDate'), t('dailyEntryScreen.errorInvalidDateMessage'));
      }
    }
    // For Android, dismiss after selection or if explicitly dismissed
    if (Platform.OS === "android") {
        setShowDatePicker(false);
    }
  }, [selectedDate, t]);

  const handlePreviousDay = useCallback(() => {
    if (isSaving || isLoadingData) return;
    try {
      const currentDateObj = parseISO(selectedDate);
      if (!isValid(currentDateObj)) {
          console.warn("PreviousDay: Invalid current selectedDate:", selectedDate);
          return;
      }
      const newDate = subDays(currentDateObj, 1);
      const newDateString = formatISO(newDate, { representation: "date" });
      setSelectedDate(newDateString);
      setEditIndex(null);
    } catch (e) { console.error("DateNav Error (Prev):", e); }
  }, [selectedDate, isSaving, isLoadingData]);

  const handleNextDay = useCallback(() => {
    if (isSaving || isLoadingData) return;
    try {
      const currentDateObj = parseISO(selectedDate);
      if (!isValid(currentDateObj)) {
          console.warn("NextDay: Invalid current selectedDate:", selectedDate);
          return;
      }
      const newDate = addDays(currentDateObj, 1);
      const newDateString = formatISO(newDate, { representation: "date" });
      setSelectedDate(newDateString);
      setEditIndex(null);
    } catch (e) { console.error("DateNav Error (Next):", e); }
  }, [selectedDate, isSaving, isLoadingData]);

  const calculateTotals = useMemo(() => {
    const currentOriginalEntry = dailyEntries.find((entry) => entry.date === selectedDate);
    let totals = { totalCalories: 0, totalProtein: 0, totalCarbs: 0, totalFat: 0 };
    if (currentOriginalEntry) {
      currentOriginalEntry.items.forEach((item) => {
        if (item.food && typeof item.food.calories === "number" && typeof item.food.protein === "number" && typeof item.food.carbs === "number" && typeof item.food.fat === "number" && typeof item.grams === "number" && item.grams > 0) {
          const factor = item.grams / 100; totals.totalCalories += item.food.calories * factor; totals.totalProtein += item.food.protein * factor; totals.totalCarbs += item.food.carbs * factor; totals.totalFat += item.food.fat * factor;
        }
      });
    } return { totalCalories: Math.round(totals.totalCalories), totalProtein: Math.round(totals.totalProtein), totalCarbs: Math.round(totals.totalCarbs), totalFat: Math.round(totals.totalFat), };
  }, [dailyEntries, selectedDate]);

  return (
    <SafeAreaView style={styles.container} edges={["top", "left", "right"]}>
      <DateNavigator selectedDate={selectedDate} onPreviousDay={handlePreviousDay} onNextDay={handleNextDay} onShowDatePicker={() => !isSaving && !isLoadingData && setShowDatePicker(true)} isSaving={isSaving} isLoadingData={isLoadingData} />
      {showDatePicker && (<DateTimePicker value={isValid(parseISO(selectedDate)) ? parseISO(selectedDate) : new Date()} mode="date" display={Platform.OS === "ios" ? "spinner" : "default"} onChange={handleDateChange} />)}
      <View style={styles.progressContainer}><DailyProgress calories={calculateTotals.totalCalories} protein={calculateTotals.totalProtein} carbs={calculateTotals.totalCarbs} fat={calculateTotals.totalFat} goals={dailyGoals} /></View>
      <Divider style={styles.divider} />
      {isSaving && (<View style={styles.savingIndicator}><ActivityIndicator size="small" color={theme.colors.primary} /><Text style={styles.savingText}>{t('dailyEntryScreen.saving')}</Text></View>)}
      <Text style={styles.sectionTitle}>{t('dailyEntryScreen.todaysEntries')}</Text>
      {isLoadingData ? (<View style={styles.centeredLoader}><ActivityIndicator size="large" color={theme.colors.primary} /><Text style={styles.loadingText}>{t('dailyEntryScreen.loadingEntries')}</Text></View>
      ) : (
        <FlatList
          data={currentEntryItems}
          keyExtractor={(item, index) => `entry-${item?.food?.id ?? "unknown"}-${getOriginalIndex(index)}-${item?.grams ?? index}-${selectedDate}-${index}`}
          renderItem={({ item, index }) => (
            <DailyEntryListItem
              item={item}
              reversedIndex={index} // This is the index in the reversed currentEntryItems
              foodIcons={foodIcons}
              setFoodIcons={setFoodIcons}
              onEdit={handleEditEntryViaModal}
              onRemove={handleRemoveEntry}
              isSaving={isSaving}
              dailyGoals={dailyGoals} />
          )}
          ListEmptyComponent={<View style={styles.emptyListContainer}><RNEIcon name="reader-outline" type="ionicon" size={50} color={theme.colors.grey3} /><Text style={styles.emptyListText}>{t('dailyEntryScreen.noEntries')}</Text><Text style={styles.emptyListSubText}>{t('dailyEntryScreen.noEntriesHint')}</Text></View>}
          initialNumToRender={10}
          maxToRenderPerBatch={5}
          windowSize={11}
          contentContainerStyle={styles.listContentContainer}
          keyboardShouldPersistTaps="handled"
          extraData={{ foodIcons, isSaving, dailyGoals, selectedDate, itemsLength: currentEntryItems.length }}
        />
      )}
      <FAB icon={<RNEIcon name="add" color="white" />} color={theme.colors.primary} onPress={() => !isSaving && toggleOverlay()} placement="right" size="large" style={styles.fab} disabled={isSaving || isLoadingData} />
      
      {isOverlayVisible && (
          <AddEntryModal
            isVisible={isOverlayVisible}
            toggleOverlay={toggleOverlay}
            handleAddEntry={handleSingleEntryActionFinal}
            handleAddMultipleEntries={handleAddMultipleEntriesFinal}
            foods={foods} 
            isEditMode={editIndex !== null}
            initialGrams={initialGramsForEdit}
            initialSelectedFoodForEdit={foodForEditModal}
            onAddNewFoodRequest={handleAddNewFoodRequestFromModal}
            onCommitFoodToLibrary={handleCommitFoodItemToMainLibrary}
            dailyGoals={dailyGoals}
          />
      )}
    </SafeAreaView>
  );
};

const useStyles = makeStyles((theme) => ({
  container: { flex: 1, backgroundColor: theme.colors.background },
  progressContainer: { paddingHorizontal: 15, paddingTop: 10 },
  divider: { marginVertical: 0, height: StyleSheet.hairlineWidth, backgroundColor: theme.colors.divider, },
  sectionTitle: { marginTop: 15, marginBottom: 10, paddingHorizontal: 15, fontWeight: "bold", fontSize: 18, color: theme.colors.text, textAlign: I18nManager.isRTL ? 'right' : 'left' },
  fab: { position: "absolute", margin: 16, right: I18nManager.isRTL ? undefined : 10, left: I18nManager.isRTL ? 10 : undefined, bottom: 10 },
  emptyListContainer: { flex: 1, alignItems: "center", justifyContent: "center", padding: 30, marginTop: 50, },
  emptyListText: { fontSize: 17, color: theme.colors.grey2, textAlign: "center", marginTop: 15, },
  emptyListSubText: { fontSize: 14, color: theme.colors.grey3, textAlign: "center", marginTop: 8, },
  centeredLoader: { flex: 1, justifyContent: "center", alignItems: "center", paddingBottom: 50, },
  loadingText: { marginTop: 10, color: theme.colors.grey2, fontSize: 16 },
  savingIndicator: { flexDirection: "row", alignItems: "center", justifyContent: "center", paddingVertical: 5, backgroundColor: theme.colors.grey5, },
  savingText: { marginLeft: 8, color: theme.colors.primary, fontSize: 14, fontStyle: "italic", },
  listContentContainer: { paddingBottom: 80 },
}));

export default DailyEntryScreen;
---------- END DailyEntryScreen.tsx ----------


---------- FoodListScreen.tsx ----------
// src/screens/FoodListScreen.tsx
import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { View, FlatList, Alert, Platform, ActivityIndicator, StyleSheet, I18nManager, Share, LayoutAnimation, UIManager, TouchableOpacity } from "react-native";
import { createFood, getFoods, updateFood, deleteFood as deleteFoodService } from "../services/foodService";
import { Food, SharedFoodData } from "../types/food";
import { isNotEmpty } from "../utils/validationUtils";
import FoodItem from "../components/FoodItem";
import { SearchBar, useTheme, makeStyles, Text, Icon as RNEIcon, Overlay } from "@rneui/themed";
import { FAB } from "@rneui/base";
import { SafeAreaView } from "react-native-safe-area-context";
import AddFoodModal from "../components/AddFoodModal";
import Toast from "react-native-toast-message";
import { useFocusEffect, useNavigation, useRoute, RouteProp } from "@react-navigation/native";
import { getFoodIconUrl } from "../utils/iconUtils";
import { t } from '../localization/i18n';
import { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';
import { MainTabParamList } from "../navigation/AppNavigator";
import Constants from 'expo-constants';
import { findFoodsByTagSearch } from "../utils/searchUtils";

if (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {
  UIManager.setLayoutAnimationEnabledExperimental(true);
}

if (typeof atob === 'undefined') {
  global.atob = (str: string): string => Buffer.from(str, 'base64').toString('binary');
}
if (typeof btoa === 'undefined') {
  global.btoa = (str: string): string => Buffer.from(str, 'binary').toString('base64');
}

interface FoodListScreenProps { onFoodChange?: () => void; }

type SortOptionValue = 'name' | 'newest' | 'oldest';

type FoodListScreenNavigationProp = BottomTabNavigationProp<MainTabParamList, 'FoodListRoute'>;
type FoodListScreenRouteProp = RouteProp<MainTabParamList, 'FoodListRoute'>;

const getBackendShareBaseUrl = (): string => {
    const envUrl = process.env.EXPO_PUBLIC_BACKEND_URL_PRODUCTION;
    const appJsonUrl = Constants.expoConfig?.extra?.env?.BACKEND_URL_PRODUCTION;
    let chosenUrl: string;

    if (envUrl) {
        chosenUrl = envUrl;
    } else if (appJsonUrl) {
        chosenUrl = appJsonUrl;
    } else {
        chosenUrl = "https://macros-vision-ai.xyz";
        console.warn(
            `Share Link WARNING: Production backend URL is not configured. Falling back to default: ${chosenUrl}.`
        );
    }
    return String(chosenUrl).replace(/\/api\/v1$/, '').replace(/\/$/, '');
};

const FoodListScreen: React.FC<FoodListScreenProps> = ({ onFoodChange }) => {
    const [masterFoods, setMasterFoods] = useState<Food[]>([]);
    const [foodIcons, setFoodIcons] = useState<{ [foodName: string]: string | null }>({});
    const [isLoading, setIsLoading] = useState(true);
    const [isOverlayVisible, setIsOverlayVisible] = useState(false);
    const [search, setSearch] = useState("");
    const [sortOption, setSortOption] = useState<SortOptionValue>('name');
    const [sortIndex, setSortIndex] = useState(0);
    const [newFood, setNewFood] = useState<Omit<Food, "id" | "createdAt">>({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0, });
    const [editFood, setEditFood] = useState<Food | null>(null);
    const [errors, setErrors] = useState<{ [key: string]: string }>({});
    const [isSaving, setIsSaving] = useState(false);
    const [isSortMenuVisible, setIsSortMenuVisible] = useState(false);
    
    const { theme } = useTheme();
    const styles = useStyles();
    const deleteTimeoutRef = useRef<NodeJS.Timeout | null>(null);
    const sortButtonRef = useRef<View | null>(null);
    const [sortButtonPosition, setSortButtonPosition] = useState({ x: 0, y: 0, width: 0, height: 0 });


    const route = useRoute<FoodListScreenRouteProp>();
    const navigation = useNavigation<FoodListScreenNavigationProp>();

    const sortOptions = useMemo<{label: string, value: SortOptionValue}[]>(() => [
        { label: t('foodListScreen.sortByName'), value: 'name' },
        { label: t('foodListScreen.sortByNewest'), value: 'newest' },
        { label: t('foodListScreen.sortByOldest'), value: 'oldest' },
    ], [t]);

    const handleSortChange = (index: number) => {
        if (isLoading || isSaving) return;
        setSortIndex(index);
        setSortOption(sortOptions[index].value);
        setIsSortMenuVisible(false);
    };
    
    const toggleSortMenu = () => {
        sortButtonRef.current?.measure((_fx: number, _fy: number, width: number, height: number, px: number, py: number) => {
            setSortButtonPosition({ x: px, y: py, width, height });
            setIsSortMenuVisible(!isSortMenuVisible);
        });
    };

    const triggerIconPrefetch = useCallback((foodsToFetch: Food[]) => {
        if (!foodsToFetch || foodsToFetch.length === 0) return;
        const iconsToResolve: { [key: string]: string | null } = {};
        foodsToFetch.forEach(food => {
            if (food.name && foodIcons[food.name] === undefined) {
                iconsToResolve[food.name] = getFoodIconUrl(food.name);
            }
        });
        if (Object.keys(iconsToResolve).length > 0) {
            setFoodIcons(prevIcons => ({ ...prevIcons, ...iconsToResolve }));
        }
    }, [foodIcons]);

    useFocusEffect(
      useCallback(() => {
        let isActive = true;
        const loadAllFoods = async () => {
          setIsLoading(true);
          try {
            const { items } = await getFoods();
            if (isActive) {
              setMasterFoods(items);
              triggerIconPrefetch(items);
            }
          } catch (error) {
            if (isActive) Alert.alert(t('foodListScreen.errorLoad'), t('foodListScreen.errorLoadMessage'));
          } finally {
            if (isActive) setIsLoading(false);
          }
        };
        loadAllFoods();
        return () => { isActive = false; };
      }, [triggerIconPrefetch, t])
    );

    const displayedFoods = useMemo(() => {
        let items: Food[];
        const lowercasedSearchTerm = search.toLowerCase().trim();
    
        if (lowercasedSearchTerm) {
            const combined = new Map<string, Food>();
    
            // 1. Primary search: by name
            const nameMatchedFoods = masterFoods.filter(food =>
                food.name.toLowerCase().includes(lowercasedSearchTerm)
            );
            nameMatchedFoods.forEach(food => combined.set(food.id, food));
    
            // 2. Secondary search: by tags
            const tagMatchedFoods = findFoodsByTagSearch(lowercasedSearchTerm, masterFoods);
            tagMatchedFoods.forEach(food => combined.set(food.id, food));
            
            items = Array.from(combined.values());
        } else {
            items = [...masterFoods];
        }
        
        // Apply sorting to the final list
        if (sortOption === 'name') {
            items.sort((a, b) => a.name.localeCompare(b.name));
        } else {
            const fallbackDate = '2020-01-01T00:00:00.000Z';
            items.sort((a, b) => {
                const dateA = new Date(a.createdAt || fallbackDate).getTime();
                const dateB = new Date(b.createdAt || fallbackDate).getTime();
                return sortOption === 'newest' ? dateB - dateA : dateA - dateB;
            });
        }
        return items;
    }, [masterFoods, search, sortOption]);

    const toggleOverlay = useCallback((foodToEdit?: Food) => {
        if (isSaving) return;
        if (foodToEdit) {
            setEditFood({ ...foodToEdit });
            setNewFood({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0 });
        } else {
            setEditFood(null);
            setNewFood({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0 });
        }
        setErrors({});
        setIsOverlayVisible(prev => !prev);
    }, [isSaving]);

    useEffect(() => {
      const params = route.params;
      if (params) {
        if (params.openAddFoodModal && !isOverlayVisible) {
          toggleOverlay();
          navigation.setParams({ openAddFoodModal: undefined });
        }
        if (params.foodData && typeof params.foodData === 'string') {
          try {
            let b64 = params.foodData.replace(/-/g, '+').replace(/_/g, '/');
            const binaryString = atob(b64);
            const utf8Bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) utf8Bytes[i] = binaryString.charCodeAt(i);
            const decodedJson = new TextDecoder().decode(utf8Bytes);
            const sharedFood: SharedFoodData = JSON.parse(decodedJson);
            if (sharedFood && typeof sharedFood.name === 'string') {
              setNewFood({ ...sharedFood });
              setEditFood(null); setIsOverlayVisible(true);
            } else { Alert.alert(t('foodListScreen.deepLinkErrorTitle'), t('foodListScreen.deepLinkInvalidData')); }
          } catch (e) { Alert.alert(t('foodListScreen.deepLinkErrorTitle'), t('foodListScreen.deepLinkParseError'));
          } finally { navigation.setParams({ foodData: undefined }); }
        }
      }
    }, [route.params, isOverlayVisible, toggleOverlay, navigation, t]);

    const handleUndoDelete = useCallback((foodToRestore: Food) => {
        Toast.hide();
        if (deleteTimeoutRef.current) { 
            clearTimeout(deleteTimeoutRef.current); 
            deleteTimeoutRef.current = null; 
        }
        
        LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
        setMasterFoods(prev => [...prev, foodToRestore]);
        Toast.show({
            type: 'success', 
            text1: t('foodListScreen.foodRestored', { foodName: foodToRestore.name }),
            position: 'bottom', 
            visibilityTime: 2000,
        });
    }, [t]);

    const handleDeleteFood = useCallback((foodId: string) => {
        const foodToDelete = masterFoods.find(f => f.id === foodId);
        if (!foodToDelete) return;
        
        if (deleteTimeoutRef.current) clearTimeout(deleteTimeoutRef.current);
        
        LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
        setMasterFoods(prev => prev.filter(f => f.id !== foodId));

        deleteTimeoutRef.current = setTimeout(() => {
            deleteFoodService(foodId)
              .then(() => { 
                  onFoodChange?.(); 
                  console.log(`Permanently deleted ${foodId}`); 
              })
              .catch(error => {
                  Alert.alert(t('foodListScreen.errorDelete'), t('foodListScreen.errorDeleteMessage'));
                  setMasterFoods(prev => [...prev, foodToDelete]);
              });
        }, 4000);

        Toast.show({
            type: 'info', 
            text1: t('foodListScreen.foodDeleted', { foodName: foodToDelete.name }),
            text2: t('dailyEntryScreen.undo'), 
            position: 'bottom', 
            visibilityTime: 4000,
            onPress: () => handleUndoDelete(foodToDelete), 
            bottomOffset: 80,
        });
    }, [masterFoods, onFoodChange, t, handleUndoDelete]);

    const handleQuickAdd = useCallback((foodToQuickAdd: Food) => {
        navigation.navigate('DailyEntryRoute', { quickAddFood: foodToQuickAdd });
    }, [navigation]);

    const validateFood = (foodToValidate: Omit<Food, "id" | "createdAt"> | Food): { [key: string]: string } | null => {
        const newErrors: { [key: string]: string } = {};
        if (!isNotEmpty(foodToValidate.name)) newErrors.name = "Name is required";
        if (isNaN(foodToValidate.calories) || foodToValidate.calories < 0) newErrors.calories = "Must be a non-negative number";
        if (isNaN(foodToValidate.protein) || foodToValidate.protein < 0) newErrors.protein = "Must be a non-negative number";
        if (isNaN(foodToValidate.carbs) || foodToValidate.carbs < 0) newErrors.carbs = "Must be a non-negative number";
        if (isNaN(foodToValidate.fat) || foodToValidate.fat < 0) newErrors.fat = "Must be a non-negative number";
        return Object.keys(newErrors).length === 0 ? null : newErrors;
    };

    const handleCreateFood = async () => {
        const trimmedFood = { ...newFood, name: newFood.name.trim() };
        if (validateFood(trimmedFood)) { Toast.show({ type: 'error', text1: t('foodListScreen.fixErrors'), position: 'bottom' }); return; }
        setIsSaving(true);
        try {
            const created = await createFood(trimmedFood);
            LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
            setMasterFoods(prev => [...prev, created]);
            setIsOverlayVisible(false); onFoodChange?.();
            Toast.show({ type: 'success', text1: t('foodListScreen.foodAdded', { foodName: created.name }), position: 'bottom' });
            setNewFood({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0 });
        } catch (error: any) { Alert.alert(t('foodListScreen.errorCreate'), error.message || t('foodListScreen.errorCreateMessage'));
        } finally { setIsSaving(false); }
    };

    const handleUpdateFood = async () => {
        if (!editFood) return;
        const trimmedFood = { ...editFood, name: editFood.name.trim() };
        if (validateFood(trimmedFood)) { Toast.show({ type: 'error', text1: t('foodListScreen.fixErrors'), position: 'bottom' }); return; }
        setIsSaving(true);
        try {
            const updated = await updateFood(trimmedFood);
            LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
            setMasterFoods(prev => prev.map(f => (f.id === updated.id ? updated : f)));
            setIsOverlayVisible(false); onFoodChange?.();
            Toast.show({ type: 'success', text1: t('foodListScreen.foodUpdated', { foodName: updated.name }), position: 'bottom' });
            setEditFood(null);
        } catch (error: any) { Alert.alert(t('foodListScreen.errorUpdate'), error.message || t('foodListScreen.errorUpdateMessage'));
        } finally { setIsSaving(false); }
    };
    
    const handleShareFood = useCallback(async (foodToShare: Food) => {
        const foodDataPayload: SharedFoodData = {
            name: foodToShare.name, calories: foodToShare.calories, protein: foodToShare.protein,
            carbs: foodToShare.carbs, fat: foodToShare.fat,
        };
        try {
            const jsonString = JSON.stringify(foodDataPayload);
            const utf8Bytes = new TextEncoder().encode(jsonString);
            let binaryString = '';
            utf8Bytes.forEach((byte) => { binaryString += String.fromCharCode(byte); });
            const base64Data = btoa(binaryString).replace(/\+/g, '-').replace(/\//g, '_');
            const backendBaseUrl = getBackendShareBaseUrl();
            const shareUrl = `${backendBaseUrl}/share/food?data=${base64Data}`;
            await Share.share({ message: shareUrl, title: t('foodListScreen.shareFoodTitle', {foodName: foodToShare.name}), });
        } catch (error) { Alert.alert(t('foodListScreen.shareErrorTitle'), t('foodListScreen.shareErrorMessage')); }
    }, [t]);

    const handleInputChange = (key: keyof Omit<Food, "id" | "createdAt">, value: string, isEdit: boolean) => {
        const numericKeys: (keyof Omit<Food, "id" | "createdAt">)[] = ['calories', 'protein', 'carbs', 'fat'];
        let processedValue: string | number = value;
        if (numericKeys.includes(key)) {
            if (value === "" || value === ".") { processedValue = value; }
            else { const cleaned = value.replace(/[^0-9.]/g, "").replace(/(\..*)\./g, "$1");
                   if (cleaned === "" || !isNaN(parseFloat(cleaned))) processedValue = cleaned; else return; }
        }
        const updateState = (prevState: any) => {
            let finalValue: string | number = numericKeys.includes(key) ? ((processedValue === "" || processedValue === ".") ? 0 : parseFloat(processedValue as string) || 0) : processedValue;
            return { ...prevState, [key]: finalValue };
        };
        if (isEdit) setEditFood(updateState); else setNewFood(updateState);
    };
    
    const setFoodIconForName = useCallback((name: string, icon: string | null) => {
        setFoodIcons(prev => {
            if (prev[name] === icon) return prev;
            return { ...prev, [name]: icon };
        });
    }, []);

    if (isLoading) {
        return (
            <SafeAreaView style={styles.centeredLoader} edges={['top', 'left', 'right']}>
                <ActivityIndicator size="large" color={theme.colors.primary} />
                <Text style={styles.loadingText}>{t('foodListScreen.loadingFoods')}</Text>
            </SafeAreaView>
        );
    }
    
    return (
        <SafeAreaView style={styles.container} edges={['top', 'left', 'right']}>
            <SearchBar
                placeholder={t('foodListScreen.searchPlaceholder')}
                onChangeText={setSearch}
                value={search}
                platform="default"
                containerStyle={styles.searchBarContainer}
                inputContainerStyle={styles.searchBarInputContainer}
                inputStyle={styles.searchInputStyle}
                onClear={() => setSearch('')}
                lightTheme={theme.mode === 'light'}
                round
            />
            <View style={styles.controlsContainer}>
                <Text style={styles.resultsCount}>{`${displayedFoods.length} foods`}</Text>
                
                <TouchableOpacity ref={sortButtonRef} style={styles.sortButton} onPress={toggleSortMenu}>
                    <RNEIcon name="sort" type="material-community" size={18} color={theme.colors.primary} />
                    <Text style={styles.sortButtonText}>{sortOptions[sortIndex].label}</Text>
                </TouchableOpacity>

                <Overlay
                    isVisible={isSortMenuVisible}
                    onBackdropPress={toggleSortMenu}
                    overlayStyle={[styles.sortOverlay, { top: sortButtonPosition.y + sortButtonPosition.height, left: I18nManager.isRTL ? undefined : sortButtonPosition.x, right: I18nManager.isRTL ? (StyleSheet.absoluteFillObject.right || 0) + 15 : undefined }]}
                >
                    <View>
                        {sortOptions.map((option, index) => (
                            <TouchableOpacity key={option.value} style={styles.sortMenuItem} onPress={() => handleSortChange(index)}>
                                <Text style={styles.sortMenuText}>{option.label}</Text>
                                {sortIndex === index && <RNEIcon name="check" type="material-community" size={20} color={theme.colors.primary} />}
                            </TouchableOpacity>
                        ))}
                    </View>
                </Overlay>

            </View>
            <FlatList
                data={displayedFoods}
                keyExtractor={(item) => item.id}
                renderItem={({ item }) => (
                    <FoodItem
                        food={item}
                        onEdit={toggleOverlay}
                        onDelete={handleDeleteFood}
                        onQuickAdd={handleQuickAdd}
                        onShare={handleShareFood}
                        foodIconUrl={foodIcons[item.name]}
                        setFoodIconForName={setFoodIconForName}
                    />
                )}
                ListEmptyComponent={
                    <View style={styles.emptyListContainer}>
                        <RNEIcon name="nutrition-outline" type="ionicon" size={50} color={theme.colors.grey3} />
                        <Text style={styles.emptyListText}>
                            {search.trim() ? t('foodListScreen.noResults', { searchTerm: search.trim() }) : t('foodListScreen.emptyLibrary')}
                        </Text>
                        {!search.trim() && <Text style={styles.emptyListSubText}>{t('foodListScreen.emptyLibraryHint')}</Text>}
                    </View>
                }
                contentContainerStyle={displayedFoods.length === 0 ? styles.listContentContainerEmpty : styles.listContentContainer}
                keyboardShouldPersistTaps="handled"
                extraData={{ foodIcons, masterFoodsLength: masterFoods.length, sortOption }}
            />
            <FAB
                icon={<RNEIcon name="add" color={theme.colors.white} />}
                color={theme.colors.primary}
                onPress={() => !isSaving && toggleOverlay()}
                placement="right"
                size="large"
                style={styles.fab}
                disabled={isSaving}
            />
            {isOverlayVisible && <AddFoodModal
                isVisible={isOverlayVisible}
                toggleOverlay={() => !isSaving && setIsOverlayVisible(false)} 
                newFood={newFood}
                editFood={editFood}
                errors={errors}
                handleInputChange={handleInputChange}
                handleCreateFood={handleCreateFood}
                handleUpdateFood={handleUpdateFood}
                validateFood={validateFood}
                setErrors={setErrors}
            />}
        </SafeAreaView>
    );
};

const useStyles = makeStyles((theme) => ({
    container: { flex: 1, backgroundColor: theme.colors.background, },
    centeredLoader: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: theme.colors.background, },
    loadingText: { marginTop: 15, color: theme.colors.grey1, fontSize: 16, },
    emptyListContainer: { flex: 1, alignItems: 'center', justifyContent: 'center', padding: 30, marginTop: 20, },
    emptyListText: { fontSize: 17, color: theme.colors.grey2, textAlign: 'center', marginTop: 15, },
    emptyListSubText: { fontSize: 14, color: theme.colors.grey3, textAlign: 'center', marginTop: 8, },
    searchBarContainer: {
        backgroundColor: 'transparent', borderBottomColor: 'transparent', borderTopColor: 'transparent',
        paddingHorizontal: 10, paddingTop: 8, paddingBottom: 5,
    },
    searchBarInputContainer: { backgroundColor: theme.colors.searchBg || theme.colors.grey5, },
    searchInputStyle: { color: theme.colors.text, fontSize: 15, textAlign: I18nManager.isRTL ? 'right' : 'left', },
    controlsContainer: {
        flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15,
        paddingBottom: 12, borderBottomWidth: StyleSheet.hairlineWidth, borderBottomColor: theme.colors.divider,
    },
    resultsCount: { color: theme.colors.grey2, fontWeight: '600', fontSize: 14, },
    sortButton: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: 6,
        paddingHorizontal: 12,
        borderRadius: 20,
        backgroundColor: theme.colors.grey5,
    },
    sortButtonText: {
        color: theme.colors.primary,
        fontWeight: 'bold',
        fontSize: 14,
        marginLeft: 6,
    },
    sortOverlay: {
        position: 'absolute',
        borderRadius: 8,
        padding: 0,
        backgroundColor: theme.colors.card,
        elevation: 5,
        shadowColor: theme.colors.black,
        shadowOpacity: 0.2,
        shadowRadius: 5,
        shadowOffset: { width: 0, height: 3 },
    },
    sortMenuItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 12,
        paddingHorizontal: 16,
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderBottomColor: theme.colors.divider,
        minWidth: 150,
    },
    sortMenuText: {
        color: theme.colors.text,
        fontSize: 16,
    },
    listContentContainer: { paddingBottom: 80, },
    listContentContainerEmpty: { flexGrow: 1, justifyContent: 'center', },
    fab: {
        position: 'absolute', margin: 16, right: I18nManager.isRTL ? undefined : 10,
        left: I18nManager.isRTL ? 10 : undefined, bottom: 10,
    },
}));

export default FoodListScreen;
---------- END FoodListScreen.tsx ----------


---------- ForgotPasswordScreen.tsx ----------
// src/screens/ForgotPasswordScreen.tsx
import React, { useState } from 'react';
import { View, StyleSheet, Alert, TouchableOpacity, SafeAreaView } from 'react-native';
import { Input, Button, Text, Icon, useTheme } from '@rneui/themed';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { AuthStackParamList } from '../navigation/AppNavigator';
import { requestPasswordReset } from '../services/authService';
import { t } from '../localization/i18n';

type ForgotPasswordScreenNavigationProp = NativeStackNavigationProp<AuthStackParamList, 'ForgotPassword'>;

const ForgotPasswordScreen: React.FC = () => {
    const [email, setEmail] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const navigation = useNavigation<ForgotPasswordScreenNavigationProp>();
    const { theme } = useTheme();

    const handleSendLink = async () => {
        if (!email.trim()) {
            Alert.alert('Email Required', 'Please enter your email address.');
            return;
        }
        setIsLoading(true);
        try {
            const response = await requestPasswordReset(email);
            Alert.alert(
                t('forgotPasswordScreen.alertSuccessTitle'),
                response.message,
                [{ text: 'OK', onPress: () => navigation.goBack() }]
            );
        } catch (error: any) {
            // Error is handled and alerted by the authService
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
            <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
                <Icon name="arrow-left" type="material-community" color={theme.colors.text} size={28} />
            </TouchableOpacity>
            <View style={styles.content}>
                <Text h3 style={[styles.title, { color: theme.colors.text }]}>
                    {t('forgotPasswordScreen.title')}
                </Text>
                <Text style={[styles.instructions, { color: theme.colors.grey2 }]}>
                    {t('forgotPasswordScreen.instructions')}
                </Text>
                <Input
                    placeholder={t('forgotPasswordScreen.emailPlaceholder')}
                    leftIcon={<Icon name="envelope" type="font-awesome" size={20} color={theme.colors.grey3} />}
                    onChangeText={setEmail}
                    value={email}
                    keyboardType="email-address"
                    autoCapitalize="none"
                    autoFocus={true}
                    containerStyle={styles.inputContainer}
                    inputStyle={{ color: theme.colors.text }}
                />
                <Button
                    title={t('forgotPasswordScreen.buttonText')}
                    onPress={handleSendLink}
                    loading={isLoading}
                    buttonStyle={styles.button}
                    containerStyle={styles.buttonContainer}
                />
                 <TouchableOpacity onPress={() => navigation.navigate('Login')}>
                    <Text style={[styles.switchText, { color: theme.colors.primary }]}>
                        {t('forgotPasswordScreen.backToLogin')}
                    </Text>
                </TouchableOpacity>
            </View>
        </SafeAreaView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    backButton: {
        position: 'absolute',
        top: 60,
        left: 20,
        zIndex: 1,
    },
    content: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    title: {
        marginBottom: 15,
        textAlign: 'center',
    },
    instructions: {
        marginBottom: 30,
        textAlign: 'center',
        fontSize: 16,
        paddingHorizontal: 10,
    },
    inputContainer: {
        width: '100%',
        marginBottom: 10,
    },
    button: {
        height: 50,
        borderRadius: 8,
    },
    buttonContainer: {
        width: '100%',
        marginTop: 20,
    },
    switchText: {
        marginTop: 20,
        textDecorationLine: 'underline',
    },
});

export default ForgotPasswordScreen;
---------- END ForgotPasswordScreen.tsx ----------


---------- LoginScreen.tsx ----------
// src/screens/LoginScreen.tsx
import React, { useState } from 'react';
import { View, StyleSheet, Alert, TouchableOpacity, SafeAreaView } from 'react-native';
import { Input, Button, Text, Icon, useTheme } from '@rneui/themed';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { AuthStackParamList } from '../navigation/AppNavigator';
import { useAuth, AuthContextType } from '../context/AuthContext';
import { loginUser } from '../services/authService';
import { t } from '../localization/i18n';

type LoginScreenNavigationProp = NativeStackNavigationProp<AuthStackParamList, 'Login'>;

const LoginScreen: React.FC = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isPasswordVisible, setIsPasswordVisible] = useState(false);
    const navigation = useNavigation<LoginScreenNavigationProp>();
    const { login } = useAuth() as AuthContextType;
    const { theme } = useTheme();

    const handleLogin = async () => {
        if (!email || !password) {
            Alert.alert('Missing Fields', 'Please enter both email and password.');
            return;
        }
        setIsLoading(true);
        try {
            const response = await loginUser(email, password);
            if (response.access_token) {
                await login(response);
            }
        } catch (error: any) {
            // Error is handled and alerted by the authService
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
            <Text h2 style={[styles.title, { color: theme.colors.text }]}>Welcome Back</Text>
            <Input
                placeholder="Email"
                leftIcon={<Icon name="envelope" type="font-awesome" size={20} color={theme.colors.grey3} />}
                onChangeText={setEmail}
                value={email}
                keyboardType="email-address"
                autoCapitalize="none"
                containerStyle={styles.inputContainer}
                inputStyle={{ color: theme.colors.text }}
            />
            <Input
                placeholder="Password"
                leftIcon={<Icon name="lock" type="font-awesome" size={24} color={theme.colors.grey3} />}
                rightIcon={
                    <Icon 
                        name={isPasswordVisible ? 'eye-slash' : 'eye'} 
                        type="font-awesome" 
                        color={theme.colors.grey3}
                        onPress={() => setIsPasswordVisible(!isPasswordVisible)}
                    />
                }
                onChangeText={setPassword}
                value={password}
                secureTextEntry={!isPasswordVisible}
                containerStyle={styles.inputContainer}
                inputStyle={{ color: theme.colors.text }}
            />
            <Button
                title="Login"
                onPress={handleLogin}
                loading={isLoading}
                buttonStyle={styles.button}
                containerStyle={styles.buttonContainer}
            />
            <TouchableOpacity onPress={() => navigation.navigate('ForgotPassword')}>
                <Text style={[styles.forgotPassword, { color: theme.colors.secondary }]}>
                    {t('forgotPasswordScreen.forgotPasswordLink')}
                </Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => navigation.navigate('Register')}>
                <Text style={[styles.switchText, { color: theme.colors.primary }]}>Don't have an account? Sign Up</Text>
            </TouchableOpacity>
        </SafeAreaView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    title: {
        marginBottom: 30,
    },
    inputContainer: {
        width: '100%',
        marginBottom: 10,
    },
    button: {
        height: 50,
        borderRadius: 8,
    },
    buttonContainer: {
        width: '100%',
        marginTop: 20,
    },
    forgotPassword: {
        marginTop: 15,
        textAlign: 'center'
    },
    switchText: {
        marginTop: 20,
        textDecorationLine: 'underline',
    },
});

export default LoginScreen;
---------- END LoginScreen.tsx ----------


---------- QuestionnaireScreen.tsx ----------
// src/screens/QuestionnaireScreen.tsx
import React, { useState, useCallback, useMemo } from 'react';
import { View, ScrollView, Alert, StyleSheet, I18nManager, Platform } from 'react-native';
import { Input, Button, Text, useTheme, makeStyles, CheckBox } from '@rneui/themed';
import { Picker } from '@react-native-picker/picker';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { QuestionnaireFormData, Sex, ActivityLevel, PrimaryGoal, GoalIntensity, CalculatedGoals } from '../types/questionnaire';
import { MacroType, Settings } from '../types/settings';
import { loadSettings, saveSettings } from '../services/storageService';
import i18n, { t } from '../localization/i18n';
import Toast from 'react-native-toast-message';

type SettingsStackParamList = {
  SettingsScreen: undefined;
  QuestionnaireScreen: undefined;
};

type QuestionnaireNavigationProp = NativeStackNavigationProp<SettingsStackParamList, 'QuestionnaireScreen'>;

const QuestionnaireScreen: React.FC = () => {
  const { theme } = useTheme();
  const styles = useStyles();
  const navigation = useNavigation<QuestionnaireNavigationProp>();

  const [formData, setFormData] = useState<QuestionnaireFormData>({
    age: '',
    sex: '',
    height: '',
    weight: '',
    activityLevel: '',
    primaryGoal: '',
    goalIntensity: GoalIntensity.MODERATE, // Default intensity
  });

  const [errors, setErrors] = useState<Partial<Record<keyof QuestionnaireFormData, string>>>({});
  const [isCalculating, setIsCalculating] = useState(false);

  const activityLevelOptions = useMemo(() => [
    { label: t('questionnaireScreen.activityLevel.select'), value: '' },
    { label: t('questionnaireScreen.activityLevel.sedentary'), value: ActivityLevel.SEDENTARY },
    { label: t('questionnaireScreen.activityLevel.light'), value: ActivityLevel.LIGHT },
    { label: t('questionnaireScreen.activityLevel.moderate'), value: ActivityLevel.MODERATE },
    { label: t('questionnaireScreen.activityLevel.active'), value: ActivityLevel.ACTIVE },
    { label: t('questionnaireScreen.activityLevel.veryActive'), value: ActivityLevel.VERY_ACTIVE },
  ], [i18n.locale]);

  const sexOptions = useMemo(() => [
    { label: t('questionnaireScreen.sex.select'), value: '' },
    { label: t('questionnaireScreen.sex.male'), value: Sex.MALE },
    { label: t('questionnaireScreen.sex.female'), value: Sex.FEMALE },
  ], [i18n.locale]);

  const primaryGoalOptions = useMemo(() => [
    { label: t('questionnaireScreen.primaryGoal.select'), value: '' },
    { label: t('questionnaireScreen.primaryGoal.loseWeight'), value: PrimaryGoal.LOSE_WEIGHT },
    { label: t('questionnaireScreen.primaryGoal.maintainWeight'), value: PrimaryGoal.MAINTAIN_WEIGHT },
    { label: t('questionnaireScreen.primaryGoal.gainMuscle'), value: PrimaryGoal.GAIN_MUSCLE },
  ], [i18n.locale]);

  const goalIntensityOptions = useMemo(() => [
    { label: t('questionnaireScreen.goalIntensity.mild'), value: GoalIntensity.MILD },
    { label: t('questionnaireScreen.goalIntensity.moderate'), value: GoalIntensity.MODERATE },
    { label: t('questionnaireScreen.goalIntensity.aggressive'), value: GoalIntensity.AGGRESSIVE },
  ], [i18n.locale]);


  const handleInputChange = (field: keyof QuestionnaireFormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Partial<Record<keyof QuestionnaireFormData, string>> = {};
    const ageNum = parseFloat(formData.age);
    const heightNum = parseFloat(formData.height);
    const weightNum = parseFloat(formData.weight);

    if (!formData.age.trim() || isNaN(ageNum) || ageNum <= 0 || ageNum > 120) {
      newErrors.age = t('questionnaireScreen.validation.invalidAge');
    }
    if (formData.sex === '') {
      newErrors.sex = t('questionnaireScreen.validation.selectSex');
    }
    if (!formData.height.trim() || isNaN(heightNum) || heightNum <= 50 || heightNum > 250) {
      newErrors.height = t('questionnaireScreen.validation.invalidHeight');
    }
    if (!formData.weight.trim() || isNaN(weightNum) || weightNum <= 20 || weightNum > 300) {
      newErrors.weight = t('questionnaireScreen.validation.invalidWeight');
    }
    if (formData.activityLevel === '') {
      newErrors.activityLevel = t('questionnaireScreen.validation.selectActivityLevel');
    }
    if (formData.primaryGoal === '') {
      newErrors.primaryGoal = t('questionnaireScreen.validation.selectPrimaryGoal');
    }
    if (formData.primaryGoal !== PrimaryGoal.MAINTAIN_WEIGHT && !formData.goalIntensity) {
        newErrors.goalIntensity = t('questionnaireScreen.validation.selectGoalIntensity');
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const calculateGoals = (): CalculatedGoals | null => {
    const age = parseFloat(formData.age);
    const height = parseFloat(formData.height);
    const weight = parseFloat(formData.weight);

    // BMR (Mifflin-St Jeor)
    let bmr: number;
    if (formData.sex === Sex.MALE) {
      bmr = 10 * weight + 6.25 * height - 5 * age + 5;
    } else {
      bmr = 10 * weight + 6.25 * height - 5 * age - 161;
    }

    // TDEE
    let activityMultiplier = 1.2;
    switch (formData.activityLevel) {
      case ActivityLevel.SEDENTARY: activityMultiplier = 1.2; break;
      case ActivityLevel.LIGHT: activityMultiplier = 1.375; break;
      case ActivityLevel.MODERATE: activityMultiplier = 1.55; break;
      case ActivityLevel.ACTIVE: activityMultiplier = 1.725; break;
      case ActivityLevel.VERY_ACTIVE: activityMultiplier = 1.9; break;
    }
    const tdee = bmr * activityMultiplier;

    // Calorie Goal
    let calorieAdjustment = 0;
    if (formData.primaryGoal !== PrimaryGoal.MAINTAIN_WEIGHT) {
      switch (formData.goalIntensity) {
        case GoalIntensity.MILD: calorieAdjustment = (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT ? -300 : 250); break;
        case GoalIntensity.MODERATE: calorieAdjustment = (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT ? -500 : 400); break;
        case GoalIntensity.AGGRESSIVE: calorieAdjustment = (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT ? -700 : 600); break;
      }
    }
    let calorieGoal = tdee + calorieAdjustment;

    // Ensure calorie goal is not below minimums
    const minCalories = formData.sex === Sex.FEMALE ? 1200 : 1500;
    if (calorieGoal < minCalories) {
        calorieGoal = minCalories;
        Toast.show({ type: 'info', text1: t('questionnaireScreen.toast.minCaloriesAdjustedTitle'), text2: t('questionnaireScreen.toast.minCaloriesAdjustedMessage', { calories: minCalories }), position: 'bottom' });
    }
    if (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT && calorieGoal >= tdee) {
        calorieGoal = tdee - 100; // Ensure at least a small deficit
    }
    if (formData.primaryGoal === PrimaryGoal.GAIN_MUSCLE && calorieGoal <= tdee) {
        calorieGoal = tdee + 100; // Ensure at least a small surplus
    }


    // Macros
    let proteinPerKg = 1.8;
    if (formData.primaryGoal === PrimaryGoal.GAIN_MUSCLE) proteinPerKg = 2.0;
    if (age > 65) proteinPerKg = Math.max(1.2, proteinPerKg - 0.4); // Adjust for older adults

    const proteinGrams = proteinPerKg * weight;
    const proteinCalories = proteinGrams * 4;

    const fatPercentage = 0.25; // 25% of calories from fat
    const fatCalories = calorieGoal * fatPercentage;
    const fatGrams = fatCalories / 9;

    const carbCalories = calorieGoal - proteinCalories - fatCalories;
    const carbGrams = carbCalories / 4;

    return {
      calories: Math.round(calorieGoal),
      protein: Math.round(proteinGrams),
      carbs: Math.round(carbGrams),
      fat: Math.round(fatGrams),
    };
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      Toast.show({ type: 'error', text1: t('questionnaireScreen.validation.fixErrors'), position: 'bottom' });
      return;
    }
    setIsCalculating(true);
    try {
      const calculated = calculateGoals();
      if (calculated) {
        const currentSettings = await loadSettings();
        const updatedSettings: Settings = {
          ...currentSettings,
          dailyGoals: calculated,
        };
        await saveSettings(updatedSettings);
        Toast.show({ type: 'success', text1: t('questionnaireScreen.toast.goalsCalculated'), position: 'bottom' });
        navigation.goBack();
      } else {
        Alert.alert(t('questionnaireScreen.error.calculationFailedTitle'), t('questionnaireScreen.error.calculationFailedMessage'));
      }
    } catch (error) {
      console.error("Error saving estimated goals:", error);
      Alert.alert(t('questionnaireScreen.error.genericSaveTitle'), t('questionnaireScreen.error.genericSaveMessage'));
    } finally {
      setIsCalculating(false);
    }
  };

  const renderPicker = (
    label: string,
    selectedValue: string | number,
    onValueChange: (itemValue: any, itemIndex: number) => void,
    items: { label: string, value: string | number }[],
    error?: string
  ) => (
    <View style={styles.inputContainer}>
      <Text style={styles.label}>{label}</Text>
      <View style={[styles.pickerWrapper, error ? styles.errorBorder : {}]}>
        <Picker
          selectedValue={selectedValue}
          onValueChange={onValueChange}
          style={[styles.picker, Platform.OS === 'android' ? { color: theme.colors.text, backgroundColor: theme.colors.background } : {}]}
          itemStyle={[styles.pickerItem, Platform.OS === 'ios' ? {color: theme.colors.text} : {}]}
          dropdownIconColor={theme.colors.text}
        >
          {items.map(item => <Picker.Item key={item.value.toString()} label={item.label} value={item.value} />)}
        </Picker>
      </View>
      {error && <Text style={styles.errorText}>{error}</Text>}
    </View>
  );

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.scrollContentContainer} keyboardShouldPersistTaps="handled">
      <Text h4 style={styles.title}>{t('questionnaireScreen.title')}</Text>

      <Input
        label={t('questionnaireScreen.ageLabel')}
        placeholder={t('questionnaireScreen.agePlaceholder')}
        keyboardType="numeric"
        value={formData.age}
        onChangeText={val => handleInputChange('age', val)}
        errorMessage={errors.age}
        inputStyle={{ textAlign: I18nManager.isRTL ? 'right' : 'left', color: theme.colors.text}}
        labelStyle={styles.label}
        errorStyle={styles.errorText}
        containerStyle={styles.inputContainer}
      />

      {renderPicker(t('questionnaireScreen.sexLabel'), formData.sex, (val) => handleInputChange('sex', val), sexOptions, errors.sex)}

      <Input
        label={t('questionnaireScreen.heightLabel')}
        placeholder={t('questionnaireScreen.heightPlaceholder')}
        keyboardType="numeric"
        value={formData.height}
        onChangeText={val => handleInputChange('height', val)}
        errorMessage={errors.height}
        rightIcon={<Text style={styles.unitText}>cm</Text>}
        inputStyle={{ textAlign: I18nManager.isRTL ? 'right' : 'left', color: theme.colors.text}}
        labelStyle={styles.label}
        errorStyle={styles.errorText}
        containerStyle={styles.inputContainer}
      />

      <Input
        label={t('questionnaireScreen.weightLabel')}
        placeholder={t('questionnaireScreen.weightPlaceholder')}
        keyboardType="numeric"
        value={formData.weight}
        onChangeText={val => handleInputChange('weight', val)}
        errorMessage={errors.weight}
        rightIcon={<Text style={styles.unitText}>kg</Text>}
        inputStyle={{ textAlign: I18nManager.isRTL ? 'right' : 'left', color: theme.colors.text}}
        labelStyle={styles.label}
        errorStyle={styles.errorText}
        containerStyle={styles.inputContainer}
      />

      {renderPicker(t('questionnaireScreen.activityLevelLabel'), formData.activityLevel, (val) => handleInputChange('activityLevel', val), activityLevelOptions, errors.activityLevel)}
      {renderPicker(t('questionnaireScreen.primaryGoalLabel'), formData.primaryGoal, (val) => handleInputChange('primaryGoal', val), primaryGoalOptions, errors.primaryGoal)}

      {formData.primaryGoal && formData.primaryGoal !== PrimaryGoal.MAINTAIN_WEIGHT && (
        renderPicker(t('questionnaireScreen.goalIntensityLabel'), formData.goalIntensity || '', (val) => handleInputChange('goalIntensity', val), goalIntensityOptions, errors.goalIntensity)
      )}

      <Button
        title={t('questionnaireScreen.calculateButton')}
        onPress={handleSubmit}
        buttonStyle={styles.button}
        loading={isCalculating}
        disabled={isCalculating}
      />
    </ScrollView>
  );
};

const useStyles = makeStyles((theme) => ({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  scrollContentContainer: {
    padding: 20,
    paddingBottom: 40,
  },
  title: {
    marginBottom: 20,
    textAlign: 'center',
    color: theme.colors.text,
  },
  inputContainer: {
    marginBottom: 15,
  },
  label: {
    color: theme.colors.secondary,
    fontWeight: 'bold',
    marginBottom: 5,
    fontSize: 16,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
  unitText: {
    color: theme.colors.secondary,
    fontSize: 16,
  },
  pickerWrapper: {
    borderColor: theme.colors.grey3,
    borderWidth: 1,
    borderRadius: 5,
    backgroundColor: theme.colors.background, // Ensure picker background matches
  },
  picker: {
    height: Platform.OS === 'ios' ? 120 : 50,
    width: '100%',
  },
  pickerItem: {
     // For iOS, text color is set here. Android uses picker's color prop.
     textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
  errorText: {
    color: theme.colors.error,
    marginTop: 3,
    fontSize: 12,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
  errorBorder: {
    borderColor: theme.colors.error,
  },
  button: {
    marginTop: 20,
    backgroundColor: theme.colors.primary,
    borderRadius: 8,
  },
}));

export default QuestionnaireScreen;
---------- END QuestionnaireScreen.tsx ----------


---------- RegisterScreen.tsx ----------
// src/screens/RegisterScreen.tsx
import React, { useState } from 'react';
import { View, StyleSheet, Alert, TouchableOpacity, SafeAreaView } from 'react-native';
import { Input, Button, Text, Icon, useTheme } from '@rneui/themed';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { AuthStackParamList } from '../navigation/AppNavigator';
import { registerUser } from '../services/authService';

type RegisterScreenNavigationProp = NativeStackNavigationProp<AuthStackParamList, 'Register'>;

const RegisterScreen: React.FC = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const navigation = useNavigation<RegisterScreenNavigationProp>();
    const { theme } = useTheme();

    const handleRegister = async () => {
        if (!email || !password) {
            Alert.alert('Missing Fields', 'Please fill in all fields.');
            return;
        }
        if (password.length < 8) {
            Alert.alert('Password Too Short', 'Password must be at least 8 characters long.');
            return;
        }
        setIsLoading(true);
        try {
            const response = await registerUser(email, password);
            Alert.alert(
                'Check Your Email',
                response.message,
                [{ text: 'OK', onPress: () => navigation.navigate('Login') }]
            );
        } catch (error: any) {
            // Error is handled and alerted by the authService
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
            <Text h2 style={[styles.title, { color: theme.colors.text }]}>Create Account</Text>
            <Input
                placeholder="Email"
                leftIcon={<Icon name="envelope" type="font-awesome" size={20} color={theme.colors.grey3} />}
                onChangeText={setEmail}
                value={email}
                keyboardType="email-address"
                autoCapitalize="none"
                containerStyle={styles.inputContainer}
                inputStyle={{ color: theme.colors.text }}
            />
            <Input
                placeholder="Password (min 8 characters)"
                leftIcon={<Icon name="lock" type="font-awesome" size={24} color={theme.colors.grey3} />}
                onChangeText={setPassword}
                value={password}
                secureTextEntry
                containerStyle={styles.inputContainer}
                inputStyle={{ color: theme.colors.text }}
            />
            <Button
                title="Register"
                onPress={handleRegister}
                loading={isLoading}
                buttonStyle={styles.button}
                containerStyle={styles.buttonContainer}
            />
            <TouchableOpacity onPress={() => navigation.navigate('Login')}>
                <Text style={[styles.switchText, { color: theme.colors.primary }]}>Already have an account? Log In</Text>
            </TouchableOpacity>
        </SafeAreaView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    title: {
        marginBottom: 30,
    },
    inputContainer: {
        width: '100%',
        marginBottom: 10,
    },
    button: {
        height: 50,
        borderRadius: 8,
    },
    buttonContainer: {
        width: '100%',
        marginTop: 20,
    },
    switchText: {
        marginTop: 20,
        textDecorationLine: 'underline',
    },
});

export default RegisterScreen;
---------- END RegisterScreen.tsx ----------


---------- SettingsScreen.tsx ----------
// src/screens/SettingsScreen.tsx
import React, { useState, useEffect, useCallback } from "react";
import { View, ScrollView, Alert, StyleSheet, ActivityIndicator, Platform, I18nManager } from "react-native";
import { Text, makeStyles, Button, Icon, useTheme, ListItem } from "@rneui/themed";
import { Picker } from '@react-native-picker/picker';
import DailyGoalsInput from "../components/DailyGoalsInput";
import DataManagementButtons from "../components/DataManagementButtons";
import ThemeSwitch from "../components/ThemeSwitch";
import StatisticsChart from "../components/StatisticsChart";
import AccountSettings from "../components/AccountSettings";
import { loadSettings, saveSettings, loadDailyEntries } from "../services/storageService";
import { Settings, Statistics, MacroType, MacroData, LanguageCode, macros as macroKeysSetting } from "../types/settings";
import { parseISO, isValid, startOfDay } from "date-fns";
import { DailyEntry } from "../types/dailyEntry";
import { useFocusEffect, useNavigation } from "@react-navigation/native";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import Toast from "react-native-toast-message";
import { getUserStatus, addCoinsToUser, BackendError } from "../services/backendService";
import { t } from "../localization/i18n";
import i18n from '../localization/i18n';

interface SettingsScreenProps {
  onThemeChange: (theme: "light" | "dark" | "system") => void;
  onLocaleChange: (locale: LanguageCode) => void;
  onDataOperation: () => void; 
  onLogout: () => void;
}

type SettingsStackParamList = {
  SettingsHome: undefined; 
  Questionnaire: undefined; 
};

type SettingsNavigationProp = NativeStackNavigationProp<SettingsStackParamList, 'SettingsHome'>;

const calculateMovingAverage = (data: MacroData[], windowSize: number): MacroData[] => {
    if (windowSize <= 1) return data;
    const movingAverageData: MacroData[] = [];
    for (let i = 0; i < data.length; i++) {
        const windowStart = Math.max(0, i - windowSize + 1);
        const windowSlice = data.slice(windowStart, i + 1);
        const sum = windowSlice.reduce((acc, point) => acc + point.y, 0);
        const average = sum / windowSlice.length;
        movingAverageData.push({ x: data[i].x, y: Math.round(average) });
    }
    return movingAverageData;
};


const SettingsScreen: React.FC<SettingsScreenProps> = ({ onThemeChange, onLocaleChange, onDataOperation, onLogout }) => {
  const [settings, setSettings] = useState<Settings>({
    theme: "system",
    language: "system",
    dailyGoals: { calories: 0, protein: 0, carbs: 0, fat: 0 },
    settingsHistory: [],
  });

  const [statistics, setStatistics] = useState<Statistics>({
    calories: [], protein: [], carbs: [], fat: [],
  });
  const [chartUpdateKey, setChartUpdateKey] = useState(0);
  const [userCoins, setUserCoins] = useState<number | null>(null);
  const [isLoadingCoins, setIsLoadingCoins] = useState(false);
  const [isAddingCoins, setIsAddingCoins] = useState(false);
  const [isDataLoading, setIsDataLoading] = useState(true); 

  const { theme } = useTheme();
  const styles = useStyles();
  const navigation = useNavigation<SettingsNavigationProp>(); 

  const getStatisticsData = useCallback((
    dailyEntries: DailyEntry[],
    macro: MacroType,
    currentGoals: { [key in MacroType]: number }
  ): MacroData[][] => {
    const intakeDataMap = new Map<number, number>(); 
    const goalDataMap = new Map<number, number>();   

    dailyEntries.forEach((entry) => {
      try {
        const entryDate = parseISO(entry.date);
        if (!isValid(entryDate)) {
          console.warn(`Invalid date in getStatisticsData: ${entry.date}`);
          return;
        }
        const entryTimestamp = startOfDay(entryDate).getTime();

        let intakeValue = 0;
        if (entry.items && Array.isArray(entry.items)) {
          intakeValue = entry.items.reduce((total, item) => {
            if (item.food && typeof item.food[macro] === 'number' && typeof item.grams === 'number' && item.grams > 0) {
              return total + (item.food[macro] / 100) * item.grams;
            }
            return total;
          }, 0);
        }
        intakeDataMap.set(entryTimestamp, (intakeDataMap.get(entryTimestamp) || 0) + Math.round(intakeValue));

        if (macro === "calories") {
          const goalValue = currentGoals[macro] ?? 0;
           if (intakeDataMap.has(entryTimestamp)) {
             goalDataMap.set(entryTimestamp, Math.round(goalValue));
           }
        }
      } catch (parseError) {
        console.error(`Error processing entry ${entry.date} for statistics:`, parseError);
      }
    });

    const sortedTimestamps = Array.from(new Set([...intakeDataMap.keys(), ...goalDataMap.keys()])).sort((a,b) => a - b);
    
    const finalIntakeData: MacroData[] = sortedTimestamps.map(ts => ({
        x: ts,
        y: intakeDataMap.get(ts) || 0
    }));

    const movingAverageData = calculateMovingAverage(finalIntakeData, 7);

    if (macro === "calories") {
        const finalGoalData: MacroData[] = sortedTimestamps.map(ts => ({
            x: ts,
            y: goalDataMap.get(ts) || currentGoals[macro] || 0
        }));
        return [finalIntakeData, movingAverageData, finalGoalData];
    }
    return [finalIntakeData, movingAverageData];
  }, []);


  const updateStatistics = useCallback(async (currentGoals: { [key in MacroType]: number }) => {
    try {
        const loadedEntries = await loadDailyEntries();
        const updatedStats: Statistics = {
            calories: [], protein: [], carbs: [], fat: []
        };
        (macroKeysSetting as readonly MacroType[]).forEach(macro => {
            updatedStats[macro] = getStatisticsData(loadedEntries, macro, currentGoals);
        });
        setStatistics(updatedStats);
        setChartUpdateKey((prevKey) => prevKey + 1);
    } catch (error) {
        console.error("SettingsScreen: Failed to update statistics:", error);
    }
  }, [getStatisticsData]);

  const fetchUserStatus = useCallback(async () => {
    setIsLoadingCoins(true);
    try { 
      const status = await getUserStatus(); 
      setUserCoins(status.coins); 
    }
    catch (error) {
      setUserCoins(null);
      const message = error instanceof BackendError ? error.message : t('backendService.errorNetworkConnection');
      Toast.show({ 
        type: 'error', 
        text1: t('accountSettings.errorLoadCoins'), 
        text2: message, 
        position: 'bottom', 
      });
    }
    finally { setIsLoadingCoins(false); }
  }, [t]);

  useFocusEffect( useCallback(() => {
      let isActive = true;
      setIsDataLoading(true);
      const loadAndProcessData = async () => {
        try {
          const loadedSettings = await loadSettings();
          if (!isActive) return;
          setSettings(loadedSettings);
          navigation.setOptions({ title: t('settingsScreen.title') });
          await fetchUserStatus();
          await updateStatistics(loadedSettings.dailyGoals);
        } catch (error) {
          if (isActive) {
            Alert.alert(t('dailyEntryScreen.errorLoad'), t('dailyEntryScreen.errorLoadMessage'));
          }
        } finally {
          if (isActive) setIsDataLoading(false);
        }
      };
      loadAndProcessData();
      return () => { isActive = false; };
    }, [updateStatistics, fetchUserStatus, navigation, t]) 
  );

  const handleGoalChange = useCallback(async (goalType: MacroType, value: string) => {
    const numericValue = parseFloat(value);
    const validatedValue = isNaN(numericValue) || numericValue < 0 ? 0 : numericValue;

    setSettings((prevSettings) => {
      const updatedGoals = { ...prevSettings.dailyGoals, [goalType]: validatedValue };
      const updatedSettings: Settings = { ...prevSettings, dailyGoals: updatedGoals };
      
      saveSettings(updatedSettings)
        .then(() => {
          updateStatistics(updatedSettings.dailyGoals);
        })
        .catch((error) => {
          Alert.alert(t('dailyEntryScreen.errorSave'), t('dailyEntryScreen.errorSaveMessage'));
        });
      return updatedSettings;
    });
  }, [updateStatistics, t]);


  const localDataOperationHandler = useCallback(async () => {
    setIsDataLoading(true);
    try {
      const reloadedSettings = await loadSettings();
      setSettings(reloadedSettings);
      await updateStatistics(reloadedSettings.dailyGoals);
      await fetchUserStatus();
      onThemeChange(reloadedSettings.theme); 
      onLocaleChange(reloadedSettings.language); 
      
      onDataOperation(); 

      Toast.show({ type: 'info', text1: t('dataManagement.dataReloaded'), position: 'bottom'});
    }
    catch (error) { Alert.alert(t('dailyEntryScreen.errorLoad'), t('dailyEntryScreen.errorLoadMessage')); }
    finally { setIsDataLoading(false); }
  }, [updateStatistics, onThemeChange, onLocaleChange, fetchUserStatus, onDataOperation, t]);

    const handleAddTestCoins = useCallback(async () => {
        setIsAddingCoins(true);
        try { 
            const amount = 10; 
            const updatedStatus = await addCoinsToUser(amount); 
            setUserCoins(updatedStatus.coins); 
            Toast.show({ type: 'success', text1: t('accountSettings.coinsAdded'), text2: `${t('accountSettings.coinBalance')}: ${updatedStatus.coins}`, position: 'bottom' }); 
        }
        catch (error) { 
            const message = error instanceof BackendError ? error.message : t('backendService.errorNetworkConnection');
            Toast.show({ type: 'error', text1: t('accountSettings.errorAddCoins'), text2: message, position: 'bottom' }); 
        }
        finally { setIsAddingCoins(false); }
    }, [t]);

  const handleLanguageChange = (newLanguage: LanguageCode) => {
    setSettings(prev => ({...prev, language: newLanguage}));
    onLocaleChange(newLanguage); 
  };

  const handleNavigateToQuestionnaire = () => {
    navigation.navigate('Questionnaire');
  };

  const handleLogout = () => {
    Alert.alert(
        t('settingsScreen.account.logoutConfirmTitle'),
        t('settingsScreen.account.logoutConfirmMessage'),
        [
            { text: t('confirmationModal.cancel'), style: 'cancel' },
            { text: t('settingsScreen.account.logout'), style: 'destructive', onPress: onLogout },
        ],
        { cancelable: true }
    );
  };

  if (isDataLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
        <Text style={styles.loadingText}>{t('app.initializing')}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.scrollContentContainer} keyboardShouldPersistTaps="handled">
        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.account.title')}</Text>
        <AccountSettings
             userCoins={userCoins}
             isLoadingCoins={isLoadingCoins}
             isAddingCoins={isAddingCoins}
             onAddTestCoins={handleAddTestCoins}
        />

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.account.actions')}</Text>
        <ListItem bottomDivider onPress={handleLogout} containerStyle={styles.logoutItem}>
            <Icon name="logout" type="material-community" color={theme.colors.error} />
            <ListItem.Content>
                <ListItem.Title style={styles.logoutTitle}>
                    {t('settingsScreen.account.logout')}
                </ListItem.Title>
            </ListItem.Content>
            <ListItem.Chevron color={theme.colors.error} />
        </ListItem>

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.general.title')}</Text>
        <ThemeSwitch currentTheme={settings.theme} onToggle={onThemeChange} />

        <ListItem bottomDivider containerStyle={{ backgroundColor: theme.colors.background }}>
            <ListItem.Content>
                <ListItem.Title style={styles.listItemTitle}>{t('settingsScreen.language.title')}</ListItem.Title>
            </ListItem.Content>
        </ListItem>
        <View style={Platform.OS === 'ios' ? {} : styles.pickerContainerAndroid}>
             <Picker
                selectedValue={settings.language}
                onValueChange={(itemValue) => handleLanguageChange(itemValue as LanguageCode)}
                style={[styles.pickerStyle, Platform.OS === 'android' ? { color: theme.colors.text, backgroundColor: theme.colors.background } : {}]}
                itemStyle={[styles.pickerItemStyle, Platform.OS === 'ios' ? { color: theme.colors.text } : {}]}
                dropdownIconColor={theme.colors.text}
            >
                <Picker.Item label={t('settingsScreen.language.system')} value="system" />
                <Picker.Item label={t('settingsScreen.language.english')} value="en" />
                <Picker.Item label={t('settingsScreen.language.russian')} value="ru" />
                <Picker.Item label={t('settingsScreen.language.hebrew')} value="he" />
            </Picker>
        </View>

        <View style={styles.sectionHeaderWithButton}>
            <Text h3 style={[styles.sectionTitle, styles.sectionTitleInline]}>{t('settingsScreen.dailyGoals.title')}</Text>
            <Button
                title={t('settingsScreen.goals.estimateButton')}
                type="outline"
                onPress={handleNavigateToQuestionnaire}
                buttonStyle={styles.estimateButton}
                titleStyle={styles.estimateButtonTitle}
                icon={<Icon name="calculator-variant" type="material-community" color={theme.colors.primary} size={18} />}
            />
        </View>
        <View style={styles.inputGroup}>
            <DailyGoalsInput dailyGoals={settings.dailyGoals} onGoalChange={handleGoalChange} />
        </View>

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.statistics.title')}</Text>
        <View style={styles.chartContainer}>
            <StatisticsChart statistics={statistics} key={`${chartUpdateKey}-${i18n.locale}-${theme.mode}`} />
        </View>

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.dataManagement.title')}</Text>
        <View style={styles.buttonGroup}>
            <DataManagementButtons onDataOperation={localDataOperationHandler} />
        </View>
    </ScrollView>
  );
};

const useStyles = makeStyles((theme) => ({
  container: { flex: 1, backgroundColor: theme.colors.background, },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.colors.background,
  },
  loadingText: {
    marginTop: 10,
    color: theme.colors.text,
    fontSize: 16,
  },
  scrollContentContainer: { padding: 15, paddingBottom: 40, },
  sectionTitle: {
    color: theme.colors.text, marginTop: 25, marginBottom: 15, paddingLeft: 5,
    borderLeftWidth: 3, borderLeftColor: theme.colors.primary,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
    fontSize: 20, fontWeight: 'bold',
  },
  sectionHeaderWithButton: {
    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 25,
    marginBottom: 10, 
  },
  sectionTitleInline: {
    marginTop: 0, 
    marginBottom: 0, 
    borderLeftWidth: 0, 
    paddingLeft: 0,
    flexShrink: 1,
  },
  estimateButton: {
    borderColor: theme.colors.primary,
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 20,
  },
  estimateButtonTitle: {
    color: theme.colors.primary,
    fontSize: 14,
    fontWeight: '600',
    marginLeft: I18nManager.isRTL ? 0 : 5,
    marginRight: I18nManager.isRTL ? 5 : 0,
  },
  listItemTitle: {
    color: theme.colors.text,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
    fontWeight: '500',
  },
  logoutItem: {
    backgroundColor: theme.colors.background,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: theme.colors.divider,
  },
  logoutTitle: {
      color: theme.colors.error,
      textAlign: I18nManager.isRTL ? 'right' : 'left',
      fontWeight: 'bold',
  },
  inputGroup: { marginBottom: 10, paddingHorizontal: 5, },
  buttonGroup: { marginBottom: 10, paddingHorizontal: 5, },
  button: { marginBottom: 10, borderRadius: 8, },
  chartContainer: {
    marginBottom: 20,
  },
  pickerContainerAndroid: {
    backgroundColor: theme.colors.background,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: theme.colors.divider,
    marginBottom: 10,
    marginTop: -5,
  },
  pickerStyle: {
    width: '100%',
    height: Platform.OS === 'ios' ? 120 : 50,
  },
  pickerItemStyle: {
    textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
}));

export default SettingsScreen;
---------- END SettingsScreen.tsx ----------


---------- authService.ts ----------
// src/services/authService.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert } from 'react-native';
import Constants from 'expo-constants';
import { Token } from '../types/token';
import { t } from '../localization/i18n';

// --- Centralized API URL Configuration ---
const getBackendUrl = (): string => {
    const env = Constants.expoConfig?.extra?.env;

    if (__DEV__) {
        if (env?.BACKEND_URL_DEVELOPMENT) {
            return env.BACKEND_URL_DEVELOPMENT;
        }
        console.warn(
            "BACKEND_URL_DEVELOPMENT not found in app.json. Falling back to a default."
        );
        return 'http://127.0.0.1:8000';
    } else {
        if (env?.BACKEND_URL_PRODUCTION) {
            return env.BACKEND_URL_PRODUCTION;
        }
        console.error("FATAL: BACKEND_URL_PRODUCTION is not defined in app.json extra.env.");
        return 'https://api.example.com/not-configured';
    }
};

export const getApiUrl = (): string => {
    const baseUrl = getBackendUrl();
    return baseUrl.endsWith('/api/v1') ? baseUrl : `${baseUrl.replace(/\/$/, '')}/api/v1`;
};

const API_URL = getApiUrl();

// --- Auth Event Emitter for 401 Handling ---
type LogoutListener = (() => void) | null;
let onLogout: LogoutListener = null;

export const setLogoutListener = (listener: LogoutListener) => {
    onLogout = listener;
};

export const triggerLogout = () => {
    console.log("Global logout triggered.");
    removeAuthToken();
    if (onLogout) {
        onLogout();
    } else {
        console.warn('Logout triggered, but no UI listener was set.');
    }
};

// --- Token Management ---
const AUTH_TOKEN_KEY = '@MacroTracker:authToken';

export const getAuthToken = async (): Promise<Token | null> => {
    try {
        const tokenJson = await AsyncStorage.getItem(AUTH_TOKEN_KEY);
        return tokenJson ? JSON.parse(tokenJson) : null;
    } catch (error) {
        console.error('Failed to parse auth token from AsyncStorage. Clearing corrupted token.', error);
        await AsyncStorage.removeItem(AUTH_TOKEN_KEY);
        return null;
    }
};

export const setAuthToken = async (token: Token): Promise<void> => {
    await AsyncStorage.setItem(AUTH_TOKEN_KEY, JSON.stringify(token));
};

export const removeAuthToken = async (): Promise<void> => {
    await AsyncStorage.removeItem(AUTH_TOKEN_KEY);
};

// --- API Calls ---
async function fetchAuthApi<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${API_URL}/auth${endpoint}`;
    
    const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...(options.headers as Record<string, string> || {})
    };

    try {
        const response = await fetch(url, { ...options, headers });

        if (response.status === 204) {
             return {} as T;
        }

        const responseBody = await response.json();

        if (!response.ok) {
            const errorMessage = responseBody.detail || 'An unknown error occurred.';
            const detailMessage = typeof errorMessage === 'string' ? errorMessage : JSON.stringify(errorMessage);
            throw new Error(detailMessage);
        }
        return responseBody as T;
    } catch (error: any) {
        Alert.alert('Authentication Error', error.message || 'Could not connect to the server.');
        throw error;
    }
}

export const registerUser = async (email: string, password: string): Promise<{message: string}> => {
    return fetchAuthApi<{message: string}>('/register', {
        method: 'POST',
        body: JSON.stringify({ email, password }),
    });
};

export const loginUser = async (email: string, password: string): Promise<Token> => {
    const details = { 'username': email, 'password': password };
    const formBody = Object.entries(details)
        .map(([key, value]) => encodeURIComponent(key) + '=' + encodeURIComponent(value))
        .join('&');

    const url = `${API_URL}/auth/login`;

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' },
            body: formBody,
        });
        
        const responseBody = await response.json();

        if (!response.ok) {
            throw new Error(responseBody.detail || 'Login failed');
        }
        return responseBody;
    } catch (error: any) {
        Alert.alert('Login Error', error.message || 'Could not connect to the server.');
        throw error;
    }
};

export const refreshAuthToken = async (refreshToken: string): Promise<Token | null> => {
    try {
        const newTokens = await fetchAuthApi<Token>('/refresh-token', {
             method: 'POST',
             body: JSON.stringify({ refresh_token: refreshToken })
        });
        return newTokens;
    } catch (error) {
        console.error("Token refresh failed:", error);
        return null;
    }
};

export const logoutUser = async (): Promise<void> => {
    try {
        const tokenData = await getAuthToken();
        if (tokenData?.access_token) {
            await fetchAuthApi('/logout', {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${tokenData.access_token}` }
            });
        }
    } catch (error) {
        console.warn("Logout API call failed, but logging out locally anyway.", error);
    } finally {
        await removeAuthToken();
    }
}

export const requestPasswordReset = async (email: string): Promise<{message: string}> => {
    return fetchAuthApi<{message: string}>('/request-password-reset', {
        method: 'POST',
        body: JSON.stringify({ email }),
    });
};
---------- END authService.ts ----------


---------- backendService.ts ----------
// src/services/backendService.ts
import { getApiUrl, getAuthToken, setAuthToken, refreshAuthToken, triggerLogout } from './authService';
import { EstimatedFoodItem, Macros, MacrosWithFoodName } from '../types/macros';
import { Platform } from 'react-native';
import i18n, { t } from '../localization/i18n';
import { Token } from '../types/token';

const BASE_URL = getApiUrl();
console.log(`Backend Service Initialized. Base URL: ${BASE_URL}`);

interface GramsResponse { grams: number; }
export interface UserStatus { client_id: string; coins: number; is_verified: boolean; }
interface BackendErrorDetail { loc?: (string | number)[]; msg?: string; type?: string; }
interface BackendErrorResponse { detail?: string | BackendErrorDetail[]; }

export class BackendError extends Error {
    status: number; detail?: string | BackendErrorDetail[]; requestId?: string | null;
    constructor(message: string, status: number, detail?: string | BackendErrorDetail[], requestId?: string | null) {
        super(message); this.name = 'BackendError'; this.status = status; this.detail = detail; this.requestId = requestId;
    }
}

let isRefreshing = false;
let failedQueue: { resolve: (value: any) => void; reject: (reason?: any) => void; endpoint: string; options: RequestInit; needsAuth: boolean; }[] = [];

const processFailedQueue = (error: any, token: Token | null) => {
    failedQueue.forEach(prom => {
        if (error || !token) {
            prom.reject(error);
        } else {
            prom.resolve(fetchBackend(prom.endpoint, prom.options, prom.needsAuth));
        }
    });
    failedQueue = [];
};

async function fetchBackend<T>( endpoint: string, options: RequestInit = {}, needsAuth: boolean = true ): Promise<T> {
    const url = `${BASE_URL}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;
    
    const tokenData = needsAuth ? await getAuthToken() : null;
    
    if (needsAuth && !tokenData?.access_token) {
        triggerLogout();
        throw new BackendError(t('backendService.errorAuthFailed'), 401, "Authentication token is missing.");
    }

    const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Platform': Platform.OS,
        'Accept-Language': i18n.locale,
        ...(options.headers as Record<string, string> || {})
    };
    if (needsAuth && tokenData) {
        headers['Authorization'] = `Bearer ${tokenData.access_token}`;
    }

    try {
        const response = await fetch(url, { ...options, headers });
        const requestId = response.headers.get("X-Request-ID");

        if (response.status === 401 && needsAuth) {
            if (isRefreshing) {
                return new Promise((resolve, reject) => {
                    failedQueue.push({ resolve, reject, endpoint, options, needsAuth });
                });
            }

            isRefreshing = true;
            const currentRefreshToken = tokenData?.refresh_token;

            if (!currentRefreshToken) {
                triggerLogout();
                isRefreshing = false;
                throw new BackendError(t('backendService.errorAuthFailed'), 401, "Refresh token not found.");
            }
            
            const newTokens = await refreshAuthToken(currentRefreshToken);

            if (newTokens?.access_token) {
                await setAuthToken(newTokens);
                processFailedQueue(null, newTokens);
                return fetchBackend(endpoint, options, needsAuth);
            } else {
                const refreshError = new BackendError(t('backendService.errorAuthFailed'), 401, "Session expired. Please log in again.");
                processFailedQueue(refreshError, null);
                triggerLogout();
                throw refreshError;
            }
        }
        
        if (response.status === 204) return null as T;

        const contentType = response.headers.get("content-type");
        const isJson = contentType && contentType.includes("application/json");
        const responseBody = isJson ? await response.json() : await response.text();

        if (!response.ok) {
            let errorMessage = t('backendService.errorRequestFailedWithServerMsg', { status: response.status });
            if (isJson && responseBody?.detail) {
                errorMessage = typeof responseBody.detail === 'string' ? responseBody.detail : JSON.stringify(responseBody.detail);
            }
            
            if (response.status === 402) errorMessage = t('backendService.errorInsufficientCoins');
            if (response.status === 403) errorMessage = responseBody?.detail || t('backendService.errorPermissionDenied');
            if (response.status === 429) errorMessage = t('backendService.errorTooManyRequests');

            throw new BackendError(errorMessage, response.status, responseBody?.detail, requestId);
        }
        return responseBody as T;

    } catch (error) {
        if (error instanceof BackendError) throw error;
        
        let networkErrorMessage: string;
        if (error instanceof Error && error.name === 'AbortError') {
            networkErrorMessage = t('backendService.errorNetworkTimeout');
        } else if (error instanceof Error && (error.message.includes('Network request failed') || error.message.includes('Failed to fetch'))) {
            networkErrorMessage = t('backendService.errorNetwork') + t('backendService.errorNetworkConnection');
        } else if (error instanceof Error) {
            networkErrorMessage = t('backendService.errorNetwork') + t('backendService.errorNetworkDetails', { error: error.message });
        } else {
            networkErrorMessage = t('backendService.errorNetwork') + t('backendService.errorNetworkUnknown');
        }
        
        throw new BackendError(networkErrorMessage, 0, networkErrorMessage, null);
    } finally {
        if(isRefreshing && endpoint === '/auth/refresh-token') {
             isRefreshing = false;
        }
    }
}

export const getUserStatus = async (): Promise<UserStatus> => fetchBackend<UserStatus>('/users/status');
export const getMacrosForRecipe = async (foodName: string, ingredients: string): Promise<MacrosWithFoodName> => fetchBackend<MacrosWithFoodName>('/ai/macros_recipe', { method: 'POST', body: JSON.stringify({ food_name: foodName, ingredients }) });
export const getMacrosForImageSingle = async (image_base64: string, mime_type: string): Promise<MacrosWithFoodName> => fetchBackend<MacrosWithFoodName>('/ai/macros_image_single', { method: 'POST', body: JSON.stringify({ image_base64, mime_type }) });
export const getMacrosForImageMultiple = async (image_base64: string, mime_type: string): Promise<EstimatedFoodItem[]> => fetchBackend<EstimatedFoodItem[]>('/ai/macros_image_multiple', { method: 'POST', body: JSON.stringify({ image_base64, mime_type }) });
export const getMacrosForTextMultiple = async (text: string): Promise<EstimatedFoodItem[]> => fetchBackend<EstimatedFoodItem[]>('/ai/macros_text_multiple', { method: 'POST', body: JSON.stringify({ text }) });
export const estimateGramsNaturalLanguage = async (foodName: string, quantityDescription: string): Promise<number> => {
    const response = await fetchBackend<GramsResponse>('/ai/grams_natural_language', { method: 'POST', body: JSON.stringify({ food_name: foodName, quantity_description: quantityDescription }) });
    if (response === null || typeof response.grams !== 'number') throw new BackendError(t('backendService.errorEstimateGramsUnexpectedResponse'), 500, "Invalid response format");
    return response.grams;
};
export const addCoinsToUser = async (amount: number): Promise<UserStatus> => {
    if (amount <= 0) throw new BackendError(t('backendService.errorAddCoinsPositive'), 400, "Amount must be positive.");
    return fetchBackend<UserStatus>('/users/add_coins', { method: 'POST', body: JSON.stringify({ amount }) });
};
---------- END backendService.ts ----------


---------- clientIDService.ts ----------
// src/services/clientIDService.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import uuid from 'react-native-uuid';

const CLIENT_ID_KEY = '@MacroTracker:clientId';
let currentClientId: string | null = null; // In-memory cache

export const getClientId = async (): Promise<string> => {
  if (currentClientId) {
    return currentClientId;
  }

  try {
    let clientId = await AsyncStorage.getItem(CLIENT_ID_KEY);
    if (!clientId) {
      clientId = uuid.v4() as string;
      console.log('Generated new client ID:', clientId);
      await AsyncStorage.setItem(CLIENT_ID_KEY, clientId);
    } else {
      console.log('Retrieved existing client ID:', clientId);
    }
    currentClientId = clientId;
    return clientId;
  } catch (error) {
    console.error('Error handling client ID:', error);
    // Fallback or throw error depending on desired behavior
    // For now, generating a temporary one if storage fails
    return uuid.v4() as string;
  }
};

// Optional: Function to clear ID for testing
export const clearClientId = async (): Promise<void> => {
    currentClientId = null;
    try {
        await AsyncStorage.removeItem(CLIENT_ID_KEY);
        console.log('Client ID cleared.');
    } catch (error) {
        console.error('Error clearing client ID:', error);
    }
};
---------- END clientIDService.ts ----------


---------- foodService.ts ----------
// src/services/foodService.ts
import { Food } from '../types/food';
import { saveFoods, loadFoods } from './storageService';
import 'react-native-get-random-values';
import { v4 as uuidv4 } from 'uuid';

export const createFood = async (foodData: Omit<Food, 'id' | 'createdAt'>): Promise<Food> => {
  const newFood: Food = {
    id: uuidv4(),
    ...foodData,
    createdAt: new Date().toISOString(),
  };
  const { items: currentFoods } = await loadFoods(); // Load all foods to append
  currentFoods.push(newFood);
  await saveFoods(currentFoods);
  return newFood;
};

export const getFoods = async (
  searchTerm?: string,
  sortOption: 'name' | 'newest' | 'oldest' = 'name'
): Promise<{ items: Food[], total: number }> => {
  // Load all foods first.
  const { items: allFoodsFromStorage } = await loadFoods();

  let filteredFoods = allFoodsFromStorage;

  if (searchTerm && searchTerm.trim() !== "") {
    const lowercasedSearchTerm = searchTerm.toLowerCase().trim();
    filteredFoods = allFoodsFromStorage.filter(food =>
      food.name.toLowerCase().includes(lowercasedSearchTerm)
    );
  }

  // Sorting logic
  if (sortOption === 'name') {
      filteredFoods.sort((a, b) => a.name.localeCompare(b.name));
  } else {
      const fallbackDate = '2020-01-01T00:00:00.000Z'; // For items without a creation date
      filteredFoods.sort((a, b) => {
          const dateA = new Date(a.createdAt || fallbackDate).getTime();
          const dateB = new Date(b.createdAt || fallbackDate).getTime();
          return sortOption === 'newest' ? dateB - dateA : dateA - dateB;
      });
  }

  const totalFiltered = filteredFoods.length;

  // Return all filtered and sorted items without pagination
  return { items: filteredFoods, total: totalFiltered };
};

export const updateFood = async (updatedFood: Food): Promise<Food> => {
  const { items: foods } = await loadFoods(); // Load all foods to find and update
  const index = foods.findIndex((f) => f.id === updatedFood.id);
  if (index === -1) {
    throw new Error('Food not found'); // Throw an error if not found
  }
  foods[index] = updatedFood;
  await saveFoods(foods);
  return updatedFood;
};

export const deleteFood = async (foodId: string): Promise<void> => {
  const { items: foods } = await loadFoods(); // Load all to filter
  const filteredFoods = foods.filter((f) => f.id !== foodId);
  await saveFoods(filteredFoods);
};
---------- END foodService.ts ----------


---------- storageService.ts ----------
// src/services/storageService.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import { DailyEntry } from '../types/dailyEntry';
import { Food } from '../types/food';
import { Settings, LanguageCode } from '../types/settings';

const DAILY_ENTRIES_KEY = 'dailyEntries';
const FOODS_KEY = 'foods';
const SETTINGS_KEY = 'settings';
const RECENT_FOODS_KEY = 'recentFoods';
const RECENT_SERVINGS_KEY = 'recentServings';

export type RecentServings = { [foodId: string]: number[] };

export const saveDailyEntries = async (entries: DailyEntry[]): Promise<void> => {
  try {
    await AsyncStorage.setItem(DAILY_ENTRIES_KEY, JSON.stringify(entries));
  } catch (error) {
    console.error('Error saving daily entries:', error);
    throw error;
  }
};

export const loadDailyEntries = async (): Promise<DailyEntry[]> => {
  try {
    const entriesJson = await AsyncStorage.getItem(DAILY_ENTRIES_KEY);
    return entriesJson ? JSON.parse(entriesJson) : [];
  } catch (error) {
    console.error('Failed to parse daily entries from AsyncStorage. Clearing corrupted data.', error);
    await AsyncStorage.removeItem(DAILY_ENTRIES_KEY);
    return [];
  }
};

export const saveFoods = async (foods: Food[]): Promise<void> => {
  try {
    await AsyncStorage.setItem(FOODS_KEY, JSON.stringify(foods));
  } catch (error) {
    console.error('Error saving foods:', error);
    throw error;
  }
};

export const loadFoods = async (offset: number = 0, limit?: number): Promise<{ items: Food[], total: number }> => {
  try {
    const foodsJson = await AsyncStorage.getItem(FOODS_KEY);
    const allFoods: Food[] = foodsJson ? JSON.parse(foodsJson) : [];
    const total = allFoods.length;

    if (limit === undefined) {
      return { items: allFoods, total };
    }
    
    const paginatedFoods = allFoods.slice(offset, offset + limit);
    return { items: paginatedFoods, total };
  } catch (error) {
    console.error('Failed to parse foods from AsyncStorage. Clearing corrupted data.', error);
    await AsyncStorage.removeItem(FOODS_KEY);
    return { items: [], total: 0 };
  }
};

export const saveSettings = async (settings: Settings): Promise<void> => {
  try {
    await AsyncStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));
  } catch (error) {
    console.error('Error saving settings:', error);
    throw error;
  }
};

export const loadSettings = async (): Promise<Settings> => {
  const defaultSettings: Settings = {
    theme: 'system',
    language: 'system',
    dailyGoals: { calories: 2000, protein: 50, carbs: 200, fat: 70 },
    settingsHistory: []
  };

  try {
    const settingsJson = await AsyncStorage.getItem(SETTINGS_KEY);
    if (!settingsJson) return defaultSettings;
    
    const loadedSettings = JSON.parse(settingsJson);

    return {
      ...defaultSettings,
      ...loadedSettings,
      dailyGoals: {
        ...defaultSettings.dailyGoals,
        ...(loadedSettings.dailyGoals || {})
      }
    };
  } catch (error) {
    console.error('Failed to parse settings from AsyncStorage. Clearing corrupted data and returning defaults.', error);
    await AsyncStorage.removeItem(SETTINGS_KEY);
    return defaultSettings;
  }
};

export const clearAllData = async (): Promise<void> => {
  try {
    const clientIdKey = '@MacroTracker:clientId';
    const authTokenKey = '@MacroTracker:authToken';
    const [clientId, authToken] = await AsyncStorage.multiGet([clientIdKey, authTokenKey]);
    
    await AsyncStorage.clear();
    
    const itemsToKeep: [string, string][] = [];
    if (clientId?.[1]) itemsToKeep.push(clientId as [string, string]);
    if (authToken?.[1]) itemsToKeep.push(authToken as [string, string]);

    if (itemsToKeep.length > 0) {
        await AsyncStorage.multiSet(itemsToKeep);
    }
    console.log('Application data cleared (excluding auth/client ID).');
  } catch (error) {
    console.error('Error clearing data:', error);
    throw error;
  }
};

export const saveRecentFoods = async (foods: Food[]) => {
    try {
        await AsyncStorage.setItem(RECENT_FOODS_KEY, JSON.stringify(foods));
    } catch (error) {
        console.error('Error saving recent foods:', error);
        throw error;
    }
};

export const loadRecentFoods = async (): Promise<Food[]> => {
    try {
        const foodsJson = await AsyncStorage.getItem(RECENT_FOODS_KEY);
        return foodsJson ? JSON.parse(foodsJson) : [];
    } catch (error) {
        console.error('Failed to parse recent foods from AsyncStorage. Clearing corrupted data.', error);
        await AsyncStorage.removeItem(RECENT_FOODS_KEY);
        return [];
    }
};

export const saveRecentServings = async (servings: RecentServings): Promise<void> => {
    try {
        await AsyncStorage.setItem(RECENT_SERVINGS_KEY, JSON.stringify(servings));
    } catch (error) {
        console.error('Error saving recent servings:', error);
        throw error;
    }
};

export const loadRecentServings = async (): Promise<RecentServings> => {
    try {
        const servingsJson = await AsyncStorage.getItem(RECENT_SERVINGS_KEY);
        return servingsJson ? JSON.parse(servingsJson) : {};
    } catch (error) {
        console.error('Failed to parse recent servings from AsyncStorage. Clearing corrupted data.', error);
        await AsyncStorage.removeItem(RECENT_SERVINGS_KEY);
        return {};
    }
};
---------- END storageService.ts ----------


---------- dailyEntry.ts ----------
// types/dailyEntry.ts (Modified)
import { Food } from "./food";

export interface DailyEntryItem {
  food: Food;
  grams: number;
}

export interface DailyEntry {
  date: string; // YYYY-MM-DD format
  items: DailyEntryItem[];
  goals?: {  // Optional goals
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
  };
}

export interface FoodItem { //No changes here.
    id: string;
    name: string;
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
  }
---------- END dailyEntry.ts ----------


---------- food.ts ----------
// types/food.ts
export interface Food {
  id: string;
  name: string;
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  createdAt: string; // ISO 8601 date string
}

// Data structure for sharing food items. ID and createdAt are omitted.
export type SharedFoodData = Omit<Food, 'id' | 'createdAt'>;
---------- END food.ts ----------


---------- macros.ts ----------
// src/types/macros.ts

// Basic macro structure
export interface Macros {
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
  }
  
  // Macros structure including the identified food name
  export interface MacrosWithFoodName extends Macros {
    foodName: string;
  }
  
  /**
   * Represents a single food item estimated from an image,
   * including its name, estimated weight, and macros per 100g.
   * Matches the structure expected/returned by the backend service.
   */
  export interface EstimatedFoodItem {
    foodName: string;
    estimatedWeightGrams: number;
    calories_per_100g: number;
    protein_per_100g: number;
    carbs_per_100g: number;
    fat_per_100g: number;
  }
---------- END macros.ts ----------


---------- openRouterTypes.ts ----------
// src/utils/types.ts

// =====================================
// Consolidated OpenRouter Type Definitions
// =====================================

// --- Content Parts (for multi-modal input like images) ---
export type OpenRouterContentPart =
  | { type: "text"; text: string }
  | { type: "image_url"; image_url: { url: string; detail?: "low" | "high" | "auto" } };

// --- Message Structure ---
// Allows content to be a simple string OR an array of content parts for vision models
export interface OpenRouterMessage {
  role: "user" | "assistant" | "system";
  content: string | OpenRouterContentPart[]; // Consolidated definition
  name?: string; // Optional name field
}

// --- Choice Structure (within the response) ---
// This structure aligns with standard Chat Completion APIs (like OpenAI/OpenRouter)
export interface OpenRouterChatChoice {
  index: number;
  message: OpenRouterMessage; // Contains the actual message content and role
  logprobs?: any | null; // Optional log probabilities (use a specific type if known)
  finish_reason: string | null; // Can be null sometimes
  // text?: string; // Usually the content is inside message.content, keep optional if some models return it differently
}

// --- API Usage Information ---
export interface OpenRouterUsage {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
}

// --- Main Chat Completion Response Structure ---
// Consolidates the fields from both previous declarations
export interface OpenRouterChatCompletionResponse {
  id: string;
  object: string; // Typically "chat.completion"
  created: number; // Timestamp
  model: string; // Model used
  choices: OpenRouterChatChoice[]; // Array of choices using the defined structure
  usage?: OpenRouterUsage; // Usage information is often optional
  // Add any other relevant fields you might encounter from OpenRouter
  // system_fingerprint?: string; // Example optional field
}


// =====================================
// Removed Redundant/Conflicting Declarations:
// =====================================

/*
// REMOVED - Duplicate/Outdated OpenRouterMessage
export interface OpenRouterMessage {
  role: "user" | "assistant" | "system"; // Add system role
  content: string;
}

// REMOVED - Less standard choice structure (often message.content is used instead of top-level text)
export interface OpenRouterChoice {
  text: any; // 'any' is vague, content is usually in message
  message: OpenRouterMessage; // This duplicates content info if 'text' is also present
  finish_reason?: string;
  index?: number;
}

// REMOVED - Duplicate/Simpler OpenRouterChatCompletionResponse
export interface OpenRouterChatCompletionResponse {
  choices: OpenRouterChoice[]; // Used the less standard choice type
  id?: string;
  created?: number;
  model?: string;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}
*/
---------- END openRouterTypes.ts ----------


---------- questionnaire.ts ----------
// src/types/questionnaire.ts
export enum Sex {
    MALE = 'male',
    FEMALE = 'female',
  }
  
  export enum ActivityLevel {
    SEDENTARY = 'sedentary',
    LIGHT = 'light',
    MODERATE = 'moderate',
    ACTIVE = 'active',
    VERY_ACTIVE = 'very_active',
  }
  
  export enum PrimaryGoal {
    LOSE_WEIGHT = 'lose_weight',
    MAINTAIN_WEIGHT = 'maintain_weight',
    GAIN_MUSCLE = 'gain_muscle',
  }
  
  export enum GoalIntensity {
    MILD = 'mild',
    MODERATE = 'moderate',
    AGGRESSIVE = 'aggressive',
  }
  
  export interface QuestionnaireFormData {
    age: string;
    sex: Sex | ''; // Allow empty initial state for Picker
    height: string; // cm
    weight: string; // kg
    activityLevel: ActivityLevel | ''; // Allow empty initial state
    primaryGoal: PrimaryGoal | ''; // Allow empty initial state
    goalIntensity?: GoalIntensity;
  }
  
  export interface CalculatedGoals {
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
  }
---------- END questionnaire.ts ----------


---------- settings.ts ----------
// src/types/settings.ts
// types/settings.ts
export const macros = ["calories", "protein", "carbs", "fat"] as const;
export type MacroType = (typeof macros)[number];

export type LanguageCode = 'en' | 'ru' | 'he' | 'system';

export interface MacroData {
  x: number; // Timestamp
  y: number; // Macro value
}

export interface Statistics {
  calories: MacroData[][];
  protein: MacroData[][];
  carbs: MacroData[][];
  fat: MacroData[][];
}

export interface Settings {
  theme: "light" | "dark" | "system";
  language: LanguageCode;
  dailyGoals: {
    [key in MacroType]: number;
  };
  settingsHistory?: { date: number; dailyGoals: { [key in MacroType]: number } }[];
}

export interface SettingsScreenProps {
  onThemeChange: (theme: "light" | "dark" | "system") => void;
  onLocaleChange: (locale: LanguageCode) => void; // Added for language change
}
---------- END settings.ts ----------


---------- token.ts ----------
export interface Token {
    access_token: string;
    refresh_token: string;
    token_type: string;
}
---------- END token.ts ----------


---------- dateUtils.ts ----------
// src/utils/dateUtils.ts
// utils/dateUtils.ts
import { format, parseISO, formatISO, isValid } from 'date-fns';
import { getDateFnLocale } from '../localization/i18n'; // Import for locale

/**
 * Formats a Date object, timestamp (number), or ISO date string (YYYY-MM-DD)
 * into a standard YYYY-MM-DD string representation.
 * Returns an empty string if the input is invalid.
 * @param dateInput - The date to format (Date object, timestamp number, or 'YYYY-MM-DD' string).
 * @returns The formatted date string 'YYYY-MM-DD' or empty string on error.
 */
export const formatDateISO = (dateInput: number | string | Date): string => {
    try {
        let dateObj: Date;
        if (dateInput instanceof Date) dateObj = dateInput;
        else if (typeof dateInput === 'string') dateObj = parseISO(dateInput);
        else if (typeof dateInput === 'number') dateObj = new Date(dateInput);
        else throw new Error("Invalid input type");

        if (!isValid(dateObj)) throw new Error("Invalid date value");
        return formatISO(dateObj, { representation: 'date' });
    } catch (error) {
        console.error("Error in formatDateISO:", error, "Input:", dateInput);
        return "";
    }
};

/**
 * Asynchronously formats a Date object, timestamp (number), or ISO date string (YYYY-MM-DD)
 * into a human-readable format (e.g., "MMMM dd, yyyy") using the current app locale.
 * Returns 'Invalid Date' if the input is invalid.
 * @param dateInput - The date to format (Date object, timestamp number, or 'YYYY-MM-DD' string).
 * @returns The formatted readable date string or 'Invalid Date' on error.
 */
export const formatDateReadableAsync = async (dateInput: number | string | Date): Promise<string> => {
    try {
        let dateObj: Date;
        if (dateInput instanceof Date) dateObj = dateInput;
        else if (typeof dateInput === 'string') dateObj = parseISO(dateInput);
        else if (typeof dateInput === 'number') dateObj = new Date(dateInput);
        else throw new Error("Invalid input type");

        if (!isValid(dateObj)) throw new Error("Invalid date value");

        const locale = await getDateFnLocale(); // Get date-fns locale
        return format(dateObj, 'MMMM dd, yyyy', { locale });
    } catch (error) {
         console.error("Error in formatDateReadableAsync:", error, "Input:", dateInput);
         return 'Invalid Date'; // Fallback for display
    }
};

/**
 * Gets today's date as a standard YYYY-MM-DD string.
 * @returns Today's date in 'YYYY-MM-DD' format.
 */
export const getTodayDateString = (): string => {
  return formatISO(new Date(), { representation: 'date' });
};
---------- END dateUtils.ts ----------


---------- foodIconMatcher.ts ----------
// src/utils/foodIconMatcher.ts
import { foodIconDefinitions } from '../assets/food_icons/iconDefinitions';
import i18n, { t, TranslationKey } from '../localization/i18n';
import { LanguageCode } from '../types/settings';

const normalizeFoodNameForMatching = (name: string): string => {
    return name.toLowerCase()
        .replace(/[()",.&'/#!$%^*;:{}=_`~?]/g, '')
        .trim();
};

const getNormalizedWords = (name: string): string[] => {
    const normalizedName = normalizeFoodNameForMatching(name);
    const commonFilterWords = ['and', 'with', 'of', 'a', 'the', 'in', 'on', 'for', 'g', 'ml', 'гр', 'мл'];
    return normalizedName
        .split(/\s+/)
        .filter(word => word.length > 1 && !commonFilterWords.includes(word.toLowerCase()));
};

/**
 * Finds the best matching icon for a given food name based on localized tags.
 * @param foodName The name of the food.
 * @param foodNameLocale The detected language of the foodName string (e.g., 'en', 'ru', 'he').
 * @returns An emoji string for the icon, or null if no good match is found.
 */
export const findBestIcon = (foodName: string, foodNameLocale: LanguageCode): string | null => {
    if (!foodName || foodName.trim() === '') {
        return null;
    }

    const normalizedFoodNameQuery = normalizeFoodNameForMatching(foodName);
    const foodNameWords = getNormalizedWords(foodName);

    // console.log(`[findBestIcon START] Food: "${foodName}", NormQuery: "${normalizedFoodNameQuery}", Words: [${foodNameWords.join(', ')}], FoodNameLocale: ${foodNameLocale}`);

    let bestMatch: { icon: string; score: number; priority: number } | null = null;

    for (const definition of foodIconDefinitions) {
        let currentScore = 0;
        let matchFoundInDefinition = false;
        const fullTagKey = `foodIconTags.${definition.tagKey}` as TranslationKey;
        let localizedTags: string[] = [];
        let effectiveTagLocale: LanguageCode = foodNameLocale; // The locale from which tags were actually sourced

        try {
            const tagsForDetectedLocale = i18n.t(fullTagKey, { locale: foodNameLocale, returnObjects: true, defaultValue: null });

            if (Array.isArray(tagsForDetectedLocale) && tagsForDetectedLocale.length > 0) {
                localizedTags = tagsForDetectedLocale;
            } else {
                if (foodNameLocale !== 'en' && definition.tagKey !== 'unknownFood' && definition.tagKey !== 'genericMeal') {
                    const tagsForEnglishFallback = i18n.t(fullTagKey, { locale: 'en', returnObjects: true, defaultValue: [] });
                    if (Array.isArray(tagsForEnglishFallback) && tagsForEnglishFallback.length > 0) {
                        localizedTags = tagsForEnglishFallback;
                        effectiveTagLocale = 'en'; // Mark that we used English fallback tags
                    }
                }
            }
        } catch (e) {
            console.error(`[findBestIcon] ERROR fetching/processing translation for key: ${fullTagKey} in foodNameLocale: ${foodNameLocale}. FoodName: "${foodName}"`, e);
            localizedTags = [];
        }

        if (localizedTags.length === 0 && definition.tagKey !== 'unknownFood' && definition.tagKey !== 'genericMeal') {
            continue;
        }
        
        // if (definition.tagKey === 'redMeat' && normalizedFoodNameQuery.includes(normalizeFoodNameForMatching('סטייק'))) {
        //      console.log(`[findBestIcon DEBUG STEEK] Checking 'redMeat' for "${foodName}". Tags sourced from locale '${effectiveTagLocale}': [${localizedTags.join(', ')}]. Query: "${normalizedFoodNameQuery}"`);
        // }

        for (const localizedTag of localizedTags) {
            const lowerLocalizedTag = localizedTag.toLowerCase().trim();
            if (!lowerLocalizedTag) continue;

            if (lowerLocalizedTag === normalizedFoodNameQuery) {
                currentScore = Math.max(currentScore, 100);
                matchFoundInDefinition = true;
                break;
            }

            if (normalizedFoodNameQuery.includes(lowerLocalizedTag)) {
                currentScore = Math.max(currentScore, 70 + lowerLocalizedTag.length);
                matchFoundInDefinition = true;
            }
            
            if (foodNameWords.some(foodWord => foodWord.length > 1 && lowerLocalizedTag.includes(foodWord))) {
                currentScore = Math.max(currentScore, 60);
                matchFoundInDefinition = true;
            }
        }
        
        if (!matchFoundInDefinition && localizedTags.length > 0) {
            for (const localizedTag of localizedTags) {
                const tagWords = localizedTag.toLowerCase().trim().split(/\s+/).filter(tw => tw.length > 1);
                if (tagWords.some(tw => normalizedFoodNameQuery.includes(tw))) {
                    currentScore = Math.max(currentScore, 50);
                    matchFoundInDefinition = true;
                    break;
                }
            }
        }

        if (matchFoundInDefinition) {
            const priority = definition.priority || 0;
            if (!bestMatch || currentScore > bestMatch.score || (currentScore === bestMatch.score && priority > bestMatch.priority)) {
                bestMatch = { icon: definition.icon, score: currentScore, priority };
            }
        }
    }

    if (bestMatch && bestMatch.score > 0) {
        // console.log(`[findBestIcon SUCCESS] For "${foodName}" (FoodNameLocale: ${foodNameLocale}): ${bestMatch.icon} (Score: ${bestMatch.score}, Prio: ${bestMatch.priority})`);
        return bestMatch.icon;
    }

    const genericMealDefinition = foodIconDefinitions.find(def => def.tagKey === 'genericMeal');
    if (genericMealDefinition) {
        const genericMealKey = `foodIconTags.${genericMealDefinition.tagKey}` as TranslationKey;
        // Use foodNameLocale for generic meal tags as well.
        const genericMealTagsResult = i18n.t(genericMealKey, { locale: foodNameLocale, returnObjects: true, defaultValue: [] });
        if (Array.isArray(genericMealTagsResult) && genericMealTagsResult.some(tag => normalizedFoodNameQuery.includes(tag.toLowerCase().trim()))) {
            return genericMealDefinition.icon;
        }
    }
    
    const unknownFoodDefinition = foodIconDefinitions.find(def => def.tagKey === 'unknownFood');
    // console.log(`[findBestIcon NO MATCH] For "${foodName}" (FoodNameLocale: ${foodNameLocale}). Returning unknown icon: ${unknownFoodDefinition ? unknownFoodDefinition.icon : 'ERROR_NO_UNKNOWN_ICON_DEF'}`);
    return unknownFoodDefinition ? unknownFoodDefinition.icon : null;
};
---------- END foodIconMatcher.ts ----------


---------- gradingUtils.ts ----------
// src/utils/gradingUtils.ts
import { Food } from '../types/food';
import { Settings } from '../types/settings';

export type GradeLetter = 'A' | 'B' | 'C' | 'D' | 'F';

export interface FoodGradeResult {
    letter: GradeLetter;
    color: string;
    score: number; // Underlying score for potential adjustments
}

export const gradeColors: Record<GradeLetter, string> = {
    A: '#4CAF50', // Green
    B: '#8BC34A', // Light Green
    C: '#FFC107', // Amber/Yellow
    D: '#FF9800', // Orange
    F: '#F44336', // Red
};

const mapScoreToGradeDetails = (score: number): FoodGradeResult => {
    let letter: GradeLetter;
    const clampedScore = Math.max(0, Math.min(100, Math.round(score))); // Ensure score is 0-100

    if (clampedScore >= 85) letter = 'A';
    else if (clampedScore >= 70) letter = 'B';
    else if (clampedScore >= 55) letter = 'C';
    else if (clampedScore >= 40) letter = 'D';
    else letter = 'F';
    return { letter, color: gradeColors[letter], score: clampedScore };
};

/**
 * Calculates a base grade for a food item (per 100g) based on refined heuristics.
 * @param food The food item (calories, protein, carbs, fat per 100g).
 * @returns FoodGradeResult or null if grading is not possible.
 */
export const calculateBaseFoodGrade = (food: Food): FoodGradeResult | null => {
    if (!food || typeof food.calories !== 'number' || typeof food.protein !== 'number' || typeof food.carbs !== 'number' || typeof food.fat !== 'number') {
        return null;
    }

    const { calories, protein, carbs, fat } = food;
    let score = 70; // Start with a baseline score (e.g., C grade)

    // --- 1. Calorie Density (per 100g) ---
    if (calories < 100) score += 15; // Low density
    else if (calories < 200) score += 7;
    else if (calories > 350) score -= (calories - 350) * 0.08; // Penalize high density
    if (calories > 500) score -= 15; // Further penalty for very high density

    // --- 2. Protein Content (per 100g) ---
    if (protein > 20) score += 20; // Excellent protein
    else if (protein > 10) score += 10; // Good protein
    else if (protein < 5 && calories > 150) score -= 10; // Low protein for moderate/high cal food

    // --- 3. Fat Content & Type (Heuristic for "quality" based on balance) ---
    const caloriesFromFat = fat * 9;
    const percentageCaloriesFromFat = (calories > 0) ? (caloriesFromFat / calories) * 100 : 0;

    if (fat > 25) { // High total fat
        score -= (fat - 25) * 0.5;
        if (protein < fat * 0.5 && protein < 10) { // High fat, low protein suggests less ideal source
            score -= 10;
        }
    } else if (fat < 5 && percentageCaloriesFromFat < 20 && protein > 10) { // Low fat, potentially good if protein is present
        score += 5;
    }
    if (percentageCaloriesFromFat > 50) score -= 15; // More than 50% cals from fat is heavily penalized
    if (percentageCaloriesFromFat > 35 && percentageCaloriesFromFat <= 50) score -= 7;


    // --- 4. Carbohydrate Content & Type (Heuristic) ---
    const caloriesFromCarbs = carbs * 4;
    const percentageCaloriesFromCarbs = (calories > 0) ? (caloriesFromCarbs / calories) * 100 : 0;

    if (carbs > 40) { // High total carbs
        score -= (carbs - 40) * 0.3;
        if (protein < carbs * 0.1 && protein < 7) { // High carb, very low protein suggests refined carbs
            score -= 10;
        }
    }
    if (percentageCaloriesFromCarbs > 60) score -= 15; // More than 60% cals from carbs
    if (percentageCaloriesFromCarbs > 50 && percentageCaloriesFromCarbs <= 60) score -=7;

    // --- 5. Macronutrient Balance (Percentage of Calories) ---
    const caloriesFromProtein = protein * 4;
    const percentageCaloriesFromProtein = (calories > 0) ? (caloriesFromProtein / calories) * 100 : 0;

    // Ideal ranges (approx): Protein 20-30%, Fat 20-30%, Carbs 40-50%
    // Bonus for being within a generally healthy profile
    let balanceBonus = 0;
    if (percentageCaloriesFromProtein >= 15 && percentageCaloriesFromProtein <= 35) balanceBonus += 4;
    if (percentageCaloriesFromFat >= 15 && percentageCaloriesFromFat <= 35) balanceBonus += 4;
    if (percentageCaloriesFromCarbs >= 35 && percentageCaloriesFromCarbs <= 55) balanceBonus += 4;
    if (balanceBonus >=10) score += 10; // Max 10 points for good balance
    else if (balanceBonus >=8) score +=5;

    // Penalty for extreme imbalance if not already heavily penalized
    if (protein < 5 && fat > 20 && carbs > 30 && calories > 200) { // Low protein, high fat & carbs
        score -= 15;
    }

    return mapScoreToGradeDetails(score);
};

/**
 * Calculates a grade for a specific daily entry, considering portion size and daily goals.
 * @param food The food item.
 * @param consumedGrams The amount of the food consumed in grams.
 * @param dailyGoals The user's daily macronutrient goals.
 * @returns FoodGradeResult or null if grading is not possible.
 */
export const calculateDailyEntryGrade = (
    food: Food,
    consumedGrams: number,
    dailyGoals: Settings['dailyGoals']
): FoodGradeResult | null => {
    const baseGradeResult = calculateBaseFoodGrade(food);
    if (!baseGradeResult) return null;
    if (consumedGrams <= 0) return baseGradeResult;

    let currentScore = baseGradeResult.score;

    // Ensure dailyGoals are valid numbers, default to avoid division by zero or nonsensical percentages
    const safeGoals = {
        calories: Math.max(1, dailyGoals.calories || 2000), // Minimum 1 to avoid /0
        protein: Math.max(1, dailyGoals.protein || 100),
        carbs: Math.max(1, dailyGoals.carbs || 200),
        fat: Math.max(1, dailyGoals.fat || 70),
    };

    const factor = consumedGrams / 100;
    const consumedCalories = food.calories * factor;
    const consumedProtein = food.protein * factor;
    const consumedCarbs = food.carbs * factor;
    const consumedFat = food.fat * factor;

    // --- Adjustments based on portion size relative to daily goals ---

    // Penalty for consuming a large percentage of daily calorie allowance in one go
    const caloriePortionPercentage = (consumedCalories / safeGoals.calories) * 100;
    if (caloriePortionPercentage > 50) currentScore -= 20; // >50% of daily cals in one item
    else if (caloriePortionPercentage > 35) currentScore -= 10; // >35%

    // Penalty for consuming a large percentage of daily fat allowance
    const fatPortionPercentage = (consumedFat / safeGoals.fat) * 100;
    if (fatPortionPercentage > 60) currentScore -= 15; // >60% of daily fat
    else if (fatPortionPercentage > 40) currentScore -= 7;

    // Penalty for consuming a large percentage of daily carb allowance
    const carbPortionPercentage = (consumedCarbs / safeGoals.carbs) * 100;
    if (carbPortionPercentage > 60) currentScore -= 10; // >60% of daily carbs
    else if (carbPortionPercentage > 45) currentScore -= 5;

    // Bonus for significant protein contribution if calories are reasonable
    const proteinPortionPercentage = (consumedProtein / safeGoals.protein) * 100;
    if (proteinPortionPercentage > 25 && caloriePortionPercentage < 30) {
        currentScore += 10; // Good protein hit without too many cals
    } else if (proteinPortionPercentage > 15 && caloriePortionPercentage < 20) {
        currentScore += 5;
    }

    // Mitigation for small portions of "F" grade foods
    if (baseGradeResult.letter === 'F' && caloriePortionPercentage < 10) {
        currentScore += 15; // Small "treat" is less impactful
    } else if (baseGradeResult.letter === 'D' && caloriePortionPercentage < 7) {
        currentScore += 7;
    }

    // Slight penalty if a large portion of an "A" grade food makes macros significantly off for the day
    if (baseGradeResult.letter === 'A' &&
        (caloriePortionPercentage > 30 || fatPortionPercentage > 30 || carbPortionPercentage > 30) &&
        consumedGrams > 200 // and it's a large portion
    ) {
        currentScore -= 7;
    }

    return mapScoreToGradeDetails(currentScore);
};
---------- END gradingUtils.ts ----------


---------- iconUtils.ts ----------
// src/utils/iconUtils.ts
import { findBestIcon } from './foodIconMatcher';
import { detectLanguageFromText } from './languageUtils'; // Import new utility
import { LanguageCode } from '../types/settings';

const syncMemoryCache = new Map<string, string | null>();
const MAX_CACHE_SIZE = 300;

/**
 * Synchronously gets the icon identifier (e.g., emoji) for a food item.
 * It first detects the language of the food name, then uses an in-memory cache.
 * Relies on `findBestIcon` which uses localized tags based on the detected language.
 *
 * @param foodName The name of the food item.
 * @returns An icon string (emoji) or null if not found or an error occurred.
 */
export const getFoodIconUrl = (foodName: string): string | null => {
  if (!foodName || foodName.trim() === '') {
    return null;
  }

  const detectedLocale = detectLanguageFromText(foodName);
  const normalizedNameForCache = foodName.toLowerCase().trim();
  const cacheKey = `${detectedLocale}_${normalizedNameForCache}`;

  if (syncMemoryCache.has(cacheKey)) {
    const cachedIcon = syncMemoryCache.get(cacheKey)!;
    // console.log(`[getFoodIconUrl] CACHE HIT for key "${cacheKey}". Food: "${foodName}", Detected Locale: ${detectedLocale}, Icon: ${cachedIcon}`);
    return cachedIcon;
  }
  // console.log(`[getFoodIconUrl] CACHE MISS for key "${cacheKey}". Food: "${foodName}", Detected Locale: ${detectedLocale}. Calling findBestIcon.`);

  const iconIdentifier = findBestIcon(foodName, detectedLocale);

  if (syncMemoryCache.size >= MAX_CACHE_SIZE) {
    const keys = Array.from(syncMemoryCache.keys());
    for (let i = 0; i < Math.floor(MAX_CACHE_SIZE / 4); i++) {
        const randomIndex = Math.floor(Math.random() * keys.length);
        const keyToRemove = keys.splice(randomIndex, 1)[0];
        if(keyToRemove) syncMemoryCache.delete(keyToRemove);
    }
    // console.log(`[getFoodIconUrl] Food icon memory cache partially cleared. New size: ${syncMemoryCache.size}`);
  }
  syncMemoryCache.set(cacheKey, iconIdentifier);
  // console.log(`[getFoodIconUrl] Cached new icon for key "${cacheKey}". Food: "${foodName}", Icon: ${iconIdentifier}`);

  return iconIdentifier;
};

export const clearLocalIconCache = (): void => {
  syncMemoryCache.clear();
  console.log("[clearLocalIconCache] In-memory food icon cache CLEARED.");
};

export const logLocalIconCacheSize = (): void => {
  console.log(`[logLocalIconCacheSize] In-memory food icon cache size: ${syncMemoryCache.size}`);
};
---------- END iconUtils.ts ----------


---------- imageUtils.ts ----------
// src/utils/imageUtils.ts
import * as ImageManipulator from 'expo-image-manipulator';
import { ImagePickerAsset } from 'expo-image-picker';
import { Alert } from 'react-native';
import * as FileSystem from 'expo-file-system';
import { t } from '../localization/i18n'; // Import t

const MAX_IMAGE_DIMENSION = 1024;
const IMAGE_COMPRESSION_QUALITY = 0.7;

export const compressImageIfNeeded = async (
    asset: ImagePickerAsset
): Promise<ImageManipulator.ImageResult | null> => {
    try {
        const actions: ImageManipulator.Action[] = [];
        let needsResize = false;
        if (asset.width > MAX_IMAGE_DIMENSION || asset.height > MAX_IMAGE_DIMENSION) {
            needsResize = true;
            const resizeOptions: ImageManipulator.ActionResize['resize'] = { width: undefined, height: undefined, };
            if (asset.width > asset.height) resizeOptions.width = MAX_IMAGE_DIMENSION;
            else resizeOptions.height = MAX_IMAGE_DIMENSION;
            actions.push({ resize: resizeOptions });
        } else {
            return null;
        }
        if (needsResize) {
            const saveOptions: ImageManipulator.SaveOptions = {
                compress: IMAGE_COMPRESSION_QUALITY, format: ImageManipulator.SaveFormat.JPEG, base64: false,
            };
            const result = await ImageManipulator.manipulateAsync(asset.uri, actions, saveOptions);
            return result;
        } else {
            return null;
        }
    } catch (error) {
        Alert.alert(t('utils.image.alertCompressionError'), t('utils.image.alertCompressionErrorMessage'));
        return null;
    }
};

export async function getBase64FromUri(uri: string): Promise<string> {
    try {
        const base64 = await FileSystem.readAsStringAsync(uri, { encoding: FileSystem.EncodingType.Base64, });
        return base64;
    } catch (error: any) {
        throw new Error(t('utils.image.errorFailedToRead', { error: error.message || 'Unknown error' }));
    }
}
---------- END imageUtils.ts ----------


---------- languageUtils.ts ----------
// src/utils/languageUtils.ts
import { LanguageCode } from '../types/settings';

// Basic script detection character ranges
const HEBREW_REGEX = /[\u0590-\u05FF]/;
const CYRILLIC_REGEX = /[\u0400-\u04FF]/;
// Basic Latin check - very broad, English will be the default for this
const LATIN_REGEX = /[a-zA-Z]/;

/**
 * Detects the dominant language script in a given text.
 * Prioritizes Hebrew, then Cyrillic. If neither is dominant,
 * defaults to 'en' (representing Latin script languages for icon tag purposes).
 * @param text The text to analyze.
 * @returns LanguageCode ('he', 'ru', or 'en' as default).
 */
export const detectLanguageFromText = (text: string): LanguageCode => {
    if (!text || text.trim() === '') {
        return 'en'; // Default if no text
    }

    let hebrewChars = 0;
    let cyrillicChars = 0;
    let latinChars = 0;
    let otherChars = 0;

    for (const char of text) {
        if (HEBREW_REGEX.test(char)) {
            hebrewChars++;
        } else if (CYRILLIC_REGEX.test(char)) {
            cyrillicChars++;
        } else if (LATIN_REGEX.test(char)) {
            latinChars++;
        } else {
            otherChars++;
        }
    }

    // Simple dominance check
    // Give a higher weight or lower threshold for Hebrew/Cyrillic if names are often short
    if (hebrewChars > latinChars / 2 && hebrewChars > cyrillicChars) { // If Hebrew chars are significant
        return 'he';
    }
    if (cyrillicChars > latinChars / 2 && cyrillicChars > hebrewChars) { // If Cyrillic chars are significant
        return 'ru';
    }
    
    // If primarily Latin, or mixed with no clear non-Latin dominance, default to 'en'
    // This 'en' will then correctly use English tags.
    // If the text was, e.g., French and we default to 'en', English tags are a reasonable fallback.
    return 'en';
};
---------- END languageUtils.ts ----------


---------- macros.ts ----------
// src/utils/macros.ts
import { Alert } from 'react-native';
import { getMacrosForRecipe, getMacrosForImageSingle, getMacrosForImageMultiple, getMacrosForTextMultiple, BackendError } from '../services/backendService';
import { Macros, MacrosWithFoodName, EstimatedFoodItem } from '../types/macros';
import { ImagePickerAsset } from 'expo-image-picker';
import { getBase64FromUri } from './imageUtils';
import { t } from '../localization/i18n';

export function determineMimeType(asset: { uri: string; mimeType?: string | null; fileName?: string | null; }): string {
    if (asset.mimeType && asset.mimeType.includes('/')) return asset.mimeType;
    const extension = asset.uri.split('.').pop()?.toLowerCase();
    switch (extension) {
        case 'jpg': case 'jpeg': return 'image/jpeg';
        case 'png': return 'image/png';
        default: return 'image/jpeg';
    }
}

const handleError = (error: unknown, title: string) => {
    const message = error instanceof BackendError ? error.message : t('utils.macros.errorMessage');
    Alert.alert(title, message);
    throw error;
}

export async function getMacrosFromText(foodName: string, ingredients: string): Promise<MacrosWithFoodName> {
    try {
        return await getMacrosForRecipe(foodName, ingredients);
    } catch (error) {
        handleError(error, t('utils.macros.errorTitle'));
        throw error; // Re-throw to allow caller to handle UI state
    }
}

export async function getMacrosForImageFile(asset: ImagePickerAsset): Promise<MacrosWithFoodName> {
    try {
        const base64File = await getBase64FromUri(asset.uri);
        const mimeType = determineMimeType(asset);
        return await getMacrosForImageSingle(base64File, mimeType);
    } catch (error) {
        handleError(error, t('utils.macros.errorTitle'));
        throw error;
    }
}

export async function getMultipleFoodsFromImage(base64Image: string, mimeType: string): Promise<EstimatedFoodItem[]> {
    try {
        const results = await getMacrosForImageMultiple(base64Image, mimeType);
        if (!Array.isArray(results)) throw new Error(t('utils.macros.invalidResponse'));
        return results;
    } catch (error) {
        handleError(error, t('utils.macros.multiItemErrorTitle'));
        throw error;
    }
}

export async function getMultipleFoodsFromText(text: string): Promise<EstimatedFoodItem[]> {
    try {
        const results = await getMacrosForTextMultiple(text);
        if (!Array.isArray(results)) throw new Error(t('utils.macros.invalidResponse'));
        return results;
    } catch (error) {
        handleError(error, t('utils.macros.multiItemErrorTitle'));
        throw error;
    }
}

export { BackendError, EstimatedFoodItem, Macros, MacrosWithFoodName };
---------- END macros.ts ----------


---------- searchUtils.ts ----------
// src/utils/searchUtils.ts
import { Food } from '../types/food';
import { foodIconDefinitions } from '../assets/food_icons/iconDefinitions';
import i18n, { TranslationKey } from '../localization/i18n';
import { getFoodIconUrl } from './iconUtils';
import { combinationTags } from '../assets/food_icons/combinationTags';

/**
 * Finds foods that match a search term via their associated icon tags.
 * This is the "smart search" functionality. It supports both direct tag
 * matching (e.g., searching "apple") and combination tag matching
 * (e.g., searching "fruit" to find apples, bananas, etc.).
 *
 * @param searchTerm The string to search for.
 * @param allFoods The complete list of foods in the library.
 * @returns An array of foods that matched the search term via tags.
 */
export const findFoodsByTagSearch = (searchTerm: string, allFoods: Food[]): Food[] => {
    if (!searchTerm || !allFoods) {
        return [];
    }

    const lowercasedSearchTerm = searchTerm.toLowerCase().trim();
    if (lowercasedSearchTerm.length < 2) { // Don't search for very short terms
        return [];
    }

    const relevantIcons = new Set<string>();
    const iconsMap = new Map(foodIconDefinitions.map(def => [def.tagKey, def.icon]));

    // --- Step 1: Check for combination tag matches ---
    if (combinationTags[lowercasedSearchTerm]) {
        const tagKeys = combinationTags[lowercasedSearchTerm];
        for (const tagKey of tagKeys) {
            const icon = iconsMap.get(tagKey);
            if (icon) {
                relevantIcons.add(icon);
            }
        }
    }

    // --- Step 2: Find which icon categories are relevant to the search term (direct matching) ---
    for (const definition of foodIconDefinitions) {
        const fullTagKey = `foodIconTags.${definition.tagKey}` as TranslationKey;
        
        // Check tags in all available languages for comprehensiveness
        const localesToSearch: ('en' | 'ru' | 'he')[] = ['en', 'ru', 'he'];
        for (const locale of localesToSearch) {
            const tagResult = i18n.t(fullTagKey, { locale, returnObjects: true, defaultValue: [] });
            const tags: string[] = Array.isArray(tagResult) ? tagResult : [];

            if (tags.some(tag => tag.toLowerCase().includes(lowercasedSearchTerm))) {
                relevantIcons.add(definition.icon);
                break; // Found a match in this language, no need to check others for this definition
            }
        }
    }

    if (relevantIcons.size === 0) {
        return [];
    }

    // --- Step 3: Find all foods that map to these relevant icons ---
    const matchedFoods: Food[] = [];
    for (const food of allFoods) {
        const foodIcon = getFoodIconUrl(food.name); // This uses a cache, so it's efficient.
        if (foodIcon && relevantIcons.has(foodIcon)) {
            matchedFoods.push(food);
        }
    }

    return matchedFoods;
};
---------- END searchUtils.ts ----------


---------- units.ts ----------
// src/utils/units.ts
import { Alert } from 'react-native';
import { estimateGramsNaturalLanguage, BackendError } from '../services/backendService';
import { t } from '../localization/i18n';

export async function getGramsFromNaturalLanguage(
    foodName: string,
    quantityDescription: string
): Promise<number> {
    try {
        const grams = await estimateGramsNaturalLanguage(foodName, quantityDescription);
        return grams;
    } catch (error) {
        const message = error instanceof BackendError
            ? error.message
            : t('errors.unexpectedError');
        Alert.alert(t('utils.units.errorTitle'), message);
        throw error;
    }
}
---------- END units.ts ----------


---------- validationUtils.ts ----------
// utils/validationUtils.ts

export const isValidNumberInput = (value: string): boolean => {
    return /^[0-9]*(\.[0-9]*)?$/.test(value) && !isNaN(parseFloat(value));
  };
  
  export const isNotEmpty = (value: string): boolean => {
    return value.trim() !== '';
  };
---------- END validationUtils.ts ----------


---------- tsconfig.json ----------
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "esModuleInterop": true
  }
}
---------- END tsconfig.json ----------

