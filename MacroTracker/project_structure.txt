.gitignore
app.json
App.tsx
assets/
  adaptive-icon.png
  favicon.png
  icon.png
  splash.png
eas.json
index.ts
package.json
projectToFile.js
src/
  components/
    AccountSettings.tsx
    AddEntryModal.tsx
    AddFoodModal.tsx
    ConfirmationModal.tsx
    DailyEntryListItem.tsx
    DailyGoalsInput.tsx
    DailyProgress.tsx
    DataManagementButtons.tsx
    DateNavigator.tsx
    Entry/
      QuickAddItem.tsx
    Food/
    FoodFormFields.tsx
    FoodItem.tsx
    Modal/
    QuickAddList.tsx
    StatisticsChart.tsx
    ThemeSwitch.tsx
  hooks/
  localization/
    i18n.ts
    languages/
      en.json
      he.json
      ru.json
  navigation/
    AppNavigator.tsx
  screens/
    DailyEntryScreen.tsx
    FoodListScreen.tsx
    QuestionnaireScreen.tsx
    SettingsScreen.tsx
  services/
    backendService.ts
    clientIDService.ts
    foodService.ts
    storageService.ts
  types/
    dailyEntry.ts
    food.ts
    macros.ts
    openRouterTypes.ts
    questionnaire.ts
    settings.ts
  utils/
    dateUtils.ts
    gradingUtils.ts
    iconUtils.ts
    imageUtils.ts
    macros.ts
    units.ts
    validationUtils.ts
tsconfig.json

---------- .gitignore ----------
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

---------- END .gitignore ----------


---------- app.json ----------
{
  "expo": {
    "name": "MacrosVisionAI",
    "slug": "MacroTracker",
    "version": "2.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#000000"
    },
    "androidStatusBar": {
      "backgroundColor": "#000000",
      "translucent": false,
      "barStyle": "light-content"
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.macrosvisionai.app",
      "infoPlist": {
        "UIStatusBarStyle": "UIStatusBarStyleAutomatic",
        "NSCameraUsageDescription": "Allow $(PRODUCT_NAME) to access your camera to take photos of food for macro analysis.",
        "NSPhotoLibraryUsageDescription": "Allow $(PRODUCT_NAME) to access your photos to select food images for macro analysis."
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.macrosvisionai.app",
      "userInterfaceStyle": "automatic",
      "statusBar": {
        "backgroundColor": "#00000000",
        "translucent": true,
        "barStyle": "auto"
      },
      "permissions": [
        "android.permission.CAMERA",
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.WRITE_EXTERNAL_STORAGE"
      ]
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "plugins": [
      [
        "expo-document-picker",
        {
          "appleTeamId": "YOUR_TEAM_ID"
        }
      ],
      [
        "expo-image-picker",
        {
          "photosPermission": "Allow $(PRODUCT_NAME) to access your photos to select food images for macro analysis.",
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera to take photos of food for macro analysis."
        }
      ]
    ],
    "extra": {
      "eas": {
        "projectId": "25ac2bcf-78a3-4f2c-a635-4fcaae7b93f1"
      },
      "env": {
         "BACKEND_URL": "https://macros-vision-ai.xyz"
      }
    }
  }
}
---------- END app.json ----------


---------- App.tsx ----------
// App.tsx
// App.tsx
import "react-native-get-random-values"; // MUST BE FIRST
import Toast from "react-native-toast-message";
import React, { useState, useEffect } from "react";
import AppNavigator from "./src/navigation/AppNavigator";
import { SafeAreaProvider, SafeAreaView } from "react-native-safe-area-context";
import { ThemeProvider, createTheme } from "@rneui/themed";
import { loadSettings, saveSettings } from "./src/services/storageService";
import {
  useColorScheme,
  AppState,
  AppStateStatus,
  Platform,
  I18nManager, // Import I18nManager
  Alert, // For restart prompt
  DevSettings // For dev reload
} from "react-native";
import * as Localization from 'expo-localization';
import {
  NavigationContainer,
  DefaultTheme,
  DarkTheme,
} from "@react-navigation/native";
import { Colors } from "@rneui/base";
import { Settings, LanguageCode } from "./src/types/settings";
import { LogBox, View, Text } from "react-native";
import { StatusBar } from "expo-status-bar";
import { getClientId } from "./src/services/clientIDService";
import i18n, { setLocale, t } from './src/localization/i18n'; // Import i18n setup

LogBox.ignoreLogs(["Function components cannot be given refs"]);

declare module "@rneui/themed" {
  export interface Colors {
    text: string;
    card: string;
    successLight: string;
  }
}

interface MyTheme {
  mode: "light" | "dark";
  colors: Colors;
}

const lightTheme: MyTheme = {
  mode: "light",
  colors: {
    primary: "#2e86de",
    secondary: "#6c757d",
    background: "#f8f9fa",
    grey5: "#e9ecef",
    white: "#ffffff",
    grey4: "#ced4da",
    success: "#28a745",
    successLight: "#d4edda",
    black: "#000000",
    text: "#212529",
    card: "#ffffff",
    error: "#dc3545",
    warning: "#ffc107",
    disabled: "#6c757d",
    divider: "#ced4da",
    platform: { ios: {}, android: {}, web: {}, default: {} } as any,
    grey0: "#f8f9fa", grey1: "#e9ecef", grey2: "#dee2e6", grey3: "#ced4da",
    greyOutline: "#adb5bd", searchBg: "#ffffff",
  },
};

const darkTheme: MyTheme = {
  mode: "dark",
  colors: {
    primary: "#2e86de", secondary: "#adb5bd", background: "#121212",
    grey5: "#2c2c2c", white: "#ffffff", grey4: "#343a40",
    success: "#28a745", successLight: "#1f5139", black: "#000000",
    text: "#f8f9fa", card: "#1e1e1e", error: "#dc3545",
    warning: "#ffc107", disabled: "#6c757d", divider: "#343a40",
    platform: { ios: {}, android: {}, web: {}, default: {} } as any,
    grey0: "#212529", grey1: "#2c2c2c", grey2: "#343a40",
    grey3: "#495057", greyOutline: "#6c757d", searchBg: "#1e1e1e",
  },
};

const App = () => {
  const [themeMode, setThemeMode] = useState<"light" | "dark" | "system">(
    "system"
  );
  const [currentLanguage, setCurrentLanguage] = useState<LanguageCode>('system');
  const [loadedSettings, setLoadedSettings] = useState<Settings | null>(null);
  const colorScheme = useColorScheme();
  const [appState, setAppState] = useState(AppState.currentState);
  const [isClientIdReady, setIsClientIdReady] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false); // New state for overall initialization

  // Initialize Client ID, Load initial settings, and set up i18n
  useEffect(() => {
    const initializeApp = async () => {
      try {
        await getClientId();
        setIsClientIdReady(true);
        console.log('Client ID is ready.');

        const settings = await loadSettings();
        setThemeMode(settings.theme);
        setCurrentLanguage(settings.language);

        if (settings.language === 'system') {
          const deviceLocale = Localization.getLocales()?.[0]?.languageTag || 'en-US';
          setLocale(deviceLocale);
        } else {
          setLocale(settings.language);
        }
        setLoadedSettings(settings);
        console.log('Settings loaded and locale set:', i18n.locale);
        setIsInitialized(true); // Mark initialization as complete
      } catch (error) {
        console.error("Initialization Error:", error);
        setIsInitialized(true); // Still mark as initialized to show app, even with error
      }
    };
    initializeApp();
  }, []);

  // AppState Listener
  useEffect(() => {
    const handleAppStateChange = (nextAppState: AppStateStatus) => {
      setAppState(nextAppState);
    };
    const subscription = AppState.addEventListener("change", handleAppStateChange);
    return () => {
      subscription.remove();
    };
  }, []);

  const updateTheme = (newThemeMode: "light" | "dark" | "system") => {
    const isDark =
      newThemeMode === "system"
        ? colorScheme === "dark"
        : newThemeMode === "dark";
    return isDark ? darkTheme : lightTheme;
  };

  const handleThemeChange = async (newTheme: "light" | "dark" | "system") => {
    setThemeMode(newTheme);
    if (loadedSettings) {
      const updatedSettings: Settings = {
        ...loadedSettings,
        theme: newTheme,
      };
      await saveSettings(updatedSettings);
      setLoadedSettings(updatedSettings);
    }
  };

  const handleLocaleChange = async (newLocale: LanguageCode) => {
    const oldLocale = currentLanguage === 'system'
        ? (Localization.getLocales()?.[0]?.languageTag || 'en-US').split('-')[0]
        : currentLanguage;
    
    setCurrentLanguage(newLocale);
    if (newLocale === 'system') {
        const deviceLocale = Localization.getLocales()?.[0]?.languageTag || 'en-US';
        setLocale(deviceLocale);
    } else {
        setLocale(newLocale);
    }

    if (loadedSettings) {
        const updatedSettings: Settings = { ...loadedSettings, language: newLocale };
        await saveSettings(updatedSettings);
        setLoadedSettings(updatedSettings);
    }

    const newEffectiveLocale = newLocale === 'system'
        ? (Localization.getLocales()?.[0]?.languageTag || 'en-US').split('-')[0]
        : newLocale;

    // Prompt for restart if RTL/LTR direction changes
    const oldIsRTL = oldLocale === 'he';
    const newIsRTL = newEffectiveLocale === 'he';

    if (oldIsRTL !== newIsRTL) {
        Alert.alert(
            t('confirmationModal.restartRequiredTitle'),
            t('settingsScreen.language.restartMessage'),
            [
                {
                    text: t('app.alertButtons.later'),
                    style: "cancel"
                },
                {
                    text: t('app.alertButtons.restartNow'),
                    onPress: () => {
                        // In a real build, you'd use Updates.reloadAsync()
                        // For development in Expo Go, this reloads the JS bundle
                        DevSettings.reload();
                    }
                }
            ]
        );
    }
  };


  const currentTheme = updateTheme(themeMode);

  const navigationTheme = {
    dark: {
      ...DarkTheme,
      colors: {
        ...DarkTheme.colors,
        primary: currentTheme.colors.primary, background: currentTheme.colors.background,
        card: currentTheme.colors.card, text: currentTheme.colors.text,
        border: currentTheme.colors.divider, notification: currentTheme.colors.successLight,
      },
    },
    light: {
      ...DefaultTheme,
      colors: {
        ...DefaultTheme.colors,
        primary: currentTheme.colors.primary, background: currentTheme.colors.background,
        card: currentTheme.colors.card, text: currentTheme.colors.text,
        border: currentTheme.colors.divider, notification: currentTheme.colors.success,
      },
    },
  };

  const statusBarTheme = themeMode === "system" ? colorScheme : themeMode;
  const backgroundColor = currentTheme.colors.background;

  if (!isInitialized) { // Check overall initialization
    return (
      <SafeAreaView style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: backgroundColor }}>
        <Text style={{ color: currentTheme.colors.text }}>{t('app.initializing')}</Text>
      </SafeAreaView>
    );
  }

  return (
    <ThemeProvider theme={createTheme(currentTheme)}>
      <SafeAreaView style={{ flex: 1, backgroundColor: backgroundColor }}>
        <StatusBar
          style={statusBarTheme === "dark" ? "light" : "dark"}
          backgroundColor={backgroundColor}
          translucent={false}
        />
        <NavigationContainer
          theme={
            currentTheme.mode === "dark"
              ? navigationTheme.dark
              : navigationTheme.light
          }
        >
          <AppNavigator onThemeChange={handleThemeChange} onLocaleChange={handleLocaleChange} />
        </NavigationContainer>
        <Toast />
      </SafeAreaView>
    </ThemeProvider>
  );
};

export default App;

---------- END App.tsx ----------


---------- adaptive-icon.png ----------
(Image file - content not included)
---------- END adaptive-icon.png ----------


---------- favicon.png ----------
(Image file - content not included)
---------- END favicon.png ----------


---------- icon.png ----------
(Image file - content not included)
---------- END icon.png ----------


---------- splash.png ----------
(Image file - content not included)
---------- END splash.png ----------


---------- eas.json ----------
{
  "cli": {
    "version": ">= 13.4.1",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "android": {
        "buildType": "apk"
      },
      "env": {
        "BACKEND_URL": "https://macros-vision-ai.xyz"
      }
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}
---------- END eas.json ----------


---------- index.ts ----------
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);

---------- END index.ts ----------


---------- package.json ----------
{
  "name": "macrosvisionai",
  "license": "0BSD",
  "version": "1.0.0",
  "main": "index.ts",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@react-native-async-storage/async-storage": "^2.1.2",
    "@react-native-community/datetimepicker": "8.2.0",
    "@react-native-picker/picker": "^2.11.0",
    "@react-navigation/bottom-tabs": "^7.3.1",
    "@react-navigation/native": "^7.0.17",
    "@react-navigation/native-stack": "^7.3.12",
    "@rneui/base": "^4.0.0-rc.7",
    "@rneui/themed": "^4.0.0-rc.8",
    "@types/d3-scale": "^4.0.9",
    "d3-scale": "^4.0.2",
    "date-fns": "^4.1.0",
    "expo": "~52.0.40",
    "expo-constants": "~16.0.2",
    "expo-document-picker": "^13.0.3",
    "expo-file-system": "^18.0.12",
    "expo-image-manipulator": "~13.0.5",
    "expo-image-picker": "^16.0.6",
    "expo-localization": "~15.0.3",
    "expo-sharing": "~13.0.1",
    "expo-status-bar": "~2.0.1",
    "i18n-js": "^4.5.1",
    "react": "18.3.1",
    "react-native": "0.76.7",
    "react-native-config": "^1.5.5",
    "react-native-get-random-values": "^1.11.0",
    "react-native-mime-types": "^2.5.0",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "^4.14.1",
    "react-native-screens": "^4.9.2",
    "react-native-svg": "^15.11.2",
    "react-native-toast-message": "^2.2.1",
    "react-native-uuid": "^2.0.3",
    "react-native-webview": "^13.13.4",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/i18n-js": "^4.0.1",
    "@types/react": "~18.3.12",
    "@types/react-native": "^0.73.0",
    "@types/react-native-svg-charts": "^5.0.16",
    "@types/uuid": "^10.0.0",
    "typescript": "^5.3.3",
    "victory": "^37.3.6"
  },
  "private": true
}
---------- END package.json ----------


---------- projectToFile.js ----------
const fs = require('fs');
const path = require('path');

async function generateProjectStructureAndContent(projectRoot, outputFile) {
    const excludedDirs = ['node_modules', '.git', '.expo', 'android', 'ios', '__tests__', 'dist', 'build', '.vscode'];
    const excludedFiles = ['.DS_Store', 'package-lock.json', 'yarn.lock', 'bun.lockb', 'metro.config.js', 'babel.config.js'];
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.ico']; // Add more if needed

    let fileStructureTree = '';  // For the initial tree structure
    let fileContents = '';      // For the file contents

    async function traverseDirectory(dir, indent = '') {
        const entries = await fs.promises.readdir(dir, { withFileTypes: true });

        for (const entry of entries) {
            const fullPath = path.join(dir, entry.name);

            if (excludedDirs.includes(entry.name)) {
                continue;
            }

            if (entry.isDirectory()) {
                fileStructureTree += `${indent}${entry.name}/\n`;
                await traverseDirectory(fullPath, indent + '  ');
            } else if (entry.isFile()) {
                if (excludedFiles.includes(entry.name)) {
                    continue;
                }
                fileStructureTree += `${indent}${entry.name}\n`;
                const fileExtension = path.extname(entry.name).toLowerCase();

                if (!imageExtensions.includes(fileExtension)) {
                    fileContents += `\n---------- ${entry.name} ----------\n`;
                    try {
                        const fileContent = await fs.promises.readFile(fullPath, 'utf-8');
                        fileContents += `${fileContent}\n`;
                    } catch (readError) {
                        fileContents += `ERROR READING FILE: ${readError.message}\n`;
                    }
                    fileContents += `---------- END ${entry.name} ----------\n\n`;
                } else {
                     fileContents += `\n---------- ${entry.name} ----------\n`;
                     fileContents += `(Image file - content not included)\n`;
                     fileContents += `---------- END ${entry.name} ----------\n\n`;
                }
            }
        }
    }

    try {
        await traverseDirectory(projectRoot);
        const fullOutput = fileStructureTree + fileContents;

        await fs.promises.writeFile(outputFile, fullOutput);
        console.log(`Project structure and content written to ${outputFile}`);

    } catch (error) {
        console.error('An error occurred:', error);
        process.exit(1);
    }
}

// --- Main execution ---

const projectRoot = process.cwd(); // Use the current working directory
const outputFile = 'project_structure.txt';

// Check if the projectRoot exists.
fs.stat(projectRoot, (err, stats) => {
    if (err) {
        console.error(`Error: Project root directory "${projectRoot}" not found or not accessible.`);
        process.exit(1);
    }

    if (!stats.isDirectory()) {
        console.error(`Error: "${projectRoot}" is not a directory.`);
        process.exit(1);
    }

    generateProjectStructureAndContent(projectRoot, outputFile);
});
---------- END projectToFile.js ----------


---------- AccountSettings.tsx ----------
// src/components/AccountSettings.tsx
import React from 'react';
import { View, ActivityIndicator } from 'react-native';
import { Text, makeStyles, Button, Icon, ListItem, useTheme } from '@rneui/themed';
import { t } from '../localization/i18n';

interface AccountSettingsProps {
    userCoins: number | null;
    isLoadingCoins: boolean;
    isAddingCoins: boolean;
    onAddTestCoins: () => void;
}

const AccountSettings: React.FC<AccountSettingsProps> = ({
    userCoins,
    isLoadingCoins,
    isAddingCoins,
    onAddTestCoins,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    return (
        <View>
            <ListItem bottomDivider containerStyle={styles.listItem}>
                <Icon name="database" type="material-community" color={theme.colors.warning} />
                <ListItem.Content>
                    <ListItem.Title style={styles.listItemTitle}>{t('accountSettings.coinBalance')}</ListItem.Title>
                </ListItem.Content>
                {isLoadingCoins ? (
                    <ActivityIndicator size="small" color={theme.colors.primary} />
                ) : (
                    <Text style={styles.coinValue}>{userCoins !== null ? userCoins : t('accountSettings.notApplicable')}</Text>
                )}
            </ListItem>

            {/* REMOVE OR PROTECT THIS BUTTON IN PRODUCTION */}
            <Button
                title={t('accountSettings.addTestCoins')}
                onPress={onAddTestCoins}
                buttonStyle={[styles.button, { backgroundColor: theme.colors.success, marginTop: 10 }]}
                icon={<Icon name="plus-circle-outline" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
                loading={isAddingCoins}
                disabled={isAddingCoins || isLoadingCoins}
            />
            <Text style={styles.testButtonWarning}>
                {t('accountSettings.testButtonWarning')}
            </Text>
        </View>
    );
};

const useStyles = makeStyles((theme) => ({
    listItem: {
        backgroundColor: theme.colors.background,
        paddingVertical: 15,
    },
    listItemTitle: {
        color: theme.colors.text,
        fontWeight: '500',
        textAlign: 'left',
    },
    coinValue: {
        color: theme.colors.primary,
        fontWeight: 'bold',
        fontSize: 16,
    },
    button: {
        marginBottom: 10,
        borderRadius: 8,
    },
    testButtonWarning: {
        fontSize: 12,
        color: theme.colors.grey3,
        fontStyle: 'italic',
        textAlign: 'center',
        marginTop: 0,
        marginBottom: 15,
        marginHorizontal: 10,
    },
}));

export default AccountSettings;
---------- END AccountSettings.tsx ----------


---------- AddEntryModal.tsx ----------
// src/components/AddEntryModal.tsx
import React, {
  useEffect,
  useState,
  useMemo,
  useCallback,
  useRef,
} from "react";
import {
  View,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  TouchableOpacity,
  ScrollView,
  Dimensions,
  Image,
  StyleSheet,
  ActivityIndicator,
  Alert,
  Keyboard,
} from "react-native";
import {
  Button,
  Input,
  Text,
  ListItem,
  Overlay,
  SearchBar,
  makeStyles,
  useTheme,
  Icon,
  ButtonGroup,
} from "@rneui/themed";
import { Food } from "../types/food";
import { isValidNumberInput } from "../utils/validationUtils";
import {
  loadRecentFoods,
  saveRecentFoods,
  loadLastUsedPortions,
  saveLastUsedPortions,
  LastUsedPortions,
} from "../services/storageService";
import { getFoodIconUrl } from "../utils/iconUtils";
import { getGramsFromNaturalLanguage } from "../utils/units";
import Toast from "react-native-toast-message";
import * as ImagePicker from "expo-image-picker";
import {
  EstimatedFoodItem,
  getMultipleFoodsFromImage,
  BackendError,
  determineMimeType,
} from "../utils/macros";
import { compressImageIfNeeded, getBase64FromUri } from "../utils/imageUtils";
import { v4 as uuidv4 } from "uuid";
import QuickAddList from "./QuickAddList";
import i18n, { t } from '../localization/i18n';
import { calculateDailyEntryGrade, FoodGradeResult } from "../utils/gradingUtils";
import { Settings } from '../types/settings';

interface AddEntryModalProps {
  isVisible: boolean;
  toggleOverlay: () => void;
  selectedFood: Food | null;
  grams: string;
  setGrams: (grams: string) => void;
  handleAddEntry: () => void;
  handleAddMultipleEntries: (entries: { food: Food; grams: number }[]) => void;
  foods: Food[];
  handleSelectFood: (item: Food | null) => void;
  updateSearch: (search: string) => void;
  search: string;
  isEditMode: boolean;
  initialGrams?: string;
  onAddNewFoodRequest: () => void;
  onCommitFoodToLibrary: (foodData: Omit<Food, 'id'> | Food, isUpdate: boolean) => Promise<Food | null>;
  dailyGoals: Settings['dailyGoals'];
}

const KEYBOARD_VERTICAL_OFFSET = Platform.OS === "ios" ? 80 : 0;

type UnitMode = "grams" | "auto";
type ModalMode = "normal" | "quickAddSelect";

type ListItemType =
  | { type: "searchBar"; key: string }
  | { type: "recentFoods"; key: string }
  | { type: "searchResults"; key: string; data: Food }
  | { type: "noResults"; key: string }
  | { type: "amountInput"; key: string }
  | { type: "quickAddHeader"; key: string }
  | { type: "quickAddList"; key: string }
  | { type: "spacer"; key: string; height: number };

const AddEntryModal: React.FC<AddEntryModalProps> = ({
  isVisible,
  toggleOverlay,
  selectedFood,
  grams,
  setGrams,
  handleAddEntry,
  handleAddMultipleEntries,
  foods, 
  handleSelectFood,
  updateSearch,
  search,
  isEditMode,
  initialGrams,
  onAddNewFoodRequest,
  onCommitFoodToLibrary,
  dailyGoals,
}) => {
  const { theme } = useTheme();
  const styles = useStyles();
  const [recentFoods, setRecentFoods] = useState<Food[]>([]);
  const MAX_RECENT_FOODS = 5;
  const [foodIcons, setFoodIcons] = useState<{
    [foodName: string]: string | null | undefined;
  }>({});
  const currentlyFetchingIcons = useRef<Set<string>>(new Set());

  const [unitMode, setUnitMode] = useState<UnitMode>("grams");
  const [autoInput, setAutoInput] = useState("");
  const [isAiLoading, setIsAiLoading] = useState(false);

  const [modalMode, setModalMode] = useState<ModalMode>("normal");
  const [quickAddLoading, setQuickAddLoading] = useState(false);
  const [quickAddItems, setQuickAddItems] = useState<EstimatedFoodItem[]>([]);
  const [selectedQuickAddIndices, setSelectedQuickAddIndices] = useState<
    Set<number>
  >(new Set());
  const [editingQuickAddItemIndex, setEditingQuickAddItemIndex] = useState<
    number | null
  >(null);
  const [editedFoodName, setEditedFoodName] = useState<string>("");
  const [editedGrams, setEditedGrams] = useState<string>("");

  const [lastUsedPortions, setLastUsedPortions] = useState<LastUsedPortions>({});

  const screenWidth = Dimensions.get("window").width;
  const isActionDisabled = isAiLoading || quickAddLoading;

  const filteredFoods = useMemo(() => {
    if (!search) return [];
    const searchTerm = search.toLowerCase();
    return foods.filter((food) =>
      food.name.toLowerCase().includes(searchTerm)
    );
  }, [foods, search]);

  const numericGrams = useMemo(() => parseFloat(grams), [grams]);

  const foodGradeResult = useMemo((): FoodGradeResult | null => {
      if (selectedFood && isValidNumberInput(grams) && numericGrams > 0 && dailyGoals) {
          return calculateDailyEntryGrade(selectedFood, numericGrams, dailyGoals);
      }
      return null;
  }, [selectedFood, grams, numericGrams, dailyGoals]);

  useEffect(() => {
    if (isVisible) {
        loadLastUsedPortions().then(setLastUsedPortions).catch(err => {});
    }
  }, [isVisible]);

  useEffect(() => {
    if (!isVisible) {
      const timer = setTimeout(() => {
        handleSelectFood(null);
        updateSearch("");
        setModalMode("normal");
        setQuickAddItems([]);
        setSelectedQuickAddIndices(new Set());
        setEditingQuickAddItemIndex(null);
        setGrams("");
        setUnitMode("grams");
        setAutoInput("");
        setIsAiLoading(false);
        setQuickAddLoading(false);
        setFoodIcons({}); 
        currentlyFetchingIcons.current.clear();
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [isVisible, handleSelectFood, updateSearch, setGrams]);

  useEffect(() => {
    if (isVisible) {
       if (modalMode === "normal") {
           loadRecentFoods().then(setRecentFoods).catch(err => {});
       }
      if (modalMode === "normal") {
        if (isEditMode && selectedFood && initialGrams !== undefined) {
          setGrams(initialGrams); setUnitMode("grams"); setAutoInput("");
        } else if (!isEditMode && !selectedFood) {
          setGrams(""); setUnitMode("grams"); setAutoInput("");
        }
      } else if (modalMode === "quickAddSelect") {
        handleSelectFood(null); updateSearch(""); setGrams("");
        setUnitMode("grams"); setAutoInput("");
      }
    }
  }, [ isVisible, modalMode, isEditMode, selectedFood, initialGrams, handleSelectFood, updateSearch, setGrams ]);

  const handleRequestIcon = useCallback((foodName: string) => {
    if (!foodName || foodIcons[foodName] !== undefined || currentlyFetchingIcons.current.has(foodName)) return;
    currentlyFetchingIcons.current.add(foodName);
    setFoodIcons(prev => ({ ...prev, [foodName]: undefined })); 
    getFoodIconUrl(foodName)
      .then(iconUrl => setFoodIcons(prevIcons => ({ ...prevIcons, [foodName]: iconUrl })))
      .catch(() => setFoodIcons(prevIcons => ({ ...prevIcons, [foodName]: null }))) 
      .finally(() => currentlyFetchingIcons.current.delete(foodName));
  }, [foodIcons]);

  useEffect(() => {
      if (!isVisible) return;
      let itemsToCheck: (Food | EstimatedFoodItem)[] = [];
      if (modalMode === "normal") {
          itemsToCheck = search ? filteredFoods : recentFoods;
      } else if (modalMode === "quickAddSelect" && quickAddItems.length > 0) {
          itemsToCheck = quickAddItems;
      }

      const namesToFetch = new Set<string>();
      itemsToCheck.forEach(item => {
          const name = (item as Food).name || (item as EstimatedFoodItem).foodName;
          if (name && foodIcons[name] === undefined && !currentlyFetchingIcons.current.has(name)) {
              namesToFetch.add(name);
          }
      });
      if (namesToFetch.size > 0) namesToFetch.forEach(name => handleRequestIcon(name));
  }, [isVisible, modalMode, search, filteredFoods, recentFoods, quickAddItems, handleRequestIcon, foodIcons]);


  const addToRecentFoods = useCallback(async (food: Food) => {
    if (!food || !food.id) return;
    setRecentFoods((prevRecent) => {
      if (prevRecent.length > 0 && prevRecent[0].id === food.id) return prevRecent;
      const updated = prevRecent.filter((rf) => rf.id !== food.id);
      updated.unshift(food);
      const trimmed = updated.slice(0, MAX_RECENT_FOODS);
      saveRecentFoods(trimmed).catch(() => {});
      return trimmed;
    });
  }, [MAX_RECENT_FOODS]);

  const servingSizeSuggestions = useMemo(() => {
    if (!selectedFood || !selectedFood.id) return [];
    const suggestions = [];
    const lastUsed = lastUsedPortions[selectedFood.id];

    if (lastUsed) {
      suggestions.push({ label: t('addEntryModal.lastUsedServing', {grams: lastUsed}), value: String(lastUsed) });
    }
    
    const defaultSuggestions = [
        { label: "50g", value: "50" },
        { label: "100g", value: "100" },
        { label: "150g", value: "150" },
        { label: "200g", value: "200" }
    ];

    defaultSuggestions.forEach(sugg => {
        // Add default suggestion only if it's not the same as lastUsed (to avoid duplicates in value)
        if (!lastUsed || String(lastUsed) !== sugg.value) {
            suggestions.push(sugg);
        }
    });

    return suggestions;
  }, [selectedFood, lastUsedPortions, i18n.locale]);

  const handleEstimateGrams = useCallback(async () => {
    Keyboard.dismiss();
    if (!selectedFood || !autoInput.trim()) {
      Alert.alert(t('addEntryModal.alertInputMissing'), t('addEntryModal.alertInputMissingMessage')); return;
    }
    if (isAiLoading) return; setIsAiLoading(true);
    try {
      const estimatedGrams = await getGramsFromNaturalLanguage(selectedFood.name, autoInput);
      const roundedGrams = String(Math.round(estimatedGrams)); setGrams(roundedGrams);
      setUnitMode("grams"); setAutoInput("");
      Toast.show({ type: "success", text1: t('addEntryModal.alertGramsEstimated'), text2: t('addEntryModal.alertGramsEstimatedMessage', {grams: roundedGrams, foodName: selectedFood.name}), position: "bottom", });
    } catch (error: any) { /* Error handled by getGramsFromNaturalLanguage */ }
    finally { setIsAiLoading(false); }
  }, [selectedFood, autoInput, isAiLoading, setGrams]);

  const handleAddOrUpdateSingleEntry = useCallback(async () => {
    Keyboard.dismiss();
    if (!selectedFood || !selectedFood.id) { Alert.alert(t('addEntryModal.alertFoodNotSelected'), t('addEntryModal.alertFoodNotSelectedMessage')); return; }
    if (!isValidNumberInput(grams) || numericGrams <= 0) { Alert.alert(t('addEntryModal.alertInvalidAmount'), t('addEntryModal.alertInvalidAmountMessage')); return; }
    if (isActionDisabled) return; 
    
    handleAddEntry(); // This will trigger the save in DailyEntryScreen

    if (!isEditMode) {
        addToRecentFoods(selectedFood);
        const updatedPortions = { ...lastUsedPortions, [selectedFood.id]: numericGrams };
        setLastUsedPortions(updatedPortions);
        saveLastUsedPortions(updatedPortions).catch(() => {});
    } else if (isEditMode && selectedFood.id) { // Also update last used portion on edit
        const updatedPortions = { ...lastUsedPortions, [selectedFood.id]: numericGrams };
        setLastUsedPortions(updatedPortions);
        saveLastUsedPortions(updatedPortions).catch(() => {});
    }

  }, [ selectedFood, grams, numericGrams, isActionDisabled, isEditMode, handleAddEntry, addToRecentFoods, lastUsedPortions ]);

  const handleInternalSelectFood = useCallback( (item: Food | null) => {
      handleSelectFood(item); 
      updateSearch(""); 
      Keyboard.dismiss();
      if (!isEditMode && item?.id !== selectedFood?.id) { 
          setUnitMode("grams"); 
          setAutoInput(""); 
          const lastPortion = item?.id ? lastUsedPortions[item.id] : undefined;
          if (lastPortion) {
            setGrams(String(lastPortion));
          } else {
            setGrams("");
          }
      }
    }, [handleSelectFood, updateSearch, isEditMode, selectedFood, setGrams, lastUsedPortions]
  );

  const pickImageAndAnalyze = useCallback( async (source: "camera" | "gallery") => {
      if (isEditMode) return;
      setQuickAddItems([]); setSelectedQuickAddIndices(new Set()); setEditingQuickAddItemIndex(null);
      setModalMode("quickAddSelect"); setQuickAddLoading(true);
      handleSelectFood(null); updateSearch(""); setGrams("");
      let permissionResult; let pickerResult: ImagePicker.ImagePickerResult;
      try {
        if (source === "camera") {
          permissionResult = await ImagePicker.requestCameraPermissionsAsync();
          if (!permissionResult.granted) { Alert.alert(t('addEntryModal.alertQuickAddPermission'), t('addEntryModal.alertQuickAddCameraPermission')); throw new Error("Permission denied"); }
          pickerResult = await ImagePicker.launchCameraAsync({ quality: 1, exif: false });
        } else {
          permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
          if (!permissionResult.granted) { Alert.alert(t('addEntryModal.alertQuickAddPermission'), t('addEntryModal.alertQuickAddGalleryPermission')); throw new Error("Permission denied"); }
          pickerResult = await ImagePicker.launchImageLibraryAsync({ mediaTypes: ImagePicker.MediaTypeOptions.Images, quality: 1 });
        }
        if (pickerResult.canceled) throw new Error(t('addEntryModal.alertQuickAddUserCancelled'));
        if (pickerResult.assets && pickerResult.assets.length > 0) {
          const originalAsset = pickerResult.assets[0];
          const compressedResult = await compressImageIfNeeded(originalAsset);
          const assetForAnalysis = compressedResult ? { ...originalAsset, uri: compressedResult.uri, width: compressedResult.width, height: compressedResult.height, mimeType: 'image/jpeg' } : originalAsset;
          const base64Image = await getBase64FromUri(assetForAnalysis.uri);
          const mimeType = determineMimeType(assetForAnalysis);
          const results = await getMultipleFoodsFromImage(base64Image, mimeType);
          if (results.length === 0) { setTimeout(() => { setModalMode("normal"); setQuickAddLoading(false); }, 500); }
          else {
            setQuickAddItems(results); setSelectedQuickAddIndices(new Set(results.map((_, i) => i)));
            results.forEach(qaItem => { if (qaItem.foodName) { handleRequestIcon(qaItem.foodName); } }); 
            setTimeout(() => setQuickAddLoading(false), 150);
          }
        } else { throw new Error(t('addEntryModal.alertQuickAddCouldNotSelect')); }
      } catch (error: any) {
        if ( error.message !== t('addEntryModal.alertQuickAddUserCancelled') && error.message !== "Permission denied" && !(error instanceof BackendError) ) {
          Alert.alert(t('addEntryModal.alertQuickAddError'), error.message || t('addEntryModal.alertQuickAddErrorMessage'));
        }
        setModalMode("normal"); setQuickAddItems([]); setSelectedQuickAddIndices(new Set()); setQuickAddLoading(false);
      }
    }, [isEditMode, handleSelectFood, updateSearch, setGrams, handleRequestIcon]
  );

  const handleQuickAddImage = useCallback(async () => {
    Keyboard.dismiss(); if (isEditMode || isActionDisabled) return;
    if (editingQuickAddItemIndex !== null) { Alert.alert(t('addEntryModal.alertQuickAddFinishEditing'), t('addEntryModal.alertQuickAddFinishEditingSaveOrCancel')); return; }
    Alert.alert( t('addEntryModal.alertQuickAddFromImageTitle'), t('addEntryModal.alertQuickAddFromImageMessage'),
      [ { text: t('addEntryModal.cancel'), style: "cancel" },
        { text: t('addEntryModal.camera'), onPress: () => pickImageAndAnalyze("camera") },
        { text: t('addEntryModal.gallery'), onPress: () => pickImageAndAnalyze("gallery") }, ]
    );
  }, [ isEditMode, editingQuickAddItemIndex, isActionDisabled, pickImageAndAnalyze ]);

  const handleToggleQuickAddItem = useCallback( (index: number) => {
      if (editingQuickAddItemIndex !== null || isActionDisabled) return;
      setSelectedQuickAddIndices((prev) => { const newSet = new Set(prev); if (newSet.has(index)) newSet.delete(index); else newSet.add(index); return newSet; });
    }, [editingQuickAddItemIndex, isActionDisabled]
  );

  const handleEditQuickAddItem = useCallback( (index: number) => {
      if (editingQuickAddItemIndex !== null || isActionDisabled) { if (editingQuickAddItemIndex !== null) Alert.alert(t('addEntryModal.alertQuickAddFinishEditing'), t('addEntryModal.alertQuickAddFinishEditingSaveOrCancel')); return; }
      const item = quickAddItems[index]; setEditingQuickAddItemIndex(index);
      setEditedFoodName(item.foodName); setEditedGrams(String(Math.round(item.estimatedWeightGrams)));
    }, [editingQuickAddItemIndex, quickAddItems, isActionDisabled]
  );

  const handleSaveQuickAddItemEdit = useCallback(() => {
    if (editingQuickAddItemIndex === null || isActionDisabled) return;
    const trimmedName = editedFoodName.trim(); if (!trimmedName) { Alert.alert(t('addEntryModal.alertQuickAddInvalidName'), t('addEntryModal.alertQuickAddInvalidNameMessage')); return; }
    const numericEditedGrams = parseFloat(editedGrams); if (!isValidNumberInput(editedGrams) || numericEditedGrams <= 0) { Alert.alert(t('addEntryModal.alertQuickAddInvalidGrams'), t('addEntryModal.alertQuickAddInvalidGramsMessage')); return; }
    const roundedGrams = Math.round(numericEditedGrams);
    setQuickAddItems((prevItems) => prevItems.map((item, index) => index === editingQuickAddItemIndex ? { ...item, foodName: trimmedName, estimatedWeightGrams: roundedGrams, } : item ));
    if (trimmedName) { handleRequestIcon(trimmedName); } 
    setEditingQuickAddItemIndex(null); setEditedFoodName(""); setEditedGrams(""); Keyboard.dismiss();
  }, [editingQuickAddItemIndex, editedFoodName, editedGrams, isActionDisabled, handleRequestIcon]);

  const handleCancelQuickAddItemEdit = useCallback(() => {
    if (isActionDisabled) return; setEditingQuickAddItemIndex(null);
    setEditedFoodName(""); setEditedGrams(""); Keyboard.dismiss();
  }, [isActionDisabled]);

  const handleConfirmQuickAdd = useCallback(() => {
    Keyboard.dismiss(); if (isEditMode || isActionDisabled) return;
    if (editingQuickAddItemIndex !== null) { Alert.alert(t('addEntryModal.alertQuickAddFinishEditing'), t('addEntryModal.alertQuickAddFinishEditingSaveOrCancel')); return; }
    if (selectedQuickAddIndices.size === 0) { Alert.alert(t('addEntryModal.alertQuickAddNoItemsSelected'), t('addEntryModal.alertQuickAddNoItemsSelectedMessage')); return; }
    try {
      const entriesToAdd: { food: Food; grams: number }[] = [];
      const newPortionsToSave: LastUsedPortions = { ...lastUsedPortions };

      Array.from(selectedQuickAddIndices).forEach((index) => {
        if (index >= 0 && index < quickAddItems.length) {
          const item = quickAddItems[index];
          const existingFood = foods.find(f => f.name.toLowerCase() === item.foodName.toLowerCase());
          let foodToAdd: Food = existingFood ? existingFood : { id: uuidv4(), name: item.foodName, calories: Math.round(Number(item.calories_per_100g) || 0), protein: Math.round(Number(item.protein_per_100g) || 0), carbs: Math.round(Number(item.carbs_per_100g) || 0), fat: Math.round(Number(item.fat_per_100g) || 0), };
          const entryGrams = Math.max(1, Math.round(Number(item.estimatedWeightGrams) || 1));
          entriesToAdd.push({ food: foodToAdd, grams: entryGrams });
          if (foodToAdd.id) { // Save last used portion for this food
            newPortionsToSave[foodToAdd.id] = entryGrams;
          }
        }
      });

      if (entriesToAdd.length > 0) {
        handleAddMultipleEntries(entriesToAdd);
        setLastUsedPortions(newPortionsToSave);
        saveLastUsedPortions(newPortionsToSave).catch(() => {});
      } else {
        Alert.alert(t('addEntryModal.alertQuickAddNothingToAdd'), t('addEntryModal.alertQuickAddNothingToAddMessage'));
      }
    } catch (error) { Alert.alert(t('addEntryModal.alertQuickAddErrorPreparing'), t('addEntryModal.alertQuickAddErrorPreparingMessage')); }
  }, [ foods, quickAddItems, selectedQuickAddIndices, editingQuickAddItemIndex, handleAddMultipleEntries, isEditMode, isActionDisabled, lastUsedPortions ]);

  const handleQuickAddGramsChange = useCallback((text: string) => {
    const cleanedText = text.replace(/[^0-9]/g, ""); setEditedGrams(cleanedText);
  }, []);

  const handleSaveQuickAddItemToLibrary = useCallback(async (
    item: EstimatedFoodItem,
    setSavingState: (isSaving: boolean) => void
  ) => {
    setSavingState(true);
    try {
        const foodData: Omit<Food, 'id'> = {
            name: item.foodName,
            calories: Math.round(item.calories_per_100g),
            protein: Math.round(item.protein_per_100g),
            carbs: Math.round(item.carbs_per_100g),
            fat: Math.round(item.fat_per_100g),
        };

        const existingFood = foods.find(f => f.name.toLowerCase() === item.foodName.toLowerCase());

        if (existingFood) {
            Alert.alert(
                t('addEntryModal.alertOverwriteFoodTitle'),
                t('addEntryModal.alertOverwriteFoodMessage', { foodName: item.foodName }),
                [
                    { text: t('addEntryModal.cancel'), style: 'cancel', onPress: () => setSavingState(false) },
                    {
                        text: t('addEntryModal.overwrite'),
                        onPress: async () => {
                            const foodToUpdate: Food = { ...existingFood, ...foodData }; 
                            const updatedFood = await onCommitFoodToLibrary(foodToUpdate, true);
                            if (updatedFood) {
                                Toast.show({ type: 'success', text1: t('addEntryModal.toastFoodUpdatedInLibrary', { foodName: updatedFood.name }), position: 'bottom' });
                                handleRequestIcon(updatedFood.name); 
                            }
                            setSavingState(false);
                        },
                    },
                ]
            );
        } else {
            const newFood = await onCommitFoodToLibrary(foodData, false);
            if (newFood) {
                Toast.show({ type: 'success', text1: t('addEntryModal.toastFoodSavedToLibrary', { foodName: newFood.name }), position: 'bottom' });
                handleRequestIcon(newFood.name);
            }
            setSavingState(false);
        }
    } catch (error) {
        console.error("Error saving quick add item to library:", error);
        Toast.show({ type: 'error', text1: t('addEntryModal.toastErrorSavingToLibrary'), position: 'bottom' });
        setSavingState(false);
    }
  }, [foods, onCommitFoodToLibrary, handleRequestIcon]);


  const isAddButtonDisabled = modalMode !== "normal" || !selectedFood || !isValidNumberInput(grams) || numericGrams <= 0 || isActionDisabled;
  const isAiButtonDisabled = modalMode !== "normal" || !selectedFood || !autoInput.trim() || isActionDisabled;
  const isQuickAddConfirmDisabled = isEditMode || modalMode !== "quickAddSelect" || selectedQuickAddIndices.size === 0 || editingQuickAddItemIndex !== null || isActionDisabled || quickAddLoading;
  const isQuickAddImageButtonDisabled = isEditMode || isActionDisabled;

  const listData = useMemo((): ListItemType[] => {
    const items: ListItemType[] = [];
    if (modalMode === "normal") {
      items.push({ type: "searchBar", key: "searchBar" });
      if (!search && recentFoods.length > 0) items.push({ type: "recentFoods", key: "recentFoods" });
      if (search) {
        if (filteredFoods.length > 0) filteredFoods.forEach((food) => items.push({ type: "searchResults", key: `search-${food.id ?? food.name}`, data: food, }));
        else items.push({ type: "noResults", key: "noResults" });
      }
      if (selectedFood) items.push({ type: "amountInput", key: "amountInput" });
    } else if (modalMode === "quickAddSelect") {
      items.push({ type: "quickAddHeader", key: "quickAddHeader" });
      items.push({ type: "quickAddList", key: "quickAddList" });
    }
    items.push({ type: "spacer", key: "bottom-spacer", height: 80 });
    return items;
  }, [ modalMode, search, recentFoods, filteredFoods, selectedFood, quickAddItems, editingQuickAddItemIndex, selectedQuickAddIndices, quickAddLoading ]);

  const renderListItem = useCallback(
    ({ item }: { item: ListItemType }): React.ReactElement | null => {
      switch (item.type) {
        case "searchBar": return ( <SearchBar placeholder={t('addEntryModal.searchPlaceholder')} onChangeText={updateSearch} value={search} platform={Platform.OS === "ios" ? "ios" : "android"} containerStyle={styles.searchBarContainer} inputContainerStyle={styles.searchBarInputContainer} inputStyle={styles.searchInputStyle} onCancel={() => updateSearch("")} showCancel={Platform.OS === "ios"} onClear={() => updateSearch("")} disabled={isActionDisabled || modalMode !== "normal"} /> );
        case "recentFoods":
          if (!recentFoods || recentFoods.length === 0) return null;
          return ( <View style={styles.recentFoodsSection}><Text style={styles.sectionTitle}>{t('addEntryModal.recent')}</Text><ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={styles.recentFoodsContainer} keyboardShouldPersistTaps="handled">
                {recentFoods.map((food) => { const iconStatus = foodIcons[food.name];
                    return ( <TouchableOpacity key={`recent-${food.id ?? food.name}`} style={[ styles.recentFoodItem, screenWidth < 350 && styles.smallRecentFoodItem, selectedFood?.id === food.id && styles.selectedRecentFoodItem, isActionDisabled && styles.disabledOverlay, ]} onPress={() => !isActionDisabled && handleInternalSelectFood(food)} disabled={isActionDisabled} >
                        {iconStatus === undefined ? <ActivityIndicator size="small" color={theme.colors.grey3} style={styles.foodIconSmall} /> : iconStatus ? <Image source={{ uri: iconStatus }} style={styles.foodIconSmall} resizeMode="contain" /> : <View style={[styles.foodIconSmall, styles.iconPlaceholderSmall]}><Icon name="fastfood" type="material" size={12} color={theme.colors.grey2} /></View> }
                        <Text style={[styles.recentFoodText, screenWidth < 350 && styles.smallRecentFoodText]} numberOfLines={1} ellipsizeMode="tail">{food.name}</Text>
                      </TouchableOpacity> ); })}</ScrollView></View> );
        case "searchResults": { const foodItem = item.data; const isSelected = selectedFood?.id === foodItem.id; const iconStatus = foodIcons[foodItem.name]; 
          return ( <TouchableOpacity onPress={() => !isActionDisabled && handleInternalSelectFood(foodItem)} disabled={isActionDisabled} style={[isActionDisabled && styles.disabledOverlay]}><ListItem bottomDivider containerStyle={[styles.listItemContainer, isSelected && styles.selectedListItem]}>
                {iconStatus === undefined ? <ActivityIndicator size="small" color={theme.colors.grey3} style={styles.foodIcon} /> : iconStatus ? <Image source={{ uri: iconStatus }} style={styles.foodIcon} resizeMode="contain" /> : <View style={styles.defaultIconContainer}><Icon name="restaurant" type="material" size={18} color={theme.colors.grey3} /></View> }
                <ListItem.Content><ListItem.Title style={styles.listItemTitle}>{foodItem.name}</ListItem.Title></ListItem.Content>
                {isSelected && (<Icon name="checkmark-circle" type="ionicon" color={theme.colors.primary} size={24} />)}</ListItem></TouchableOpacity> ); }
        case "noResults":
          return (
            <View style={styles.noResultsContainer}>
              <Text style={styles.noFoodsText}>
                {modalMode === "quickAddSelect"
                  ? t('addEntryModal.noQuickAddResults')
                  : t('addEntryModal.noResults', { searchTerm: search })}
              </Text>
              {modalMode === "normal" && search && (
                <Button
                  title={t('addEntryModal.addNewFoodButton')}
                  onPress={onAddNewFoodRequest}
                  type="outline"
                  buttonStyle={styles.addNewFoodButton}
                  titleStyle={styles.addNewFoodButtonTitle}
                  icon={<Icon name="add-circle-outline" type="ionicon" size={20} color={theme.colors.primary} />}
                  disabled={isActionDisabled}
                />
              )}
            </View>
          );
        case "amountInput": if (!selectedFood) return null;
          return ( <View style={styles.amountSection}><View style={styles.unitSelectorContainer}>
                <View style={styles.amountLabelContainer}>
                    <Text style={styles.inputLabel}>{t('addEntryModal.amount')}</Text>
                    {foodGradeResult && (
                        <Text style={[styles.gradePill, { backgroundColor: foodGradeResult.color }]}>
                            {foodGradeResult.letter}
                        </Text>
                    )}
                </View>
                <ButtonGroup buttons={[t('addEntryModal.grams'), t('addEntryModal.autoAi')]} selectedIndex={unitMode === "grams" ? 0 : 1} onPress={(index) => !isActionDisabled && setUnitMode(index === 0 ? "grams" : "auto")} containerStyle={styles.buttonGroupContainer} selectedButtonStyle={{ backgroundColor: theme.colors.primary, }} textStyle={styles.buttonGroupText} selectedTextStyle={{ color: theme.colors.white }} disabled={isEditMode ? [1] : isActionDisabled ? [0, 1] : []} disabledStyle={styles.disabledButtonGroup} disabledTextStyle={{ color: theme.colors.grey3 }} />
              </View>
              {unitMode === "grams" && ( <>
                  {!isEditMode && servingSizeSuggestions.length > 0 && ( <View style={styles.servingSizeRow}><Text style={styles.servingSizeLabel}>{t('addEntryModal.quickAddServing')}</Text><ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={styles.servingSizeContainer} keyboardShouldPersistTaps="handled">
                        {servingSizeSuggestions.map((suggestion) => ( <TouchableOpacity key={suggestion.label} style={[ styles.servingSizeButton, isActionDisabled && styles.disabledOverlay, ]} onPress={() => !isActionDisabled && setGrams(suggestion.value)} disabled={isActionDisabled}><Text style={styles.servingSizeButtonTitle}>{suggestion.label}</Text></TouchableOpacity> ))}
                      </ScrollView></View> )}
                  <Input placeholder={isEditMode ? t('addEntryModal.gramsPlaceholderEdit') : t('addEntryModal.gramsPlaceholder')} keyboardType="numeric" value={grams} onChangeText={(text) => { const cleanedText = text.replace(/[^0-9.]/g, "").replace(/(\..*?)\./g, "$1"); setGrams(cleanedText); }} inputStyle={styles.gramInputStyle} inputContainerStyle={styles.gramInputContainerStyle} errorMessage={ !isValidNumberInput(grams) && grams !== "" && grams !== "." ? t('addEntryModal.gramsError') : "" } errorStyle={{ color: theme.colors.error }} rightIcon={<Text style={styles.unitText}>g</Text>} containerStyle={{ paddingHorizontal: 0 }} key={`grams-input-${selectedFood.id}-${isEditMode}`} disabled={isActionDisabled} />
                </> )}
              {unitMode === "auto" && !isEditMode && ( <View style={styles.autoInputRow}>
                  <Input placeholder={t('addEntryModal.autoPlaceholder')} value={autoInput} onChangeText={setAutoInput} inputStyle={[styles.gramInputStyle, styles.autoInputField]} inputContainerStyle={styles.gramInputContainerStyle} containerStyle={styles.autoInputContainer} multiline={false} onSubmitEditing={handleEstimateGrams} key={`auto-input-${selectedFood.id}`} disabled={isActionDisabled} />
                  <Button onPress={handleEstimateGrams} disabled={isAiButtonDisabled || isActionDisabled} loading={isAiLoading} buttonStyle={styles.aiButton} icon={ isAiLoading ? undefined : ( <Icon name="calculator-variant" type="material-community" size={20} color={theme.colors.white} /> ) } title={isAiLoading ? "" : ""} />
                </View> )}
            </View> );
        case "quickAddHeader": return ( <View style={styles.quickAddHeader}><Text style={styles.sectionTitle}>{editingQuickAddItemIndex !== null ? t('addEntryModal.quickAddHeaderEdit') : t('addEntryModal.quickAddHeader')}</Text>
              {editingQuickAddItemIndex === null && ( <Button type="clear" title={t('addEntryModal.buttonBack')} onPress={() => { if (isActionDisabled) return; setModalMode("normal"); setQuickAddItems([]); setSelectedQuickAddIndices(new Set()); setEditingQuickAddItemIndex(null); }} titleStyle={{ color: theme.colors.primary, fontSize: 14 }} icon={<Icon name="arrow-back" type="ionicon" size={18} color={theme.colors.primary} />} disabled={isActionDisabled} /> )}
            </View> );
        case "quickAddList": return ( <QuickAddList items={quickAddItems} selectedIndices={selectedQuickAddIndices} editingIndex={editingQuickAddItemIndex} editedName={editedFoodName} editedGrams={editedGrams} onToggleItem={handleToggleQuickAddItem} onEditItem={handleEditQuickAddItem} onSaveEdit={handleSaveQuickAddItemEdit} onCancelEdit={handleCancelQuickAddItemEdit} onNameChange={setEditedFoodName} onGramsChange={handleQuickAddGramsChange} isLoading={quickAddLoading} foodIcons={foodIcons} style={styles.quickAddListStyle} onSaveItemToLibrary={handleSaveQuickAddItemToLibrary} foods={foods} /> );
        case "spacer": return <View style={{ height: item.height }} />;
        default: return null;
      }
    }, [ search, updateSearch, isActionDisabled, modalMode, recentFoods, screenWidth, selectedFood, foodIcons, handleInternalSelectFood, filteredFoods, foodGradeResult, unitMode, setUnitMode, isEditMode, servingSizeSuggestions, setGrams, grams, autoInput, setAutoInput, handleEstimateGrams, isAiLoading, isAiButtonDisabled, theme, styles, quickAddLoading, quickAddItems, editingQuickAddItemIndex, selectedQuickAddIndices, editedFoodName, editedGrams, handleToggleQuickAddItem, handleEditQuickAddItem, handleSaveQuickAddItemEdit, handleCancelQuickAddItemEdit, handleQuickAddGramsChange, handleConfirmQuickAdd, handleQuickAddImage, onAddNewFoodRequest, handleSaveQuickAddItemToLibrary, foods ]
  );

  const combinedOverlayStyle = StyleSheet.flatten([ styles.overlayStyle, { backgroundColor: theme.colors.background }, ]);

  return (
    <Overlay isVisible={isVisible} onBackdropPress={!isActionDisabled ? toggleOverlay : undefined} animationType="slide" overlayStyle={styles.overlayContainer} >
      <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={styles.keyboardAvoidingView} keyboardVerticalOffset={KEYBOARD_VERTICAL_OFFSET} >
        <View style={combinedOverlayStyle}>
          <View style={styles.header}>
            <TouchableOpacity onPress={!isActionDisabled ? toggleOverlay : undefined} style={styles.closeIconTouchable} disabled={isActionDisabled} hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }} >
              <Icon name="close" type="material" size={28} color={isActionDisabled ? theme.colors.grey3 : theme.colors.text} />
            </TouchableOpacity>
            <Text h4 h4Style={[ styles.overlayTitle, isEditMode && modalMode === "normal" && styles.editModeTitle, ]} numberOfLines={1} ellipsizeMode="tail">
              {modalMode === "quickAddSelect" ? editingQuickAddItemIndex !== null ? t('addEntryModal.titleQuickAddEdit') : quickAddLoading ? t('addEntryModal.titleQuickAddAnalyzing') : t('addEntryModal.titleQuickAddSelect') : isEditMode ? t('addEntryModal.titleEdit') : t('addEntryModal.titleAdd')}
            </Text>
            {modalMode === "normal" && ( <View style={styles.headerActionsNormal}>
                {!isEditMode && ( <TouchableOpacity onPress={handleQuickAddImage} disabled={isQuickAddImageButtonDisabled} style={styles.headerIcon} hitSlop={{ top: 10, bottom: 10, left: 5, right: 5 }} >
                    {quickAddLoading ? <ActivityIndicator size="small" color={theme.colors.primary} /> : <Icon name="camera-burst" type="material-community" size={26} color={ isQuickAddImageButtonDisabled ? theme.colors.grey3 : theme.colors.primary } />}
                  </TouchableOpacity> )}
                <Button title={isEditMode ? t('addEntryModal.buttonUpdate') : t('addEntryModal.buttonAdd')} onPress={handleAddOrUpdateSingleEntry} disabled={isAddButtonDisabled} buttonStyle={[styles.addButton, isEditMode && styles.updateButton]} titleStyle={styles.buttonTitle} loading={isAiLoading} />
              </View> )}
             {modalMode === "quickAddSelect" && editingQuickAddItemIndex === null && ( <Button title={quickAddLoading ? t('addEntryModal.buttonLoading') : t('addEntryModal.buttonAddSelected', {count: selectedQuickAddIndices.size})} onPress={handleConfirmQuickAdd} disabled={isQuickAddConfirmDisabled} buttonStyle={[ styles.addButton, { backgroundColor: theme.colors.success } ]} titleStyle={styles.buttonTitle} loading={quickAddLoading} /> )}
             {modalMode === "quickAddSelect" && editingQuickAddItemIndex !== null && ( <View style={{ width: 70, marginLeft: 5 }} /> )}
          </View>
          <FlatList data={listData} renderItem={renderListItem} keyExtractor={(item) => item.key} extraData={{ selectedFoodId: selectedFood?.id, modalMode, foodIcons, foodGradeResult, quickAddLoading, selectedQuickAddIndicesSize: selectedQuickAddIndices.size, editingQuickAddItemIndex, search, foodsLength: foods.length, servingSizeSuggestions }} style={styles.flatListContainer} contentContainerStyle={styles.flatListContentContainer} keyboardShouldPersistTaps="handled" initialNumToRender={10} maxToRenderPerBatch={10} windowSize={11} removeClippedSubviews={Platform.OS === 'android'} />
        </View>
      </KeyboardAvoidingView>
    </Overlay>
  );
};

const useStyles = makeStyles((theme) => ({
    overlayContainer: { backgroundColor: "transparent", width: "90%", maxWidth: 500, padding: 0, borderRadius: 15, shadowColor: "#000", shadowOffset: { width: 0, height: 3 }, shadowOpacity: 0.2, shadowRadius: 5, elevation: 6, overflow: "hidden", maxHeight: Dimensions.get("window").height * 0.85, },
    overlayStyle: { width: "100%", height: "100%", borderRadius: 15, padding: 15, paddingBottom: 0, backgroundColor: theme.colors.background, flex: 1, },
    keyboardAvoidingView: { width: "100%", height: "100%" },
    header: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 15, paddingHorizontal: 0, },
    closeIconTouchable: { padding: 5 },
    overlayTitle: { color: theme.colors.text, fontWeight: "bold", fontSize: 20, textAlign: "center", flex: 1, marginHorizontal: 5, },
    editModeTitle: { color: theme.colors.warning },
    headerActionsNormal: { flexDirection: "row", alignItems: "center" },
    headerIcon: { padding: 5, marginHorizontal: 5 },
    addButton: { borderRadius: 20, paddingHorizontal: 15, paddingVertical: 8, minWidth: 70, marginLeft: 5, backgroundColor: theme.colors.primary, },
    updateButton: { backgroundColor: theme.colors.warning },
    buttonTitle: { color: theme.colors.white, fontWeight: "600", fontSize: 15 },
    flatListContainer: { flex: 1, width: "100%" },
    flatListContentContainer: { paddingBottom: 30 },
    searchBarContainer: { backgroundColor: "transparent", borderBottomColor: "transparent", borderTopColor: "transparent", paddingHorizontal: 0, marginBottom: 10, },
    searchBarInputContainer: { borderRadius: 25, backgroundColor: theme.colors.searchBg || theme.colors.grey5, height: 40, },
    searchInputStyle: { color: theme.colors.text, fontSize: 15, textAlign: 'left' },
    recentFoodsSection: { marginBottom: 15 },
    sectionTitle: { fontWeight: "600", marginBottom: 8, color: theme.colors.text, fontSize: 14, marginLeft: 5, textTransform: "uppercase", textAlign: 'left' },
    recentFoodsContainer: { paddingHorizontal: 5, paddingVertical: 2 },
    recentFoodItem: { paddingHorizontal: 10, paddingVertical: 6, borderRadius: 16, backgroundColor: theme.colors.grey5, marginRight: 8, flexDirection: "row", alignItems: "center", borderWidth: 1.5, borderColor: "transparent", },
    selectedRecentFoodItem: { borderColor: theme.colors.primary },
    smallRecentFoodItem: { paddingHorizontal: 8, paddingVertical: 5 },
    foodIconSmall: { width: 20, height: 20, marginRight: 6, borderRadius: 10, backgroundColor: theme.colors.grey4, alignItems: "center", justifyContent: "center", },
    iconPlaceholderSmall: { backgroundColor: theme.colors.grey4, },
    foodIcon: { width: 35, height: 35, marginRight: 12, borderRadius: 17.5, backgroundColor: theme.colors.grey5, alignItems: "center", justifyContent: "center", },
    defaultIconContainer: { width: 35, height: 35, marginRight: 12, borderRadius: 17.5, backgroundColor: theme.colors.grey5, alignItems: "center", justifyContent: "center", },
    recentFoodText: { color: theme.colors.text, fontSize: 13, maxWidth: 80, textAlign: 'left' },
    smallRecentFoodText: { fontSize: 12, maxWidth: 70 },
    listItemContainer: { backgroundColor: "transparent", paddingVertical: 8, paddingHorizontal: 5, borderBottomColor: theme.colors.divider, },
    selectedListItem: { backgroundColor: theme.colors.grey5, borderRadius: 8 },
    listItemTitle: { color: theme.colors.text, fontSize: 16, fontWeight: "500", textAlign: 'left' },
    noFoodsText: { color: theme.colors.grey2, fontStyle: "italic", textAlign: "center", marginTop: 20, marginBottom: 10, paddingHorizontal: 10, },
    amountSection: { marginTop: 10, borderTopWidth: 1, borderTopColor: theme.colors.divider, paddingTop: 15, paddingHorizontal: 0, },
    unitSelectorContainer: { flexDirection: "row", alignItems: "center", justifyContent: "space-between", marginBottom: 15, paddingHorizontal: 5, },
    amountLabelContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    gradePill: { 
        fontSize: 11,
        fontWeight: 'bold',
        color: theme.colors.white,
        paddingHorizontal: 5,
        paddingVertical: 1.5,
        borderRadius: 7,
        marginLeft: 8,
        minWidth: 18,
        textAlign: 'center',
        overflow: 'hidden',
    },
    inputLabel: { fontWeight: "600", color: theme.colors.grey1, fontSize: 14, marginRight: 0, textTransform: "uppercase", textAlign: 'left' },
    buttonGroupContainer: { flex: 0.7, maxWidth: 220, height: 35, borderRadius: 8, borderColor: theme.colors.primary, borderWidth: 1, backgroundColor: theme.colors.background, },
    buttonGroupText: { fontSize: 14, color: theme.colors.text },
    disabledButtonGroup: { backgroundColor: theme.colors.grey5 },
    servingSizeRow: { flexDirection: "row", alignItems: "center", marginBottom: 12, paddingHorizontal: 5, },
    servingSizeLabel: { color: theme.colors.grey2, fontSize: 13, marginRight: 8, textAlign: 'left' },
    servingSizeContainer: { flexGrow: 0 },
    servingSizeButton: { backgroundColor: theme.colors.grey4, borderRadius: 15, marginRight: 8, paddingHorizontal: 12, paddingVertical: 5, justifyContent: "center", alignItems: "center", height: 30, },
    servingSizeButtonTitle: { color: theme.colors.text, fontSize: 13 },
    gramInputStyle: { color: theme.colors.text, fontSize: 16, paddingVertical: 8, height: 40, textAlign: 'left' },
    gramInputContainerStyle: { borderBottomColor: theme.colors.grey3, paddingHorizontal: 5, },
    unitText: { color: theme.colors.grey2, fontSize: 15, fontWeight: "500", paddingRight: 5, },
    autoInputRow: { flexDirection: "row", alignItems: "center", paddingHorizontal: 0, },
    autoInputContainer: { flex: 1, paddingHorizontal: 0, marginRight: 10 },
    autoInputField: { height: 40 },
    aiButton: { backgroundColor: theme.colors.secondary, borderRadius: 20, width: 40, height: 40, padding: 0, justifyContent: "center", alignItems: "center", minWidth: 40, },
    quickAddHeader: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 10, paddingHorizontal: 5, borderBottomWidth: 1, borderBottomColor: theme.colors.divider, paddingBottom: 8, },
    quickAddListStyle: {},
    disabledOverlay: { opacity: 0.6, },
    noResultsContainer: {
      alignItems: 'center',
      paddingVertical: 10,
    },
    addNewFoodButton: {
      marginTop: 15,
      borderColor: theme.colors.primary,
      paddingHorizontal: 20,
      borderRadius: 20,
    },
    addNewFoodButtonTitle: {
        color: theme.colors.primary,
        fontWeight: '600',
    },
}));

export default AddEntryModal;
---------- END AddEntryModal.tsx ----------


---------- AddFoodModal.tsx ----------
// src/components/AddFoodModal.tsx
import React, { useState, useEffect, useCallback } from "react";
import {
    View,
    KeyboardAvoidingView,
    Platform,
    ActivityIndicator,
    Alert,
    ScrollView,
    StyleSheet,
    TouchableOpacity,
} from "react-native";
import {
    Button,
    Input,
    Text,
    Overlay,
    makeStyles,
    useTheme,
    Icon,
} from "@rneui/themed";
import { Food } from "../types/food";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import Toast from "react-native-toast-message";
import {
    getMacrosFromText,
    getMacrosForImageFile,
    BackendError,
} from "../utils/macros";
import * as ImagePicker from "expo-image-picker";
import { ImagePickerResult } from 'expo-image-picker';
import { compressImageIfNeeded } from '../utils/imageUtils';
import FoodFormFields from "./FoodFormFields";
import { t } from '../localization/i18n';

interface AddFoodModalProps {
    isVisible: boolean;
    toggleOverlay: () => void;
    newFood: Omit<Food, "id">;
    editFood: Food | null;
    errors: { [key: string]: string };
    handleInputChange: (
        key: keyof Omit<Food, "id">,
        value: string,
        isEdit: boolean
    ) => void;
    handleCreateFood: () => Promise<void>;
    handleUpdateFood: () => Promise<void>;
    validateFood: (food: Omit<Food, "id"> | Food) => { [key: string]: string } | null;
    setErrors: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>;
}

const KEYBOARD_VERTICAL_OFFSET = Platform.OS === "ios" ? 60 : 0;

const AddFoodModal: React.FC<AddFoodModalProps> = ({
    isVisible,
    toggleOverlay,
    newFood,
    editFood,
    errors,
    handleInputChange,
    handleCreateFood,
    handleUpdateFood,
    validateFood,
    setErrors,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const [loading, setLoading] = useState(false);
    const [mode, setMode] = useState<"normal" | "ingredients">("normal");
    const [ingredients, setIngredients] = useState("");
    const [aiTextLoading, setAiTextLoading] = useState(false);
    const [aiImageLoading, setAiImageLoading] = useState(false);

    useEffect(() => {
        if (isVisible) {
            setErrors({}); setMode("normal"); setIngredients("");
            setAiTextLoading(false); setAiImageLoading(false); setLoading(false);
        }
    }, [isVisible, setErrors]);

    const getCurrentFoodData = (): Partial<Omit<Food, 'id'>> => {
        return editFood ? editFood : newFood;
    };

    const handleCreateOrUpdate = async () => {
        const isUpdate = !!editFood;
        const currentData = getCurrentFoodData();
        const dataToValidate = {
            name: (currentData.name ?? "").trim(), calories: currentData.calories ?? 0,
            protein: currentData.protein ?? 0, carbs: currentData.carbs ?? 0, fat: currentData.fat ?? 0,
        };
        const validationErrors = validateFood(dataToValidate);
        if (validationErrors) {
            setErrors(validationErrors);
            Toast.show({ type: "error", text1: t('foodListScreen.fixErrors'), position: 'bottom' });
            return;
        }
        setErrors({}); setLoading(true);
        try {
            if (isUpdate) {
                await handleUpdateFood();
                Toast.show({ type: "success", text1: t('foodListScreen.foodUpdated', { foodName: dataToValidate.name }), position: 'bottom' });
            } else {
                await handleCreateFood();
                Toast.show({ type: "success", text1: t('foodListScreen.foodAdded', { foodName: dataToValidate.name }), position: 'bottom' });
            }
            toggleOverlay();
        } catch (error: any) {
            Alert.alert(t('foodListScreen.errorLoad'), error.message || t(isUpdate ? 'foodListScreen.errorUpdateMessage' : 'foodListScreen.errorCreateMessage'));
        } finally { setLoading(false); }
    };

    const handleAiTextButtonClick = async () => {
        const currentFoodName = (getCurrentFoodData().name ?? "").trim();
        const isUpdate = !!editFood;
        if (mode === "normal") {
            setMode("ingredients");
            handleInputChange("calories", "", isUpdate); handleInputChange("protein", "", isUpdate);
            handleInputChange("carbs", "", isUpdate); handleInputChange("fat", "", isUpdate);
        } else {
            if (!currentFoodName && !ingredients.trim()) { Alert.alert(t('addFoodModal.alertInputNeeded'), t('addFoodModal.alertInputNeededMessage')); return; }
            setAiTextLoading(true);
            try {
                const macros = await getMacrosFromText(currentFoodName, ingredients);
                handleInputChange("calories", String(Math.round(macros.calories)), isUpdate); handleInputChange("protein", String(Math.round(macros.protein)), isUpdate);
                handleInputChange("carbs", String(Math.round(macros.carbs)), isUpdate); handleInputChange("fat", String(Math.round(macros.fat)), isUpdate);
                setMode("normal"); Toast.show({ type: 'info', text1: t('addFoodModal.macrosEstimatedText'), position: 'bottom' });
            } catch (error) { console.error("AI Macro fetch error (recipe - modal):", error); }
            finally { setAiTextLoading(false); }
        }
    };

    const handleGetImageAndAnalyze = async () => {
        if (aiImageLoading || aiTextLoading || loading) return;
        const processImage = async (pickerResult: ImagePickerResult) => {
            if (pickerResult.canceled) return;
            if (pickerResult.assets && pickerResult.assets.length > 0) {
                const originalAsset = pickerResult.assets[0]; setAiImageLoading(true);
                try {
                     const compressedResult = await compressImageIfNeeded(originalAsset);
                     const assetForAnalysis = compressedResult ? { ...originalAsset, uri: compressedResult.uri, width: compressedResult.width, height: compressedResult.height, mimeType: 'image/jpeg' } : originalAsset;
                     const result = await getMacrosForImageFile(assetForAnalysis);
                     const isUpdate = !!editFood;
                     handleInputChange("name", result.foodName, isUpdate); handleInputChange("calories", String(Math.round(result.calories)), isUpdate);
                     handleInputChange("protein", String(Math.round(result.protein)), isUpdate); handleInputChange("carbs", String(Math.round(result.carbs)), isUpdate);
                     handleInputChange("fat", String(Math.round(result.fat)), isUpdate);
                     setMode("normal"); setIngredients("");
                     Toast.show({ type: 'success', text1: t('addFoodModal.foodIdentified'), text2: t('addFoodModal.foodIdentifiedMessage', { foodName: result.foodName }), position: 'bottom', });
                } catch (analysisError) { console.error("Error during image analysis (modal):", analysisError); }
                finally { setAiImageLoading(false); }
            } else { Alert.alert(t('addFoodModal.errorGetImage'), t('addEntryModal.alertQuickAddCouldNotSelect')); setAiImageLoading(false); }
        };
        Alert.alert(t('addFoodModal.errorGetImage'), t('addFoodModal.errorGetImageMessage'),
            [ { text: t('addEntryModal.cancel'), style: "cancel" },
              { text: t('addEntryModal.camera'), onPress: async () => { try { const perm = await ImagePicker.requestCameraPermissionsAsync(); if (!perm.granted) { Alert.alert(t('addFoodModal.errorPermission'), t('addFoodModal.errorCameraPermission')); return; } const res = await ImagePicker.launchCameraAsync({ quality: 1, exif: false }); await processImage(res); } catch (e) { console.error(e); Alert.alert(t('addFoodModal.errorCamera')); } } },
              { text: t('addEntryModal.gallery'), onPress: async () => { try { const perm = await ImagePicker.requestMediaLibraryPermissionsAsync(); if (!perm.granted) { Alert.alert(t('addFoodModal.errorPermission'), t('addEntryModal.alertQuickAddGalleryPermission')); return; } const res = await ImagePicker.launchImageLibraryAsync({ mediaTypes: ImagePicker.MediaTypeOptions.Images, quality: 1 }); await processImage(res); } catch (e) { console.error(e); Alert.alert(t('addFoodModal.errorGallery')); } } }, ],
            { cancelable: true }
        );
    };

    const isAnyLoading = loading || aiTextLoading || aiImageLoading;
    const combinedOverlayStyle = StyleSheet.flatten([ styles.overlayStyle, { backgroundColor: theme.colors.background } ]);

    return (
        <Overlay isVisible={isVisible} onBackdropPress={!isAnyLoading ? toggleOverlay : undefined} animationType="fade" overlayStyle={styles.overlayContainer} >
            <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={styles.keyboardAvoidingView} keyboardVerticalOffset={KEYBOARD_VERTICAL_OFFSET} >
                <View style={combinedOverlayStyle}>
                    <View style={styles.header}>
                        <Text h4 style={styles.overlayTitle}> {editFood ? t('addFoodModal.titleEdit') : t('addFoodModal.titleAdd')} </Text>
                        <Button title={editFood ? t('addFoodModal.buttonUpdate') : t('addFoodModal.buttonAdd')} onPress={handleCreateOrUpdate}
                                buttonStyle={[ styles.button, { backgroundColor: editFood ? theme.colors.warning : theme.colors.primary } ]}
                                titleStyle={styles.buttonTitle} loading={loading} disabled={isAnyLoading} containerStyle={styles.buttonContainer} />
                        <Icon name="close" type="material" size={28} color={theme.colors.text} onPress={!isAnyLoading ? toggleOverlay : undefined}
                              containerStyle={styles.closeIcon} disabled={isAnyLoading} disabledStyle={{ backgroundColor: 'transparent' }} />
                    </View>
                    <ScrollView keyboardShouldPersistTaps="handled">
                        <View style={styles.imageButtonContainer}>
                            <TouchableOpacity onPress={handleGetImageAndAnalyze} disabled={isAnyLoading} style={styles.iconButton}>
                                {aiImageLoading ? ( <ActivityIndicator size="small" color={theme.colors.primary} /> ) : (
                                    <Icon name="camera-enhance-outline" type="material-community" size={28} color={isAnyLoading ? theme.colors.grey3 : theme.colors.primary} />
                                )}
                            </TouchableOpacity>
                             <Text style={styles.imageButtonLabel}>{t('addFoodModal.getFromImage')}</Text>
                        </View>
                        {mode === "normal" ? (
                            <FoodFormFields values={getCurrentFoodData()} errors={errors} onInputChange={handleInputChange} isEditing={!!editFood} disabled={isAnyLoading} />
                        ) : (
                            <>
                                <View style={styles.backButtonContainer}>
                                    <Icon name="arrow-left" type="material-community" size={24} color={theme.colors.primary} onPress={() => !isAnyLoading && setMode("normal")} disabled={isAnyLoading} containerStyle={styles.backIcon} />
                                    <Text style={[styles.backButtonText, isAnyLoading && styles.disabledText]} onPress={() => !isAnyLoading && setMode("normal")}> {t('addFoodModal.backToManual')} </Text>
                                </View>
                                 <Input
                                    label={t('addFoodModal.ingredientsOptional')} labelStyle={styles.inputLabel} value={ingredients} onChangeText={setIngredients} multiline={true}
                                    numberOfLines={4} inputContainerStyle={[styles.inputContainerStyle, styles.multilineInputContainer]} inputStyle={[styles.inputStyle, styles.multilineInput]}
                                    placeholder={t('addFoodModal.ingredientsPlaceholder')} placeholderTextColor={theme.colors.grey3}
                                    leftIcon={<MaterialCommunityIcons name="format-list-bulleted" size={24} color={theme.colors.grey1} style={styles.multilineIcon} />}
                                    disabled={isAnyLoading}
                                />
                            </>
                        )}
                        <Button
                            title={mode === "normal" ? t('addFoodModal.aiCalculateRecipe') : ingredients ? t('addFoodModal.aiGetFromIngredients') : t('addFoodModal.aiGetFromNameOnly')}
                            onPress={handleAiTextButtonClick} buttonStyle={[styles.button, styles.aiButton, { backgroundColor: theme.colors.secondary }]}
                            titleStyle={styles.aiButtonTitle} loading={aiTextLoading} disabled={isAnyLoading}
                            icon={mode === "normal" ? <MaterialCommunityIcons name="text-box-search-outline" size={18} color={theme.colors.white} style={{ marginRight: 8 }} /> : undefined}
                            containerStyle={[styles.buttonContainer, { marginTop: 15 }]} />
                        <View style={styles.futureInputContainer}>
                            <Text style={styles.futureInputLabel}> {t('addFoodModal.barcodeComingSoon')} </Text>
                        </View>
                    </ScrollView>
                </View>
            </KeyboardAvoidingView>
        </Overlay>
    );
};

const useStyles = makeStyles((theme) => ({
    overlayContainer: { backgroundColor: 'transparent', width: '90%', maxWidth: 500, padding: 0, borderRadius: 15, shadowColor: "#000", shadowOffset: { width: 0, height: 2, }, shadowOpacity: 0.25, shadowRadius: 3.84, elevation: 5, overflow: 'hidden', },
    overlayStyle: { width: '100%', borderRadius: 15, padding: 20, paddingBottom: 30, maxHeight: '90%', backgroundColor: theme.colors.background },
    keyboardAvoidingView: { width: "100%", },
    header: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 20, paddingBottom: 10, borderBottomWidth: 1, borderBottomColor: theme.colors.divider, },
    overlayTitle: { color: theme.colors.text, fontWeight: "bold", fontSize: 20, flexShrink: 1, marginRight: 10, textAlign: 'left' },
    closeIcon: { padding: 5, marginLeft: 10, },
    imageButtonContainer: { flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start', marginBottom: 15, paddingHorizontal: 10, },
    iconButton: { padding: 8, marginRight: 8, },
    imageButtonLabel: { color: theme.colors.primary, fontSize: 14, fontWeight: '500', textAlign: 'left' },
    inputLabel: { color: theme.colors.text, fontWeight: '500', marginBottom: 2, fontSize: 14, textAlign: 'left' },
    inputContainerStyle: { borderBottomWidth: 1, borderBottomColor: theme.colors.grey4, marginBottom: 5, paddingBottom: 2, },
    inputStyle: { color: theme.colors.text, marginLeft: 10, fontSize: 16, textAlign: 'left' },
    multilineInputContainer: { borderWidth: 1, borderColor: theme.colors.grey4, borderRadius: 8, paddingVertical: 8, paddingHorizontal: 5, marginBottom: 10, borderBottomWidth: 1, borderBottomColor: theme.colors.grey4, minHeight: 100, },
    multilineInput: { marginLeft: 5, textAlignVertical: 'top', fontSize: 16, color: theme.colors.text, textAlign: 'left' },
    multilineIcon: { marginTop: 8, marginRight: 5, },
    futureInputContainer: { backgroundColor: theme.colors.grey5, padding: 15, borderRadius: 10, marginTop: 20, marginBottom: 10, alignItems: "center", },
    futureInputLabel: { color: theme.colors.grey2, fontStyle: "italic", },
    buttonContainer: { },
    button: { borderRadius: 8, paddingHorizontal: 15, paddingVertical: 10, },
    buttonTitle: { color: theme.colors.white, fontWeight: "600", fontSize: 15 },
    aiButton: { paddingVertical: 12, },
    aiButtonTitle: { fontWeight: "600", fontSize: 15, textAlign: 'center', },
    backButtonContainer: { flexDirection: "row", alignItems: "center", marginBottom: 15, marginTop: 5, },
    backIcon: { marginRight: 5, padding: 5, },
    backButtonText: { color: theme.colors.primary, fontSize: 16, fontWeight: '500', textAlign: 'left' },
    disabledText: { color: theme.colors.grey3, }
}));

export default AddFoodModal;
---------- END AddFoodModal.tsx ----------


---------- ConfirmationModal.tsx ----------
// src/components/ConfirmationModal.tsx
// components/ConfirmationModal.tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Overlay, Button, Input, Text, useTheme } from '@rneui/themed';
import { t } from '../localization/i18n';

interface ConfirmationModalProps {
  isVisible: boolean;
  onCancel: () => void;
  onConfirm: () => void;
  confirmationText: string;
  setConfirmationText: (text: string) => void;
  title?: string;
  message?: string;
  inputPlaceholder?: string;
}

const ConfirmationModal: React.FC<ConfirmationModalProps> = ({
  isVisible,
  onCancel,
  onConfirm,
  confirmationText,
  setConfirmationText,
  title,
  message,
  inputPlaceholder
}) => {
  const { theme } = useTheme();

  const modalTitle = title || t('confirmationModal.defaultTitle');
  const modalMessage = message || t('confirmationModal.defaultMessage');
  const modalPlaceholder = inputPlaceholder || t('confirmationModal.enterTextPlaceholder');


  return (
    <Overlay
      isVisible={isVisible}
      onBackdropPress={onCancel}
      overlayStyle={styles.overlay}
      backdropStyle={styles.backdrop}
    >
      <View style={[styles.container, {backgroundColor: theme.colors.background}]}>
        <Text style={[styles.title, {color: theme.colors.text}]}>{modalTitle}</Text>
        <Text style={[styles.message, {color: theme.colors.text}]}>{modalMessage}</Text>
        <Input
          placeholder={modalPlaceholder}
          placeholderTextColor={theme.colors.grey3} // Adjusted for better visibility
          value={confirmationText}
          onChangeText={setConfirmationText}
          containerStyle={styles.inputContainer}
          inputStyle={{ color: theme.colors.text, textAlign: 'left' }}
          inputContainerStyle={{borderBottomColor: theme.colors.text}}
        />
        <View style={styles.buttonContainer}>
          <Button title={t('confirmationModal.cancel')} onPress={onCancel} type="outline" buttonStyle={styles.button} />
          <Button
            title={t('confirmationModal.confirm')}
            onPress={onConfirm}
            color="error"
            buttonStyle={styles.button}
            disabled={confirmationText === ""}
          />
        </View>
      </View>
    </Overlay>
  );
};

const styles = StyleSheet.create({
    overlay: {
        borderRadius: 10,
        width: '80%',
        padding: 6,
        backgroundColor: 'rgba(200, 200, 200, 0.5)'
    },
  container: {
    padding: 20,
    borderRadius: 7,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  message: {
    marginBottom: 15,
    textAlign: 'center'
  },
  inputContainer: {
    marginBottom: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  button: {
    width: 100,
    padding: 10,
  },
  backdrop: {
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
});

export default ConfirmationModal;
---------- END ConfirmationModal.tsx ----------


---------- DailyEntryListItem.tsx ----------
// src/components/DailyEntryListItem.tsx
import React, { useState, useEffect, useCallback, memo, useMemo } from 'react';
import { View, Image, ActivityIndicator, StyleSheet } from 'react-native';
import { ListItem, Button, Icon as RNEIcon, useTheme, makeStyles, Text } from '@rneui/themed';
import { DailyEntryItem } from '../types/dailyEntry';
import { t } from '../localization/i18n';
import { calculateDailyEntryGrade, FoodGradeResult } from '../utils/gradingUtils';
import { Settings } from '../types/settings';

interface DailyEntryListItemProps {
    item: DailyEntryItem;
    reversedIndex: number;
    foodIcons: { [foodName: string]: string | null | undefined };
    setFoodIcons: React.Dispatch<React.SetStateAction<{ [foodName: string]: string | null | undefined }>>;
    onEdit: (item: DailyEntryItem, reversedIndex: number) => void;
    onRemove: (reversedIndex: number) => void;
    isSaving: boolean;
    dailyGoals: Settings['dailyGoals']; // Added dailyGoals prop
}

const DailyEntryListItem = memo<DailyEntryListItemProps>(({
    item,
    reversedIndex,
    foodIcons,
    setFoodIcons,
    onEdit,
    onRemove,
    isSaving,
    dailyGoals, // Destructure dailyGoals
}) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const [iconLoadError, setIconLoadError] = useState(false);

    const iconStatus = item?.food?.name ? foodIcons[item.food.name] : undefined;
    const isLoadingIcon = iconStatus === undefined;

    const gradeResult: FoodGradeResult | null = useMemo(() => {
        if (!item || !item.food || !dailyGoals) return null;
        return calculateDailyEntryGrade(item.food, item.grams, dailyGoals);
    }, [item, dailyGoals]);

    const handleImageError = useCallback(() => {
        console.warn(`Image component failed to load icon for ${item.food.name}: ${iconStatus}`);
        setIconLoadError(true);
        if (item?.food?.name && foodIcons[item.food.name] !== null) {
            setFoodIcons(prev => ({ ...prev, [item.food.name]: null }));
        }
    }, [item.food.name, iconStatus, foodIcons, setFoodIcons]);

    useEffect(() => {
        setIconLoadError(false);
    }, [iconStatus]);

    const renderListItemIcon = () => {
        if (!item?.food) {
             return (
                 <View style={[styles.foodIcon, styles.iconPlaceholder]}>
                     <RNEIcon name="help-circle-outline" type="ionicon" size={20} color={theme.colors.grey3} />
                 </View>
             );
        }
        if (isLoadingIcon) {
            return (
                <View style={[styles.foodIcon, styles.iconPlaceholder]}>
                    <ActivityIndicator size="small" color={theme.colors.grey3} />
                </View>
            );
        } else if (iconStatus && !iconLoadError) {
            return <Image source={{ uri: iconStatus }} style={styles.foodIconImage} onError={handleImageError} resizeMode="contain" />;
        } else {
            return (
                <View style={[styles.foodIcon, styles.iconPlaceholder]}>
                    <RNEIcon name="fast-food-outline" type="ionicon" size={20} color={theme.colors.grey3} />
                </View>
            );
        }
    };

     if (!item || !item.food) {
         return (
             <ListItem containerStyle={styles.listItemContainer}>
                 <ListItem.Content>
                      <ListItem.Title style={[{color: theme.colors.error}, styles.textLeft]}>{t('dailyEntryScreen.invalidEntryData')}</ListItem.Title>
                 </ListItem.Content>
             </ListItem>
         );
     }

    const handleEditPress = () => { if (!isSaving) onEdit(item, reversedIndex); };
    const handleDeletePress = () => { if (!isSaving) onRemove(reversedIndex); };

    const calculatedCalories = Math.round((item.food.calories / 100) * item.grams);
    const calculatedProtein = Math.round((item.food.protein / 100) * item.grams);
    const calculatedCarbs = Math.round((item.food.carbs / 100) * item.grams);
    const calculatedFat = Math.round((item.food.fat / 100) * item.grams);

    return (
        <ListItem.Swipeable
            bottomDivider
            leftContent={(reset) => (
                <Button
                    title={t('dailyEntryScreen.edit')}
                    onPress={() => { handleEditPress(); reset(); }}
                    icon={{ name: "edit", color: theme.colors.white }}
                    buttonStyle={styles.swipeButtonEdit}
                    titleStyle={styles.swipeButtonTitle}
                    disabled={isSaving}
                />
            )}
            rightContent={(reset) => (
                <Button
                    title={t('dailyEntryScreen.delete')}
                    onPress={() => { handleDeletePress(); reset(); }}
                    icon={{ name: "delete", color: theme.colors.white }}
                    buttonStyle={styles.swipeButtonDelete}
                    titleStyle={styles.swipeButtonTitle}
                    disabled={isSaving}
                />
            )}
            containerStyle={styles.listItemContainer}
        >
            {renderListItemIcon()}
            <ListItem.Content>
                <View style={styles.titleContainer}>
                    {gradeResult && (
                        <Text style={[styles.gradePill, { backgroundColor: gradeResult.color }]}>
                            {gradeResult.letter}
                        </Text>
                    )}
                    <ListItem.Title style={styles.listItemTitle} numberOfLines={1} ellipsizeMode="tail">
                        {item.food.name}
                    </ListItem.Title>
                </View>
                <ListItem.Subtitle style={styles.listItemSubtitle}>
                    {`${item.grams}g • Cal: ${calculatedCalories} P: ${calculatedProtein} C: ${calculatedCarbs} F: ${calculatedFat}`}
                </ListItem.Subtitle>
            </ListItem.Content>
            <ListItem.Chevron color={theme.colors.grey3} />
        </ListItem.Swipeable>
    );
});

const useStyles = makeStyles((theme) => ({
    foodIcon: { width: 40, height: 40, marginRight: 15, borderRadius: 8, alignItems: 'center', justifyContent: 'center', },
    foodIconImage: { width: 40, height: 40, marginRight: 15, borderRadius: 8, },
    iconPlaceholder: { backgroundColor: theme.colors.grey5, },
    listItemContainer: { backgroundColor: theme.colors.background, paddingVertical: 12, paddingHorizontal: 15, borderBottomColor: theme.colors.divider, },
    titleContainer: { flexDirection: 'row', alignItems: 'center', marginBottom: 3, },
    gradePill: {
        fontSize: 12,
        fontWeight: 'bold',
        color: theme.colors.white,
        paddingHorizontal: 6,
        paddingVertical: 2,
        borderRadius: 8,
        marginRight: 8,
        minWidth: 20,
        textAlign: 'center',
        overflow: 'hidden',
    },
    listItemTitle: { color: theme.colors.text, fontWeight: "600", fontSize: 16, flexShrink: 1, textAlign: 'left', },
    listItemSubtitle: { color: theme.colors.secondary, fontSize: 14, textAlign: 'left', },
    swipeButtonEdit: { minHeight: "100%", backgroundColor: theme.colors.warning, justifyContent: 'center', alignItems: 'center', },
    swipeButtonDelete: { minHeight: "100%", backgroundColor: theme.colors.error, justifyContent: 'center', alignItems: 'center', },
    swipeButtonTitle: { color: theme.colors.white, fontWeight: 'bold', fontSize: 15, },
    textLeft: { textAlign: 'left'},
}));

export default DailyEntryListItem;
---------- END DailyEntryListItem.tsx ----------


---------- DailyGoalsInput.tsx ----------
// src/components/DailyGoalsInput.tsx
// components/DailyGoalsInput.tsx
import React from "react";
import { Input, Text } from "@rneui/themed";
import { MacroType } from "../types/settings";
import { useTheme, makeStyles } from "@rneui/themed"; // Import makeStyles
import { t } from '../localization/i18n';

interface DailyGoalsInputProps {
    dailyGoals: { [key in MacroType]: number };
    onGoalChange: (goalType: MacroType, value: string) => void;
}

const DailyGoalsInput: React.FC<DailyGoalsInputProps> = ({
  dailyGoals,
  onGoalChange,
}) => {
  const { theme } = useTheme();
  const styles = useStyles(); // Use styles

  const getLabel = (macro: MacroType) => {
    switch(macro) {
        case 'calories': return t('dailyGoalsInput.caloriesGoal');
        case 'protein': return t('dailyGoalsInput.proteinGoal');
        case 'carbs': return t('dailyGoalsInput.carbsGoal');
        case 'fat': return t('dailyGoalsInput.fatGoal');
        default: return macro;
    }
  }

  return (
    <>
      {(["calories", "protein", "carbs", "fat"] as MacroType[]).map((macro) => (
        <Input
          key={macro}
          label={<Text style={[styles.labelStyle, { color: theme.colors.text }]}>{getLabel(macro)}</Text>}
          keyboardType="numeric"
          value={dailyGoals?.[macro]?.toString() || ""}
          onChangeText={(value) => onGoalChange(macro, value)}
          style={[styles.inputStyle, { color: theme.colors.text }]} // Apply inputStyle
          inputContainerStyle={{ borderBottomColor: theme.colors.text }}
        />
      ))}
    </>
  );
};

// Add useStyles
const useStyles = makeStyles((theme) => ({
    labelStyle: {
        color: theme.colors.text,
        fontWeight: 'normal', // RNEUI default is bold, make it normal if needed
        textAlign: 'left',
    },
    inputStyle: {
        textAlign: 'left',
    },
}));

export default DailyGoalsInput;
---------- END DailyGoalsInput.tsx ----------


---------- DailyProgress.tsx ----------
// src/components/DailyProgress.tsx
// components/DailyProgress.tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Text, useTheme, makeStyles } from '@rneui/themed'; // Import makeStyles
import { t } from '../localization/i18n';

interface DailyProgressProps {
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  goals: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
  };
}

const DailyProgress: React.FC<DailyProgressProps> = ({
  calories,
  protein,
  carbs,
  fat,
  goals,
}) => {
  const { theme } = useTheme();
  const styles = useStyles(); // Use styles

  const calculateProgress = (current: number, goal?: number) => {
    if (!goal || goal <= 0) return 0;
    return Math.min(current / goal, 1);
  };

  const renderProgressBar = (labelKey: 'calories' | 'protein' | 'carbs' | 'fat', current: number, goal: number | undefined, color: string) => {
      const progress = calculateProgress(current, goal);
      const labelText = t(`dailyProgress.${labelKey}`);
      return (
          <View style={styles.macroContainer} key={labelKey}>
              <View style={styles.labelContainer}>
                    <Text style={[styles.macroLabel, {color: theme.colors.text}]}>{labelText}:</Text>
                    <Text style={[styles.macroValue, {color: theme.colors.text}]}>
                        {`${Math.round(current)} / ${goal || 0}`}
                    </Text>
              </View>
              <View style={styles.progressBarContainer}>
                  <View style={[styles.progressBar, { width: `${progress * 100}%`, backgroundColor: color }]} />
              </View>
          </View>
      )
  }

  return (
    <View style={styles.container}>
        {renderProgressBar('calories', calories, goals.calories, theme.colors.primary)}
        {renderProgressBar('protein', protein, goals.protein, theme.colors.success)}
        {renderProgressBar('carbs', carbs, goals.carbs, theme.colors.warning)}
        {renderProgressBar('fat', fat, goals.fat, theme.colors.error)}
    </View>
  );
};

// Update useStyles for text alignment
const useStyles = makeStyles((theme) => ({
  container: {
    marginBottom: 20,
    padding: 10,
    borderRadius: 8,
  },
  macroContainer: {
    marginBottom: 10,
  },
  labelContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
  },
  macroLabel: {
    fontWeight: 'bold',
    textAlign: 'left',
  },
  macroValue: {
    textAlign: 'right',
  },
  progressBarContainer: {
      backgroundColor: theme.colors.grey5,
      borderRadius: 5,
      height: 10
  },
  progressBar: {
    height: 10,
    borderRadius: 5,
  },
}));

export default DailyProgress;
---------- END DailyProgress.tsx ----------


---------- DataManagementButtons.tsx ----------
// src/components/DataManagementButtons.tsx
// src/components/DataManagementButtons.tsx
import React, { useState } from "react";
import { Alert, Platform } from "react-native";
import { Button, Icon } from "@rneui/themed";
import * as DocumentPicker from "expo-document-picker";
import * as FileSystem from "expo-file-system";
import * as Sharing from 'expo-sharing';
import { formatDateISO } from "../utils/dateUtils";
import {
  clearAllData,
  loadDailyEntries,
  saveDailyEntries,
  loadFoods,
  saveFoods,
  loadSettings,
  saveSettings
} from "../services/storageService";
import ConfirmationModal from "./ConfirmationModal";
import { DailyEntry } from "../types/dailyEntry";
import { Food } from "../types/food";
import { Settings } from "../types/settings";
import { useTheme } from "@rneui/themed";
import { t } from '../localization/i18n';

interface DataManagementButtonsProps {
  onDataOperation: () => void;
}

const DataManagementButtons: React.FC<DataManagementButtonsProps> = ({
    onDataOperation
}) => {
  const [isConfirmationVisible, setIsConfirmationVisible] = useState(false);
  const [confirmationText, setConfirmationText] = useState("");
  const { theme } = useTheme();

  const handleExportData = async () => {
    try {
      const dailyEntries = await loadDailyEntries();
      const foods = await loadFoods();
      const settings = await loadSettings();
      const exportData = { dailyEntries, foods, settings };
      const exportDataString = JSON.stringify(exportData, null, 2);
      const formattedDate = formatDateISO(new Date());
      const fileName = `macro_data_${formattedDate}.json`;
      const fileUri = FileSystem.documentDirectory + fileName;
      await FileSystem.writeAsStringAsync(fileUri, exportDataString, { encoding: FileSystem.EncodingType.UTF8, });
      if (!(await Sharing.isAvailableAsync())) {
        Alert.alert(t('dataManagement.exportError'), t('dataManagement.exportErrorNoSharing'));
        return;
      }
      await Sharing.shareAsync(fileUri, { mimeType: 'application/json', dialogTitle: t('dataManagement.exportData'), UTI: 'public.json' });
    } catch (error: any) {
      console.error("Export Error:", error);
      Alert.alert(t('dataManagement.exportFailed'), error.message || t('dataManagement.exportFailedMessage'));
    }
  };

  const handleImportData = async () => {
    try {
      const result = await DocumentPicker.getDocumentAsync({ type: ["application/json", "public.json"], copyToCacheDirectory: true });
      if (result.canceled) { console.log(t('dataManagement.importCancelled')); return; }
      if (result.assets && result.assets.length > 0) {
        const file = result.assets[0];
        if (!file.name?.toLowerCase().endsWith(".json")) { Alert.alert(t('dataManagement.importInvalidFileType'), t('dataManagement.importInvalidFileTypeMessage')); return; }
        if (file.size && file.size > 10 * 1024 * 1024) { Alert.alert(t('dataManagement.importFileTooLarge'), t('dataManagement.importFileTooLargeMessage')); return; }
        const fileContent = await FileSystem.readAsStringAsync(file.uri, { encoding: FileSystem.EncodingType.UTF8, });
        try {
          const importedData = JSON.parse(fileContent);
          if ( typeof importedData !== 'object' || importedData === null || !importedData.hasOwnProperty("dailyEntries") || !Array.isArray(importedData.dailyEntries) || !importedData.hasOwnProperty("foods") || !Array.isArray(importedData.foods) || !importedData.hasOwnProperty("settings") || typeof importedData.settings !== 'object' ) {
            Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedInvalidStructure')); return;
          }
          await saveDailyEntries(importedData.dailyEntries as DailyEntry[]);
          await saveFoods(importedData.foods as Food[]);
          await saveSettings(importedData.settings as Settings);
          Alert.alert(t('dataManagement.importSuccessful'), t('dataManagement.importSuccessfulMessage'));
          onDataOperation();
        } catch (parseError) {
          console.error("JSON Parse Error during import:", parseError);
          Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedParseError')); return;
        }
      } else {
        Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedAccessError'));
      }
    } catch (error: any) {
      console.error("Import Error:", error);
      if (error.code === 'NO_PERMISSIONS') { Alert.alert(t('dataManagement.importFailed'), t('dataManagement.importFailedPermissionError')); }
      else { Alert.alert(t('dataManagement.importFailed'), error.message || t('dataManagement.importFailedUnknownError')); }
    }
  };

  const handleClearData = () => { setIsConfirmationVisible(true); };

  const confirmClearData = async () => {
    if (confirmationText.trim().toUpperCase() === "CLEAR DATA") {
      try {
        await clearAllData();
        Alert.alert(t('dataManagement.clearDataSuccess'), t('dataManagement.clearDataSuccessMessage'));
        onDataOperation();
      } catch (error: any) {
        console.error("Clear Data Error:", error);
        Alert.alert(t('dataManagement.clearDataFailed'), error.message || t('dataManagement.clearDataFailedMessage'));
      } finally {
        setConfirmationText(""); setIsConfirmationVisible(false);
      }
    } else {
      Alert.alert(t('dataManagement.clearConfirmationFailed'), t('dataManagement.clearConfirmationFailedMessage'));
    }
  };

  return (
    <>
      <Button
        title={t('dataManagement.exportData')}
        onPress={handleExportData}
        buttonStyle={{ marginBottom: 10, backgroundColor: theme.colors.primary }}
        icon={<Icon name="export" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
      />
      <Button
        title={t('dataManagement.importData')}
        onPress={handleImportData}
        buttonStyle={{ marginBottom: 10, backgroundColor: theme.colors.primary }}
        icon={<Icon name="import" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
      />
      <Button
        title={t('dataManagement.clearAllData')}
        onPress={handleClearData}
        color="error"
        buttonStyle={{ marginBottom: 10 }}
        icon={<Icon name="trash-can-outline" type="material-community" color="white" size={20} style={{ marginRight: 8 }} />}
      />
      <ConfirmationModal
        isVisible={isConfirmationVisible}
        onCancel={() => { setIsConfirmationVisible(false); setConfirmationText(""); }}
        onConfirm={confirmClearData}
        confirmationText={confirmationText}
        setConfirmationText={setConfirmationText}
        title={t('dataManagement.confirmClearTitle')}
        message={t('dataManagement.confirmClearMessage')}
        inputPlaceholder={t('dataManagement.confirmClearInputPlaceholder')}
      />
    </>
  );
};

export default DataManagementButtons;
---------- END DataManagementButtons.tsx ----------


---------- DateNavigator.tsx ----------
// src/components/DateNavigator.tsx
import React from 'react';
import { View, TouchableOpacity, StyleSheet } from 'react-native';
import { Button, Text, Icon as RNEIcon, useTheme, makeStyles } from '@rneui/themed';
import { parseISO, isValid } from 'date-fns';
import { formatDateReadableAsync } from '../utils/dateUtils'; // Import async version
import { t } from '../localization/i18n';
import i18n from '../localization/i18n';

interface DateNavigatorProps {
    selectedDate: string;
    onPreviousDay: () => void;
    onNextDay: () => void;
    onShowDatePicker: () => void;
    isSaving: boolean;
    isLoadingData: boolean;
}

const DateNavigator: React.FC<DateNavigatorProps> = ({
    selectedDate,
    onPreviousDay,
    onNextDay,
    onShowDatePicker,
    isSaving,
    isLoadingData,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const [displayDate, setDisplayDate] = React.useState(t('dateNavigator.invalidDate'));

    React.useEffect(() => {
        const updateDisplayDate = async () => {
            const parsedDate = parseISO(selectedDate);
            if (isValid(parsedDate)) {
                const formatted = await formatDateReadableAsync(parsedDate);
                setDisplayDate(formatted);
            } else {
                setDisplayDate(t('dateNavigator.invalidDate'));
            }
        };
        updateDisplayDate();
    }, [selectedDate, i18n.locale]); // Re-run when selectedDate or locale changes

    const isDisabled = isSaving || isLoadingData;

    return (
        <View style={styles.dateNavigation}>
            <Button
                type="clear"
                onPress={onPreviousDay}
                icon={<RNEIcon name="chevron-back-outline" type="ionicon" color={theme.colors.primary} size={28} />}
                buttonStyle={styles.navButton}
                disabled={isDisabled}
                disabledStyle={styles.disabledButton}
            />
            <TouchableOpacity onPress={onShowDatePicker} disabled={isDisabled}>
                <Text h4 h4Style={[styles.dateText, isDisabled && styles.disabledText]}>
                    {displayDate}
                </Text>
            </TouchableOpacity>
            <Button
                type="clear"
                onPress={onNextDay}
                icon={<RNEIcon name="chevron-forward-outline" type="ionicon" color={theme.colors.primary} size={28} />}
                buttonStyle={styles.navButton}
                disabled={isDisabled}
                disabledStyle={styles.disabledButton}
            />
        </View>
    );
};

const useStyles = makeStyles((theme) => ({
    dateNavigation: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingVertical: 10,
        paddingHorizontal: 10,
        backgroundColor: theme.colors.background,
    },
    navButton: {
        paddingHorizontal: 8,
    },
    dateText: {
        fontSize: 18,
        fontWeight: 'bold',
        color: theme.colors.text,
        textAlign: 'center',
        paddingVertical: 5,
    },
    disabledButton: {
        opacity: 0.5,
    },
    disabledText: {
        color: theme.colors.grey3,
    },
}));

export default DateNavigator;
---------- END DateNavigator.tsx ----------


---------- QuickAddItem.tsx ----------
// src/components/Entry/QuickAddItem.tsx
import React, { useMemo, useState } from "react";
import {
  View,
  TouchableOpacity,
  Pressable,
  ActivityIndicator,
  Image,
} from "react-native";
import {
  ListItem,
  CheckBox,
  Input,
  Icon,
  Text,
  useTheme,
  makeStyles,
} from "@rneui/themed";
import { EstimatedFoodItem } from "../../types/macros";
import { Food } from "../../types/food";
import { isValidNumberInput } from "../../utils/validationUtils";
import { t } from "../../localization/i18n";
import {
  calculateBaseFoodGrade,
  FoodGradeResult,
} from "../../utils/gradingUtils";

interface QuickAddItemProps {
  item: EstimatedFoodItem;
  index: number;
  isSelected: boolean;
  isEditingThisItem: boolean;
  isAnyItemEditing: boolean;
  isLoading?: boolean;
  foodIcons: { [foodName: string]: string | null | undefined };
  editedName: string;
  editedGrams: string;
  onToggleItem: (index: number) => void;
  onEditItem: (index: number) => void;
  onSaveEdit: () => void;
  onCancelEdit: () => void;
  onNameChange: (name: string) => void;
  onGramsChange: (grams: string) => void;
  onSaveToLibrary: (
    item: EstimatedFoodItem,
    setSavingState: (isSaving: boolean) => void
  ) => Promise<void>;
  foods: Food[]; // Add foods prop
}

const QuickAddItem: React.FC<QuickAddItemProps> = ({
  item,
  index,
  isSelected,
  isEditingThisItem,
  isAnyItemEditing,
  isLoading,
  foodIcons,
  editedName,
  editedGrams,
  onToggleItem,
  onEditItem,
  onSaveEdit,
  onCancelEdit,
  onNameChange,
  onGramsChange,
  onSaveToLibrary,
  foods, // Destructure foods
}) => {
  const { theme } = useTheme();
  const styles = useStyles();
  const [isSavingToLibrary, setIsSavingToLibrary] = useState(false);

  const estimatedCalories = Math.round(
    (item.calories_per_100g / 100) * item.estimatedWeightGrams
  );

  const tempFoodForGrading: Food = useMemo(
    () => ({
      id: `temp-qa-${index}-${item.foodName}`,
      name: item.foodName,
      calories: item.calories_per_100g,
      protein: item.protein_per_100g,
      carbs: item.carbs_per_100g,
      fat: item.fat_per_100g,
    }),
    [
      item.foodName,
      item.calories_per_100g,
      item.protein_per_100g,
      item.carbs_per_100g,
      item.fat_per_100g,
      index,
    ]
  );

  const gradeResult: FoodGradeResult | null = useMemo(
    () => calculateBaseFoodGrade(tempFoodForGrading),
    [tempFoodForGrading]
  );

  const isInLibrary = useMemo(() => {
    return foods.some(food => food.name.toLowerCase() === item.foodName.toLowerCase());
  }, [foods, item.foodName]);

  const handleSaveToLibraryPress = async () => {
    if (isSavingToLibrary || isAnyItemEditing || isLoading) return;
    await onSaveToLibrary(item, setIsSavingToLibrary);
  };

  const renderFoodIcon = (foodName: string) => {
    const iconStatus = foodIcons[foodName];
    if (iconStatus === undefined) {
      return (
        <View style={[styles.foodIconContainer, styles.iconPlaceholder]}>
          <ActivityIndicator size="small" color={theme.colors.grey3} />
        </View>
      );
    } else if (iconStatus) {
      return (
        <Image
          source={{ uri: iconStatus }}
          style={styles.foodIconImage}
          resizeMode="contain"
        />
      );
    } else {
      return (
        <View style={[styles.foodIconContainer, styles.iconPlaceholder]}>
          <Icon
            name="image-off-outline"
            type="material-community"
            size={18}
            color={theme.colors.grey3}
          />
        </View>
      );
    }
  };

  const canPerformActions =
    !isAnyItemEditing && !isLoading && !isSavingToLibrary;

  return (
    <Pressable
      onPress={() => !isEditingThisItem && onToggleItem(index)}
      disabled={
        (isAnyItemEditing && !isEditingThisItem) ||
        isLoading ||
        isSavingToLibrary
      }
    >
      <ListItem
        bottomDivider
        containerStyle={[
          styles.quickAddItemContainer,
          isEditingThisItem && styles.quickAddItemEditing,
          isSelected && !isEditingThisItem && styles.quickAddItemSelected,
          ((isAnyItemEditing && !isEditingThisItem) ||
            isLoading ||
            isSavingToLibrary) &&
            styles.disabledItem,
        ]}
      >
        {isEditingThisItem ? (
          <View style={styles.quickAddEditView}>
            <View style={styles.editIconAndNameRow}>
              {renderFoodIcon(item.foodName)}
              {gradeResult && (
                <Text
                  style={[
                    styles.gradePill,
                    {
                      backgroundColor: gradeResult.color,
                      marginLeft: 0,
                      marginRight: 8,
                    },
                  ]}
                >
                  {gradeResult.letter}
                </Text>
              )}
              <Input
                value={editedName}
                onChangeText={onNameChange}
                placeholder={t("quickAddList.foodNamePlaceholder")}
                inputContainerStyle={styles.quickEditInputContainer}
                inputStyle={styles.quickEditInput}
                containerStyle={styles.quickEditNameContainer}
                autoFocus
                selectTextOnFocus
              />
            </View>
            <View style={styles.quickEditGramsRow}>
              <Input
                value={editedGrams}
                onChangeText={onGramsChange}
                placeholder={t("quickAddList.gramsPlaceholder")}
                keyboardType="numeric"
                inputContainerStyle={styles.quickEditInputContainer}
                inputStyle={styles.quickEditInput}
                containerStyle={styles.quickEditGramsContainer}
                rightIcon={<Text style={styles.quickEditUnitText}>g</Text>}
                errorMessage={
                  !isValidNumberInput(editedGrams) && editedGrams !== ""
                    ? t("quickAddList.errorInvalidGrams")
                    : ""
                }
                errorStyle={styles.inputError}
              />
              <TouchableOpacity
                onPress={onSaveEdit}
                style={styles.quickEditActionButton}
              >
                <Icon
                  name="checkmark-circle"
                  type="ionicon"
                  color={theme.colors.success}
                  size={28}
                />
              </TouchableOpacity>
              <TouchableOpacity
                onPress={onCancelEdit}
                style={styles.quickEditActionButton}
              >
                <Icon
                  name="close-circle"
                  type="ionicon"
                  color={theme.colors.error}
                  size={28}
                />
              </TouchableOpacity>
            </View>
          </View>
        ) : (
          <>
            <CheckBox
              checked={isSelected}
              onPress={() => onToggleItem(index)}
              containerStyle={styles.quickAddCheckbox}
              checkedColor={theme.colors.primary}
              disabled={!canPerformActions}
              size={22}
            />
            {renderFoodIcon(item.foodName)}
            <ListItem.Content>
              <View style={styles.titleAndGradeContainer}>
                {gradeResult && (
                  <Text
                    style={[
                      styles.gradePill,
                      { backgroundColor: gradeResult.color },
                    ]}
                  >
                    {gradeResult.letter}
                  </Text>
                )}
                <ListItem.Title
                  style={styles.quickAddItemTitle}
                  numberOfLines={1}
                  ellipsizeMode="tail"
                >
                  {item.foodName}
                </ListItem.Title>
              </View>
              <ListItem.Subtitle style={styles.quickAddItemSubtitle}>
                {`Est: ${Math.round(
                  item.estimatedWeightGrams
                )}g • ~${estimatedCalories} kcal`}
              </ListItem.Subtitle>
            </ListItem.Content>
            <View style={styles.actionButtonsContainer}>
              {isSavingToLibrary ? (
                <ActivityIndicator
                  size="small"
                  color={theme.colors.primary}
                  style={styles.actionIconPadding}
                />
              ) : (
                <TouchableOpacity
                  onPress={handleSaveToLibraryPress}
                  disabled={!canPerformActions} // Button is not disabled if already in library, allowing overwrite flow
                  style={styles.actionIconPadding}
                >
                  <Icon
                    name={isInLibrary ? "bookmark" : "bookmark-plus-outline"}
                    type="material-community"
                    size={22}
                    color={
                      canPerformActions
                        ? theme.colors.primary
                        : theme.colors.grey3
                    }
                  />
                </TouchableOpacity>
              )}
              <TouchableOpacity
                onPress={() => onEditItem(index)}
                disabled={!canPerformActions}
                style={styles.actionIconPadding}
              >
                <Icon
                  name="edit"
                  type="material"
                  size={22}
                  color={
                    canPerformActions ? theme.colors.grey1 : theme.colors.grey3
                  }
                />
              </TouchableOpacity>
            </View>
          </>
        )}
      </ListItem>
    </Pressable>
  );
};

const useStyles = makeStyles((theme) => ({
  quickAddItemContainer: {
    paddingVertical: 8,
    paddingHorizontal: 8,
    backgroundColor: theme.colors.background,
    borderBottomColor: theme.colors.divider,
    flexDirection: "row",
    alignItems: "center",
    minHeight: 65,
  },
  quickAddItemSelected: {
    backgroundColor: theme.colors.successLight,
    borderLeftWidth: 4,
    borderLeftColor: theme.colors.success,
  },
  quickAddItemEditing: {
    backgroundColor: theme.colors.background,
    paddingVertical: 12,
    paddingHorizontal: 10,
    borderWidth: 1.5,
    borderColor: theme.colors.primary,
    borderRadius: 8,
    marginVertical: 6,
    marginHorizontal: 2,
    shadowColor: theme.colors.black,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.15,
    shadowRadius: 2.5,
    elevation: 4,
  },
  disabledItem: {
    opacity: 0.6,
  },
  quickAddCheckbox: {
    padding: 0,
    margin: 0,
    marginRight: 10,
    marginLeft: 0,
    backgroundColor: "transparent",
    borderWidth: 0,
  },
  foodIconContainer: {
    width: 38,
    height: 38,
    marginRight: 10,
    borderRadius: 6,
    alignItems: "center",
    justifyContent: "center",
    overflow: "hidden",
  },
  foodIconImage: {
    width: 38,
    height: 38,
    marginRight: 10,
    borderRadius: 6,
  },
  iconPlaceholder: {
    backgroundColor: theme.colors.grey5,
  },
  titleAndGradeContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 2,
  },
  gradePill: {
    fontSize: 11,
    fontWeight: "bold",
    color: theme.colors.white,
    paddingHorizontal: 5,
    paddingVertical: 1,
    borderRadius: 6,
    marginRight: 6,
    minWidth: 18,
    textAlign: "center",
    overflow: "hidden",
  },
  quickAddItemTitle: {
    fontWeight: "600",
    color: theme.colors.text,
    fontSize: 15,
    textAlign: "left",
    flexShrink: 1,
  },
  quickAddItemSubtitle: {
    color: theme.colors.secondary,
    fontSize: 12.5,
    textAlign: "left",
  },
  actionButtonsContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginLeft: 8,
  },
  actionIconPadding: {
    paddingVertical: 8,
    paddingHorizontal: 6,
  },
  quickAddEditView: {
    flex: 1,
  },
  editIconAndNameRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  quickEditInputContainer: {
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.primary,
    height: 38,
    paddingHorizontal: 0,
  },
  quickEditInput: {
    fontSize: 15,
    color: theme.colors.text,
    paddingVertical: 0,
    textAlign: "left",
  },
  quickEditNameContainer: {
    flex: 1,
    paddingHorizontal: 0,
  },
  quickEditGramsRow: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 5,
  },
  quickEditGramsContainer: {
    flex: 1,
    paddingHorizontal: 0,
    marginRight: 10,
  },
  quickEditUnitText: {
    color: theme.colors.grey2,
    fontSize: 14,
    fontWeight: "500",
    paddingRight: 5,
  },
  quickEditActionButton: {
    paddingHorizontal: 8,
    paddingVertical: 5,
  },
  inputError: {
    color: theme.colors.error,
    fontSize: 11,
    marginVertical: 0,
    marginLeft: 2,
    height: 14,
    textAlign: "left",
  },
}));

export default QuickAddItem;
---------- END QuickAddItem.tsx ----------


---------- FoodFormFields.tsx ----------
// src/components/FoodFormFields.tsx
import React from 'react';
import { Input, makeStyles, useTheme, Text } from '@rneui/themed'; // Add Text
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { Food } from '../types/food';
import { t } from '../localization/i18n';

type FoodFormValues = Partial<Omit<Food, 'id'>>;

interface FoodFormFieldsProps {
    values: FoodFormValues;
    errors: { [key: string]: string };
    onInputChange: (key: keyof Omit<Food, 'id'>, value: string, isEdit: boolean) => void;
    isEditing: boolean;
    disabled: boolean;
}

const FoodFormFields: React.FC<FoodFormFieldsProps> = ({
    values,
    errors,
    onInputChange,
    isEditing,
    disabled,
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    const getValue = (key: keyof Omit<Food, 'id'>): string => {
         const val = values[key];
         if (typeof val === 'number') {
              if (val === 0 && !isEditing) return "";
              return String(val);
         }
         return String(val ?? "");
    };

    const getErrorText = (fieldKey: keyof Omit<Food, 'id'>) => {
        const errorKey = errors[fieldKey];
        if (!errorKey) return "";
        // Assuming error keys in en.json map to field names + specific error type
        // e.g., foodFormFields.errorNameRequired, foodFormFields.errorNonNegative
        // This might need adjustment based on how specific your error keys are.
        if (fieldKey === 'name' && errorKey === 'Name is required') return t('foodFormFields.errorNameRequired');
        if (['calories', 'protein', 'carbs', 'fat'].includes(fieldKey) && errorKey === 'Must be a non-negative number') {
            return t('foodFormFields.errorNonNegative');
        }
        return errorKey; // Fallback to the raw error key if no specific translation found
    };

    return (
        <>
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.foodName')}</Text>}
                value={getValue("name")}
                onChangeText={(text) => onInputChange("name", text, isEditing)}
                errorMessage={getErrorText("name")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="food-apple" size={24} color={errors.name ? theme.colors.error : theme.colors.grey1} />}
                disabled={disabled}
                autoCapitalize="words"
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.calories')}</Text>}
                keyboardType="numeric" value={getValue("calories")}
                onChangeText={(text) => onInputChange("calories", text, isEditing)}
                errorMessage={getErrorText("calories")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="fire" size={24} color={errors.calories ? theme.colors.error : theme.colors.grey1} />}
                disabled={disabled}
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.protein')}</Text>}
                keyboardType="numeric" value={getValue("protein")}
                onChangeText={(text) => onInputChange("protein", text, isEditing)}
                errorMessage={getErrorText("protein")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="food-drumstick" size={24} color={errors.protein ? theme.colors.error : theme.colors.grey1} />}
                disabled={disabled}
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.carbs')}</Text>}
                keyboardType="numeric" value={getValue("carbs")}
                onChangeText={(text) => onInputChange("carbs", text, isEditing)}
                errorMessage={getErrorText("carbs")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="bread-slice" size={24} color={errors.carbs ? theme.colors.error : theme.colors.grey1} />}
                disabled={disabled}
            />
            <Input
                label={<Text style={styles.labelStyle}>{t('foodFormFields.fat')}</Text>}
                keyboardType="numeric" value={getValue("fat")}
                onChangeText={(text) => onInputChange("fat", text, isEditing)}
                errorMessage={getErrorText("fat")}
                errorStyle={styles.errorStyle}
                inputContainerStyle={styles.inputContainerStyle}
                inputStyle={styles.inputStyle}
                leftIcon={<MaterialCommunityIcons name="oil" size={24} color={errors.fat ? theme.colors.error : theme.colors.grey1} />}
                disabled={disabled}
            />
        </>
    );
};

const useStyles = makeStyles((theme) => ({
    labelStyle: { color: theme.colors.text, fontWeight: '500', marginBottom: 2, fontSize: 14, textAlign: 'left' },
    inputContainerStyle: { borderBottomWidth: 1, borderBottomColor: theme.colors.grey4, marginBottom: 5, paddingBottom: 2, },
    inputStyle: { color: theme.colors.text, marginLeft: 10, fontSize: 16, textAlign: 'left' },
    errorStyle: { color: theme.colors.error, textAlign: 'left' }
}));

export default FoodFormFields;
---------- END FoodFormFields.tsx ----------


---------- FoodItem.tsx ----------
// src/components/FoodItem.tsx
import React, { forwardRef, useState, useCallback, memo, useMemo } from "react";
import { StyleSheet, View, Image, ActivityIndicator, TouchableOpacity } from "react-native";
import { ListItem, Icon as RNEIcon, useTheme, Button, makeStyles, Text } from "@rneui/themed";
import { Food } from "../types/food";
import Toast from "react-native-toast-message";
import { t } from '../localization/i18n';
import { calculateBaseFoodGrade, FoodGradeResult } from "../utils/gradingUtils";

interface FoodItemProps {
  food: Food;
  onEdit: (food: Food) => void;
  onDelete: (foodId: string) => void;
  onUndoDelete: (food: Food) => void;
  onQuickAdd: (food: Food) => void; // New prop for quick add
  foodIconUrl: string | null | undefined;
}

const FoodItem = memo(forwardRef<any, FoodItemProps>(
  ({ food, onEdit, onDelete, onUndoDelete, onQuickAdd, foodIconUrl }, ref) => {
    const { theme } = useTheme();
    const styles = useStyles();
    const [iconLoadError, setIconLoadError] = useState(false);

    const gradeResult: FoodGradeResult | null = useMemo(() => {
        return calculateBaseFoodGrade(food);
    }, [food]);

    const handleUndo = useCallback(() => {
         onUndoDelete(food);
    }, [food, onUndoDelete]);

    const handleDelete = useCallback(() => {
      onDelete(food.id);
       Toast.show({
            type: 'info',
            text1: t('foodListScreen.foodDeleted', { foodName: food.name }),
            text2: t('dailyEntryScreen.undo'), 
            position: 'bottom',
            visibilityTime: 4000,
            onPress: handleUndo,
            bottomOffset: 80,
        });
    }, [food.id, food.name, onDelete, handleUndo]);

    const handleImageError = useCallback(() => {
        setIconLoadError(true);
    }, []); 

    React.useEffect(() => {
        setIconLoadError(false); 
    }, [foodIconUrl]);

    const renderIcon = () => {
        const isLoadingIcon = foodIconUrl === undefined;
        if (isLoadingIcon) {
            return ( <View style={[styles.foodIcon, styles.iconPlaceholder]}><ActivityIndicator size="small" color={theme.colors.grey3} /></View> );
        } else if (foodIconUrl && !iconLoadError) {
             return ( <Image source={{ uri: foodIconUrl }} style={styles.foodIconImage} onError={handleImageError} resizeMode="contain" /> );
        } else {
            return ( <View style={[styles.foodIcon, styles.iconPlaceholder]}><RNEIcon name="fast-food-outline" type="ionicon" size={20} color={theme.colors.grey3} /></View> );
        }
    };

    return (
      <ListItem.Swipeable
        ref={ref}
        bottomDivider
        leftContent={(reset) => (
          <Button title={t('foodListScreen.edit')} onPress={() => { onEdit(food); reset(); }} icon={{ name: "edit", color: theme.colors.white }} buttonStyle={styles.swipeButtonEdit} titleStyle={styles.swipeButtonTitle} />
        )}
        rightContent={(reset) => (
          <Button title={t('foodListScreen.delete')} onPress={() => { handleDelete(); reset(); }} icon={{ name: "delete", color: theme.colors.white }} buttonStyle={styles.swipeButtonDelete} titleStyle={styles.swipeButtonTitle} />
        )}
        containerStyle={styles.listItemContainer}
      >
        {renderIcon()}
        <ListItem.Content>
          <View style={styles.titleContainer}>
            {gradeResult && (
                <Text style={[styles.gradePill, { backgroundColor: gradeResult.color }]}>
                    {gradeResult.letter}
                </Text>
            )}
            <ListItem.Title style={styles.title} numberOfLines={1} ellipsizeMode="tail">
                {food.name}
            </ListItem.Title>
          </View>
          <ListItem.Subtitle style={styles.subtitle}>
            {`100g: Cal: ${Math.round(food.calories)} P: ${Math.round(food.protein)} C: ${Math.round(food.carbs)} F: ${Math.round(food.fat)}`}
          </ListItem.Subtitle>
        </ListItem.Content>
        <TouchableOpacity onPress={() => onQuickAdd(food)} style={styles.quickAddButton} hitSlop={{ top: 10, bottom: 10, left: 5, right: 5 }}>
            <RNEIcon name="add-circle-outline" type="ionicon" color={theme.colors.primary} size={26} />
        </TouchableOpacity>
        <ListItem.Chevron color={theme.colors.grey3} />
      </ListItem.Swipeable>
    );
  }
));

const useStyles = makeStyles((theme) => ({
    listItemContainer: { backgroundColor: theme.colors.background, paddingVertical: 12, paddingHorizontal: 15, borderBottomColor: theme.colors.divider, },
    titleContainer: { flexDirection: 'row', alignItems: 'center', marginBottom: 3, },
    gradePill: {
        fontSize: 12,
        fontWeight: 'bold',
        color: theme.colors.white, 
        paddingHorizontal: 6,
        paddingVertical: 2,
        borderRadius: 8,
        marginRight: 8,
        minWidth: 20, 
        textAlign: 'center',
        overflow: 'hidden', 
    },
    title: { color: theme.colors.text, fontWeight: "600", fontSize: 16, flexShrink: 1, textAlign: 'left', }, 
    subtitle: { color: theme.colors.secondary, fontSize: 13, marginTop: 2, textAlign: 'left', },
    swipeButtonEdit: { minHeight: "100%", backgroundColor: theme.colors.warning, justifyContent: 'center', alignItems: 'center', },
    swipeButtonDelete: { minHeight: "100%", backgroundColor: theme.colors.error, justifyContent: 'center', alignItems: 'center', },
    swipeButtonTitle: { color: theme.colors.white, fontWeight: 'bold', fontSize: 15, },
    foodIcon: { width: 40, height: 40, marginRight: 15, borderRadius: 8, alignItems: 'center', justifyContent: 'center', },
    foodIconImage: { width: 40, height: 40, marginRight: 15, borderRadius: 8, },
    iconPlaceholder: { backgroundColor: theme.colors.grey5, },
    quickAddButton: {
        paddingHorizontal: 8, // Add some padding around the icon
        justifyContent: 'center',
        alignItems: 'center',
    },
}));

export default FoodItem;
---------- END FoodItem.tsx ----------


---------- QuickAddList.tsx ----------
// src/components/QuickAddList.tsx
import React from 'react';
import {
    View,
    FlatList,
    ActivityIndicator,
} from 'react-native';
import {
    Icon,
    Text,
    useTheme,
    makeStyles,
} from '@rneui/themed';
import { EstimatedFoodItem } from '../types/macros';
import { Food } from '../types/food'; // Import Food type
import { t } from '../localization/i18n';
import QuickAddItem from './Entry/QuickAddItem';

interface QuickAddListProps {
    items: EstimatedFoodItem[];
    selectedIndices: Set<number>;
    editingIndex: number | null;
    editedName: string;
    editedGrams: string;
    onToggleItem: (index: number) => void;
    onEditItem: (index: number) => void;
    onSaveEdit: () => void;
    onCancelEdit: () => void;
    onNameChange: (name: string) => void;
    onGramsChange: (grams: string) => void;
    style?: object;
    isLoading?: boolean;
    foodIcons: { [foodName: string]: string | null | undefined };
    onSaveItemToLibrary: (item: EstimatedFoodItem, setSavingState: (isSaving: boolean) => void) => Promise<void>;
    foods: Food[]; // Add foods prop
}

const QuickAddList: React.FC<QuickAddListProps> = ({
    items,
    selectedIndices,
    editingIndex,
    editedName,
    editedGrams,
    onToggleItem,
    onEditItem,
    onSaveEdit,
    onCancelEdit,
    onNameChange,
    onGramsChange,
    style,
    isLoading,
    foodIcons,
    onSaveItemToLibrary,
    foods, // Destructure foods
}) => {
    const { theme } = useTheme();
    const styles = useStyles();

    const renderItem = ({ item, index }: { item: EstimatedFoodItem; index: number }) => {
        const isSelected = selectedIndices.has(index);
        const isEditingThisItem = editingIndex === index;
        const isAnyItemEditing = editingIndex !== null;

        return (
            <QuickAddItem
                item={item}
                index={index}
                isSelected={isSelected}
                isEditingThisItem={isEditingThisItem}
                isAnyItemEditing={isAnyItemEditing}
                isLoading={isLoading}
                foodIcons={foodIcons}
                editedName={isEditingThisItem ? editedName : ''}
                editedGrams={isEditingThisItem ? editedGrams : ''}
                onToggleItem={onToggleItem}
                onEditItem={onEditItem}
                onSaveEdit={onSaveEdit}
                onCancelEdit={onCancelEdit}
                onNameChange={onNameChange}
                onGramsChange={onGramsChange}
                onSaveToLibrary={onSaveItemToLibrary}
                foods={foods} // Pass foods to QuickAddItem
            />
        );
    };

    if (isLoading && items.length === 0) {
         return (
             <View style={styles.centeredContent}>
                 <ActivityIndicator size="large" color={theme.colors.primary} />
                 <Text style={styles.loadingText}>{t('quickAddList.analyzing')}</Text>
             </View>
         );
    }

    return (
        <FlatList
            data={items}
            keyExtractor={(item, index) => `quickadd-${index}-${item.foodName}-${item.estimatedWeightGrams}`}
            renderItem={renderItem}
            ListEmptyComponent={
                !isLoading ? (
                    <View style={styles.emptyListContainer}>
                        <Icon name="image-search-outline" type="material-community" size={48} color={theme.colors.grey3} />
                        <Text style={styles.emptyListText}>{t('quickAddList.emptyMessage')}</Text>
                        <Text style={styles.emptyListSubText}>{t('quickAddList.emptyHint')}</Text>
                    </View>
                ) : null
            }
            style={[styles.listDefaults, style]}
            extraData={{ selectedIndices, editingIndex, foodIcons, isLoading, editedName, editedGrams, foodsLength: foods.length }}
            keyboardShouldPersistTaps="handled"
            contentContainerStyle={items.length === 0 && !isLoading ? styles.listContentContainerEmpty : {paddingBottom: 10}}
        />
    );
};

const useStyles = makeStyles((theme) => ({
    listDefaults: {},
    listContentContainerEmpty: { flexGrow: 1, justifyContent: 'center', },
    emptyListContainer: {
        alignItems: "center",
        justifyContent: 'center',
        paddingVertical: 40,
        paddingHorizontal: 20,
        flexGrow: 1,
    },
    emptyListText: {
        color: theme.colors.grey2,
        fontSize: 16,
        textAlign: "center",
        marginTop: 15,
        fontWeight: '500',
    },
    emptyListSubText: {
        fontSize: 14,
        color: theme.colors.grey3,
        textAlign: "center",
        marginTop: 8,
    },
    centeredContent: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        padding: 20,
        minHeight: 200,
    },
    loadingText: {
        marginTop: 12,
        color: theme.colors.text,
        fontSize: 16,
        fontWeight: "500",
    },
}));

export default QuickAddList;
---------- END QuickAddList.tsx ----------


---------- StatisticsChart.tsx ----------
// src/components/StatisticsChart.tsx
import React from "react";
import { View, StyleSheet, Platform } from "react-native";
import { WebView } from "react-native-webview";
import { Statistics, MacroType, macros as macroKeys } from "../types/settings";
import { useTheme } from "@rneui/themed";
import { t } from '../localization/i18n';
import i18n from '../localization/i18n'; // Import i18n for locale
import * as Localization from 'expo-localization'; // Import Localization

// Declare uPlot as a global variable for TypeScript, as it's loaded via CDN in the WebView
declare const uPlot: any;

// Local interface for uPlot Series configuration to help TypeScript
interface uPlotSeriesConfig {
  stroke?: string;
  width?: number;
  label?: string;
  points?: { show?: boolean; size?: number; fill?: string; stroke?: string; };
  dash?: number[];
  // Add other series properties if you use them
}

interface StatisticsChartProps {
  statistics: Statistics;
}

const StatisticsChart: React.FC<StatisticsChartProps> = ({ statistics }) => {
  const { theme } = useTheme();

  const getChartTitle = (macro: MacroType): string => {
    switch(macro) {
        case 'calories': return t('dailyProgress.calories');
        case 'protein': return t('dailyProgress.protein');
        case 'carbs': return t('dailyProgress.carbs');
        case 'fat': return t('dailyProgress.fat');
        default:
            const exhaustiveCheck: never = macro;
            return exhaustiveCheck;
    }
  };

  const chartHeightInHTML = 250;
  const chartVerticalMarginInHTML = 20;
  const totalEstimatedWebViewHeight = macroKeys.length * (chartHeightInHTML + chartVerticalMarginInHTML) + 40; // Extra padding for safety

  const generateChartHTML = () => {
    const chartData = (macroKeys as readonly MacroType[]).reduce((acc, macro) => {
      acc[macro] = statistics[macro].map((series) =>
        series.map((item) => ({ x: item.x / 1000, y: item.y })) // Ensure x is in seconds
      );
      return acc;
    }, {} as { [key in MacroType]: { x: number; y: number }[][] });

    const textColor = theme.colors.text;
    const gridColor = theme.colors.grey5;
    const fontFamily = Platform.OS === 'ios' ? "System" : "sans-serif";

    const lineColors = {
      calories: theme.colors.primary, protein: theme.colors.success,
      carbs: theme.colors.warning, fat: theme.colors.error,
    };

    return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
            <title>Macro Charts</title>
            <style>
                body { font-family: ${fontFamily}; margin: 0; padding: 0; background-color: ${theme.colors.background}; color: ${textColor}; overflow-x: hidden; }
                .chart-container { width: 95%; height: ${chartHeightInHTML}px; margin: ${chartVerticalMarginInHTML / 2}px auto; }
                .no-data-message { display: flex; align-items: center; justify-content: center; height: 100%; text-align: center; color: ${textColor}; font-size: 14px; }
                .u-legend .u-series > td { min-width: 50px; } /* Ensure legend items have some width */
            </style>
            <link rel="stylesheet" href="https://unpkg.com/uplot@1.6.27/dist/uPlot.min.css">
            <script src="https://unpkg.com/uplot@1.6.27/dist/uPlot.iife.min.js"></script>
        </head>
        <body>
            ${(macroKeys as readonly MacroType[]).map((macro) => {
                const currentMacroData = chartData[macro];
                const chartTitle = getChartTitle(macro);
                const isCalories = macro === "calories";

                const seriesConfig: uPlotSeriesConfig[] = [
                    {}, // For X-axis (time)
                    { // Intake series
                        stroke: lineColors[macro] || theme.colors.primary,
                        width: 2,
                        label: isCalories ? t('statisticsChart.intake') : chartTitle,
                        points: { show: false }
                    }
                ];
                if (isCalories) {
                    seriesConfig.push({ // Goal series for calories
                        stroke: "red",
                        width: 1.5,
                        dash: [10, 5],
                        label: t('statisticsChart.goal'),
                        points: { show: false }
                    });
                }

                return `
                <div id="${macro}-chart" class="chart-container">
                    <div class="no-data-message">${t("statisticsChart.noData", { chartTitle: chartTitle })}</div>
                </div>
                <script>
                    (function() {
                        const chartElement = document.getElementById('${macro}-chart');
                        try {
                            const dataForChart = ${JSON.stringify(currentMacroData)};
                            console.log('--- uPlot Init for ${macro} ---');
                            console.log('Data For Chart (${macro}):', JSON.stringify(dataForChart));
                            
                            let xValues = [];
                            let yValuesIntake = [];
                            let yValuesGoal = [];
                            let canRender = false;

                            if (dataForChart && dataForChart.length > 0 && dataForChart[0] && Array.isArray(dataForChart[0]) && dataForChart[0].length >= 1) { // Need at least 1 point to attempt render, uPlot handles single points
                                xValues = dataForChart[0].map(d => d.x);
                                yValuesIntake = dataForChart[0].map(d => d.y);
                                canRender = true; 
                                
                                if (${isCalories} && dataForChart.length > 1 && dataForChart[1] && Array.isArray(dataForChart[1])) {
                                    // Align goal data to intake's xValues
                                    const tempGoalMap = new Map(dataForChart[1].map(p => [p.x, p.y]));
                                    yValuesGoal = xValues.map(x => tempGoalMap.get(x) === undefined ? null : tempGoalMap.get(x));
                                } else if (${isCalories}) {
                                    yValuesGoal = new Array(xValues.length).fill(null); // Ensure goal array exists if no data
                                }
                            }

                            console.log('Can Render (${macro}):', canRender);
                            console.log('X Values (${macro}):', JSON.stringify(xValues));
                            console.log('Y Intake (${macro}):', JSON.stringify(yValuesIntake));
                            if (${isCalories}) {
                                console.log('Y Goal (${macro}):', JSON.stringify(yValuesGoal));
                            }

                            if (canRender) {
                                chartElement.innerHTML = ''; // Clear "no data" message
                                const uPlotInstanceData = ${isCalories} ? [xValues, yValuesIntake, yValuesGoal] : [xValues, yValuesIntake];
                                
                                const opts = {
                                    title: "${chartTitle}",
                                    width: chartElement.offsetWidth,
                                    height: ${chartHeightInHTML},
                                    tzDate: ts => uPlot.tzDate(new Date(ts * 1000), '${Localization.getCalendars()?.[0]?.timeZone || 'UTC'}'),
                                    scales: { x: { time: true }, y: { range: (self, min, max) => [0, Math.max(10, max * 1.1)] } }, // y-axis starts at 0, ensure some height even for small values
                                    axes: [
                                        { stroke: "${textColor}", font: "12px ${fontFamily}", grid: { stroke: "${gridColor}", width: 1 }, ticks: { stroke: "${gridColor}", width: 1 } },
                                        { stroke: "${textColor}", font: "12px ${fontFamily}", grid: { stroke: "${gridColor}", width: 1 }, ticks: { stroke: "${gridColor}", width: 1 }, values: (self, ticks) => ticks.map(rawValue => Math.round(rawValue)) }
                                    ],
                                    series: ${JSON.stringify(seriesConfig)},
                                    cursor: { drag: { setScale: false }, focus: { prox: 30 }, points: { size: 6, fill: (self, i) => self.series[i]._stroke, stroke: (self, i) => self.series[i]._stroke } },
                                    ${isCalories ? `
                                    hooks: {
                                        draw: [
                                            (u) => {
                                                const { ctx, data } = u;
                                                if (!data || data.length < 3 || !data[0] || !data[1] || !data[2]) return; // Need all three series for calories (x, intake, goal)
                                                if (!u.series[1] || !u.series[1].show || !u.series[2] || !u.series[2].show) return;

                                                const ts = data[0];
                                                const intake = data[1];
                                                const goal = data[2];

                                                if (ts.length < 2) return; // Need at least two points to draw an area

                                                ctx.save();
                                                ctx.fillStyle = "rgba(255, 0, 0, 0.15)";
                                                
                                                let currentSegment = [];

                                                for (let i = 0; i < ts.length; i++) {
                                                    if (intake[i] != null && goal[i] != null && intake[i] > goal[i]) {
                                                        currentSegment.push({ x: ts[i], intakeY: intake[i], goalY: goal[i] });
                                                    } else {
                                                        if (currentSegment.length > 0) {
                                                            // Draw filled segment
                                                            ctx.beginPath();
                                                            ctx.moveTo(u.valToPos(currentSegment[0].x, "x", true), u.valToPos(currentSegment[0].goalY, "y", true));
                                                            currentSegment.forEach(pt => ctx.lineTo(u.valToPos(pt.x, "x", true), u.valToPos(pt.intakeY, "y", true)));
                                                            for (let k = currentSegment.length - 1; k >= 0; k--) {
                                                                ctx.lineTo(u.valToPos(currentSegment[k].x, "x", true), u.valToPos(currentSegment[k].goalY, "y", true));
                                                            }
                                                            ctx.closePath();
                                                            ctx.fill();
                                                            currentSegment = [];
                                                        }
                                                    }
                                                }
                                                // Draw any remaining segment
                                                if (currentSegment.length > 0) {
                                                    ctx.beginPath();
                                                    ctx.moveTo(u.valToPos(currentSegment[0].x, "x", true), u.valToPos(currentSegment[0].goalY, "y", true));
                                                    currentSegment.forEach(pt => ctx.lineTo(u.valToPos(pt.x, "x", true), u.valToPos(pt.intakeY, "y", true)));
                                                    for (let k = currentSegment.length - 1; k >= 0; k--) {
                                                        ctx.lineTo(u.valToPos(currentSegment[k].x, "x", true), u.valToPos(currentSegment[k].goalY, "y", true));
                                                    }
                                                    ctx.closePath();
                                                    ctx.fill();
                                                }
                                                ctx.restore();
                                            }
                                        ]
                                    }` : ''}
                                };
                                console.log('uPlot opts for ${macro}:', JSON.stringify(opts.series));
                                console.log('uPlot data for ${macro}:', JSON.stringify(uPlotInstanceData));
                                new uPlot(opts, uPlotInstanceData, chartElement);
                                console.log('--- uPlot instance CREATED for ${macro} ---');
                            } else {
                                console.log('--- Condition to render uPlot NOT MET for ${macro} ---');
                            }
                        } catch (e) {
                            console.error('--- ERROR in uPlot script for ${macro} ---', e.message, e.stack);
                            chartElement.innerHTML = '<div class="no-data-message" style="color:red;">Chart Error: ' + e.message + '</div>';
                        }
                    })();
                </script>
            `;}).join("")}
        </body>
        </html>
        `;
  };

  return (
    <View style={[styles.webViewContainer, { height: totalEstimatedWebViewHeight }]}>
      <WebView
        originWhitelist={["*"]}
        source={{ html: generateChartHTML(), baseUrl: Platform.OS === 'android' ? 'file:///android_asset/' : '' }} // baseUrl for Android
        style={styles.webView}
        scalesPageToFit={Platform.OS === 'android'}
        scrollEnabled={false}
        javaScriptEnabled={true}
        domStorageEnabled={true}
        onError={(syntheticEvent) => {
          const {nativeEvent} = syntheticEvent;
          console.warn('WebView error: ', nativeEvent);
        }}
        onHttpError={(syntheticEvent) => { // Useful for 404s on resources like uPlot CSS/JS if CDN fails
            const {nativeEvent} = syntheticEvent;
            console.warn('WebView HTTP error: ', nativeEvent.url, nativeEvent.statusCode, nativeEvent.description);
        }}
        // Log messages from WebView's console.log to React Native console
        onMessage={(event) => {
            console.log("WebView Message:", event.nativeEvent.data);
        }}
        // Inject JavaScript to bridge console.log, console.error, etc.
        // Note: This basic bridge might not capture all nuances or complex objects perfectly.
        injectedJavaScript={`
            (function() {
                const originalConsoleLog = console.log;
                const originalConsoleError = console.error;
                const originalConsoleWarn = console.warn;
                const originalConsoleInfo = console.info;
                const originalConsoleDebug = console.debug;

                const rnBridgePost = (type, args) => {
                    const message = args.map(arg => {
                        if (typeof arg === 'object' || typeof arg === 'function') {
                            try {
                                return JSON.stringify(arg);
                            } catch (e) {
                                return '[Unserializable Object]';
                            }
                        }
                        return String(arg);
                    }).join(' ');
                    window.ReactNativeWebView.postMessage(JSON.stringify({ type: 'CONSOLE', level: type, message: message }));
                };

                console.log = function() { originalConsoleLog.apply(console, arguments); rnBridgePost('LOG', Array.from(arguments)); };
                console.error = function() { originalConsoleError.apply(console, arguments); rnBridgePost('ERROR', Array.from(arguments)); };
                console.warn = function() { originalConsoleWarn.apply(console, arguments); rnBridgePost('WARN', Array.from(arguments)); };
                console.info = function() { originalConsoleInfo.apply(console, arguments); rnBridgePost('INFO', Array.from(arguments)); };
                console.debug = function() { originalConsoleDebug.apply(console, arguments); rnBridgePost('DEBUG', Array.from(arguments)); };
                window.onerror = function(message, source, lineno, colno, error) {
                    rnBridgePost('GLOBAL_ERROR', [message, 'at', source + ':' + lineno + ':' + colno, error ? error.stack : '']);
                    return false; // Let default handler run.
                };
            })();
            true; // note: this is required, or you'll sometimes get silent failures
        `}
        key={`stat-chart-${theme.mode}-${i18n.locale}-${JSON.stringify(statistics).length}`}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  webViewContainer: {
    width: "100%",
    marginTop: 10,
  },
  webView: {
    flex: 1,
    backgroundColor: 'transparent',
  },
});

export default StatisticsChart;
---------- END StatisticsChart.tsx ----------


---------- ThemeSwitch.tsx ----------
// src/components/ThemeSwitch.tsx
// components/ThemeSwitch.tsx
import React from "react";
import { ListItem, Switch, useTheme } from "@rneui/themed";
import { t } from '../localization/i18n';

interface ThemeSwitchProps {
  currentTheme: 'light' | 'dark' | 'system';
  onToggle: (theme: 'light' | 'dark' | 'system') => void;
}

const ThemeSwitch: React.FC<ThemeSwitchProps> = ({ currentTheme, onToggle }) => {
  const { theme } = useTheme();

  return (
    <ListItem
      bottomDivider
      containerStyle={{ backgroundColor: theme.colors.background }}
    >
      <ListItem.Content>
        <ListItem.Title style={{ color: theme.colors.text, textAlign: 'left' }}>
          {t('themeSwitch.darkMode')}
        </ListItem.Title>
      </ListItem.Content>
      <Switch
        value={currentTheme === 'dark'}
        onValueChange={(newValue) => {
          onToggle(newValue ? 'dark' : 'light');
        }}
      />
    </ListItem>
  );
};

export default ThemeSwitch;
---------- END ThemeSwitch.tsx ----------


---------- i18n.ts ----------
// src/localization/i18n.ts
import * as Localization from 'expo-localization';
import { I18n } from 'i18n-js';
import en from './languages/en.json';
import ru from './languages/ru.json';
import he from './languages/he.json';
import { Platform, I18nManager } from 'react-native';
// Import specific date-fns locales statically
import { enUS, ru as ruLocale, he as heLocale } from 'date-fns/locale';

const translations = {
  en,
  ru,
  he,
};

const i18n = new I18n(translations);

// --- Helper Type Generation for Translation Keys ---

// Helper type to recursively generate dot-notation paths including intermediate paths
type Paths<T> = T extends object ? {
    [K in keyof T]: K extends string ? `${K}` | `${K}.${Paths<T[K]>}` : never;
}[keyof T] : never;

// Flattens the union type generated by Paths (removes trailing dots)
type FlattenPath<T extends string> =
    T extends `${infer Head}.${infer Tail}` ?
        Tail extends '' ? Head : `${Head}.${FlattenPath<Tail>}` :
    T;

// Final type representing all valid translation keys
export type TranslationKey = FlattenPath<Paths<typeof en>>;

// --- End Helper Type Generation ---


// Set initial locale and handle RTL
export const setLocale = (locale: string) => {
  const languageTag = locale.split('-')[0];
  i18n.locale = languageTag;
  i18n.defaultLocale = 'en';

  const isRTL = languageTag === 'he';
  if (Platform.OS !== 'web' && I18nManager.isRTL !== isRTL) {
    I18nManager.forceRTL(isRTL);
    console.log(`RTL forced to: ${isRTL} for locale: ${languageTag}. App restart/reload may be needed for full layout update.`);
  } else if (Platform.OS === 'web') {
      document.documentElement.dir = isRTL ? 'rtl' : 'ltr';
  }
};

const deviceLocale = Localization.getLocales()?.[0]?.languageTag || 'en-US';
setLocale(deviceLocale);

// Updated t function with the correct type for scope
export const t = (scope: TranslationKey, options?: any): string => {
  // Cast scope to string for the underlying i18n.t function
  return i18n.t(scope as string, { ...options, locale: i18n.locale });
};

// Function to get date-fns locale (unchanged)
export const getDateFnLocale = async () => {
  const currentLocale = i18n.locale.split('-')[0];
  switch (currentLocale) {
    case 'ru':
      return ruLocale;
    case 'he':
      return heLocale;
    case 'en':
    default:
      return enUS;
  }
};

export default i18n;
---------- END i18n.ts ----------


---------- en.json ----------
{
  "app": {
    "initializing": "Initializing...",
    "name": "MacrosVisionAI",
    "alertButtons": {
      "later": "Later",
      "restartNow": "Restart Now"
    }
  },
  "settingsScreen": {
    "title": "Settings",
    "account": {
      "title": "Account"
    },
    "general": {
      "title": "General"
    },
    "dailyGoals": {
      "title": "Daily Goals"
    },
    "goals": {
      "estimateButton": "Estimate Goals"
    },
    "cacheManagement": {
      "title": "Cache Management"
    },
    "statistics": {
      "title": "Statistics"
    },
    "dataManagement": {
      "title": "Data Management"
    },
    "language": {
      "title": "Language",
      "system": "System Default",
      "english": "English",
      "russian": "Russian",
      "hebrew": "Hebrew",
      "restartMessage": "Language changed. Restart the app for full effect."
    }
  },
  "accountSettings": {
    "coinBalance": "Coin Balance",
    "addTestCoins": "Add 10 Coins (Test)",
    "testButtonWarning": "Note: The \"Add Coins\" button is for testing/development only and should be removed or secured for production releases.",
    "notApplicable": "N/A",
    "errorLoadCoins": "Could not load coin balance",
    "errorAddCoins": "Failed to Add Coins",
    "coinsAdded": "Coins Added!"
  },
  "themeSwitch": {
    "darkMode": "Dark Mode"
  },
  "dailyGoalsInput": {
    "caloriesGoal": "Calories Goal",
    "proteinGoal": "Protein Goal",
    "carbsGoal": "Carbs Goal",
    "fatGoal": "Fat Goal"
  },
  "dataManagement": {
    "exportData": "Export Data",
    "importData": "Import Data",
    "clearAllData": "Clear All Data",
    "exportError": "Sharing Error",
    "exportErrorNoSharing": "Sharing is not available on your platform.",
    "exportFailed": "Export Failed",
    "exportFailedMessage": "An error occurred while exporting data.",
    "importCancelled": "Import cancelled by user.",
    "importInvalidFileType": "Invalid File Type",
    "importInvalidFileTypeMessage": "Please select a valid '.json' file.",
    "importFileTooLarge": "File Too Large",
    "importFileTooLargeMessage": "The selected file is too large (max 10MB).",
    "importFailed": "Import Failed",
    "importFailedInvalidStructure": "The imported file has an invalid structure or is missing required data (dailyEntries, foods, settings).",
    "importFailedParseError": "The imported file is not valid JSON or has corrupted content.",
    "importFailedAccessError": "Could not access the selected file.",
    "importFailedPermissionError": "Storage permissions are required to import files.",
    "importFailedUnknownError": "An unknown error occurred during import.",
    "importSuccessful": "Import Successful",
    "importSuccessfulMessage": "Data imported and saved successfully.",
    "clearDataSuccess": "Data Cleared",
    "clearDataSuccessMessage": "All application data has been successfully cleared.",
    "clearDataFailed": "Clear Data Failed",
    "clearDataFailedMessage": "Failed to clear data.",
    "confirmClearTitle": "Confirm Clear All Data",
    "confirmClearMessage": "This action is irreversible and will delete all entries, foods, and settings.\n\nEnter \"CLEAR DATA\" to proceed.",
    "confirmClearInputPlaceholder": "Enter \"CLEAR DATA\"",
    "clearConfirmationFailed": "Confirmation Failed",
    "clearConfirmationFailedMessage": "Incorrect confirmation text entered. Data was not cleared.",
    "dataReloaded": "Data reloaded."
  },
  "confirmationModal": {
    "confirm": "Confirm",
    "cancel": "Cancel",
    "defaultTitle": "Confirm Action",
    "defaultMessage": "Are you sure you want to perform this action?",
    "enterTextPlaceholder": "Enter confirmation text",
    "restartRequiredTitle": "Restart Required"
  },
  "dailyEntryScreen": {
    "tabTitle": "Daily Entry",
    "todaysEntries": "Today's Entries",
    "saving": "Saving...",
    "loadingEntries": "Loading Entries...",
    "noEntries": "No entries recorded for this day.",
    "noEntriesHint": "Tap '+' to add your first meal.",
    "entryAdded": "Entry added",
    "entryUpdated": "Entry updated",
    "itemRemoved": "%{itemName} removed",
    "undo": "Tap here to undo",
    "entryRestored": "Entry restored!",
    "itemsAdded": "%{count} item(s) added",
    "toDateFormat": "to %{date}",
    "errorLoad": "Load Error",
    "errorLoadMessage": "Failed to load necessary data.",
    "errorSave": "Save Error",
    "errorSaveMessage": "Could not save changes. Please try again.",
    "errorInvalidDate": "Invalid Date",
    "errorInvalidDateMessage": "Selected date is not valid.",
    "errorEditEntry": "Edit Error",
    "errorEditEntryMessage": "Error preparing entry for edit.",
    "errorAddMultiple": "Add Multiple Error",
    "errorAddMultipleMessage": "Failed to add multiple items.",
    "invalidEntryData": "Invalid Entry Data",
    "edit": "Edit",
    "delete": "Delete"
  },
  "foodListScreen": {
    "tabTitle": "Foods",
    "searchPlaceholder": "Search Your Food Library...",
    "loadingFoods": "Loading Foods...",
    "emptyLibrary": "Your food library is empty.",
    "emptyLibraryHint": "Tap '+' to add your first food item!",
    "noResults": "No foods found matching \"%{searchTerm}\"",
    "errorLoad": "Error",
    "errorLoadMessage": "Failed to load food list.",
    "foodAdded": "%{foodName} added",
    "foodUpdated": "%{foodName} updated",
    "foodDeleted": "%{foodName} deleted",
    "foodRestored": "%{foodName} restored",
    "errorCreate": "Error",
    "errorCreateMessage": "Failed to create food.",
    "errorUpdate": "Error",
    "errorUpdateMessage": "Failed to update food.",
    "errorDelete": "Delete Error",
    "errorDeleteMessage": "Failed to delete food from storage. Restored item.",
    "fixErrors": "Please fix errors",
    "edit": "Edit",
    "delete": "Delete"
  },
  "addEntryModal": {
    "titleAdd": "Add Entry",
    "titleEdit": "Edit Entry",
    "titleQuickAddSelect": "Select Items to Add",
    "titleQuickAddEdit": "Edit Item",
    "titleQuickAddAnalyzing": "Analyzing...",
    "searchPlaceholder": "Search Foods...",
    "recent": "Recent",
    "noResults": "No foods found matching \"%{searchTerm}\".",
    "noQuickAddResults": "No food items found in the image.",
    "amount": "Amount",
    "grams": "Grams",
    "autoAi": "Auto (AI)",
    "quickAddServing": "Quick Add:",
    "lastUsedServing": "Last: %{grams}g",
    "gramsPlaceholder": "Enter grams (e.g., 150)",
    "gramsPlaceholderEdit": "Update grams",
    "gramsError": "Enter a valid number",
    "autoPlaceholder": "Describe quantity (e.g., 1 cup cooked)",
    "buttonAdd": "Add",
    "buttonUpdate": "Update",
    "buttonBack": "Back",
    "buttonAddSelected": "Add %{count}",
    "buttonLoading": "Loading...",
    "quickAddHeader": "Select Items from Image",
    "quickAddHeaderEdit": "Editing Item Details",
    "alertInputMissing": "Input Missing",
    "alertInputMissingMessage": "Please select a food and enter a quantity description.",
    "alertGramsEstimated": "Grams Estimated",
    "alertGramsEstimatedMessage": "Estimated %{grams}g for %{foodName}",
    "alertFoodNotSelected": "Food Not Selected",
    "alertFoodNotSelectedMessage": "Please select a food item.",
    "alertInvalidAmount": "Invalid Amount",
    "alertInvalidAmountMessage": "Please enter a valid positive number for grams.",
    "alertQuickAddPermission": "Permission Required",
    "alertQuickAddCameraPermission": "Camera access needed.",
    "alertQuickAddGalleryPermission": "Gallery access needed.",
    "alertQuickAddUserCancelled": "User cancelled",
    "alertQuickAddCouldNotSelect": "Could not select image.",
    "alertQuickAddError": "Error",
    "alertQuickAddErrorMessage": "An unexpected error occurred.",
    "alertQuickAddFinishEditing": "Finish Editing",
    "alertQuickAddFinishEditingSaveOrCancel": "Please save or cancel the current edit first.",
    "alertQuickAddFromImageTitle": "Quick Add from Image",
    "alertQuickAddFromImageMessage": "Identify multiple foods from an image.",
    "alertQuickAddInvalidName": "Invalid Name",
    "alertQuickAddInvalidNameMessage": "Food name cannot be empty.",
    "alertQuickAddInvalidGrams": "Invalid Grams",
    "alertQuickAddInvalidGramsMessage": "Please enter a valid positive number.",
    "alertQuickAddNoItemsSelected": "No Items Selected",
    "alertQuickAddNoItemsSelectedMessage": "Select items to add.",
    "alertQuickAddNothingToAdd": "Nothing to Add",
    "alertQuickAddNothingToAddMessage": "No valid items were selected or prepared.",
    "alertQuickAddErrorPreparing": "Error",
    "alertQuickAddErrorPreparingMessage": "Could not prepare items to add.",
    "camera": "Camera",
    "gallery": "Gallery",
    "cancel": "Cancel",
    "addNewFoodButton": "Add New Food",
    "alertOverwriteFoodTitle": "Food Exists",
    "alertOverwriteFoodMessage": "A food named \"%{foodName}\" already exists. Overwrite with new macros?",
    "overwrite": "Overwrite",
    "toastFoodSavedToLibrary": "\"%{foodName}\" saved to library.",
    "toastFoodUpdatedInLibrary": "\"%{foodName}\" updated in library.",
    "toastErrorSavingToLibrary": "Error saving food to library."
  },
  "addFoodModal": {
    "titleAdd": "Add New Food",
    "titleEdit": "Edit Food",
    "buttonAdd": "Add",
    "buttonUpdate": "Update",
    "getFromImage": "Get from Image",
    "ingredientsOptional": "Ingredients (Optional)",
    "ingredientsPlaceholder": "e.g.\n100g Chicken Breast\n50g Rice\n1 tbsp Olive Oil",
    "backToManual": "Back to Manual Input",
    "aiCalculateRecipe": "Calculate with AI (Recipe/Text)",
    "aiGetFromIngredients": "Get Macros from Ingredients",
    "aiGetFromNameOnly": "Get Macros from Name Only",
    "barcodeComingSoon": "Barcode Input (Coming Soon)",
    "alertInputNeeded": "Input Needed",
    "alertInputNeededMessage": "Please enter a food name or ingredients to analyze.",
    "macrosEstimatedText": "Macros estimated from text.",
    "foodIdentified": "Food Identified!",
    "foodIdentifiedMessage": "Identified as %{foodName}. Macros estimated.",
    "errorGetImage": "Get Image",
    "errorGetImageMessage": "Choose a source for the food image:",
    "errorCamera": "Camera Error",
    "errorGallery": "Gallery Error",
    "errorPermission": "Permission Required",
    "errorCameraPermission": "Camera access needed."
  },
  "foodFormFields": {
    "foodName": "Food Name",
    "calories": "Calories (per 100g)",
    "protein": "Protein (per 100g)",
    "carbs": "Carbs (per 100g)",
    "fat": "Fat (per 100g)",
    "errorNameRequired": "Name is required",
    "errorNonNegative": "Must be a non-negative number"
  },
  "quickAddList": {
    "foodNamePlaceholder": "Food Name",
    "gramsPlaceholder": "Grams",
    "errorInvalidGrams": "Invalid",
    "analyzing": "Analyzing...",
    "emptyMessage": "No identifiable foods found in the image.",
    "emptyHint": "Try a different image or add manually."
  },
  "dailyProgress": {
    "calories": "Calories",
    "protein": "Protein",
    "carbs": "Carbs",
    "fat": "Fat"
  },
  "dateNavigator": {
    "invalidDate": "Invalid Date"
  },
  "settings": {
    "refreshIcons": "Refresh Food Icons",
    "iconsCacheCleared": "Icon Cache Cleared",
    "iconsCacheClearedMessage": "Icons will refresh.",
    "errorClearCache": "Failed to Clear Cache",
    "errorClearCacheMessage": "Unknown error."
  },
  "utils": {
    "macros": {
      "alertAiErrorRecipe": "AI Error (Recipe)",
      "alertAnalysisFailedSingle": "Analysis Failed (Single Item)",
      "alertQuickAddFailedMulti": "Quick Add Failed (Multi-Item)",
      "alertImageReadError": "Image Read Error",
      "alertImageReadErrorMessage": "Failed to read image file.",
      "errorGetMacrosRecipe": "Failed to get macros for recipe: %{error}",
      "errorImageAnalysis": "Image analysis failed: %{error}",
      "errorCouldNotAnalyze": "Could not analyze image: %{error}",
      "errorInvalidResponseMultiple": "Invalid response format from server for multiple items."
    },
    "units": {
      "alertAiEstimationFailed": "AI Estimation Failed",
      "errorCouldNotEstimateGrams": "Could not estimate grams: %{error}"
    },
    "image": {
      "alertCompressionError": "Compression Error",
      "alertCompressionErrorMessage": "Could not process the image for compression.",
      "errorFailedToRead": "Failed to read image file: %{error}"
    }
  },
  "backendService": {
    "errorInvalidClientId": "Invalid client ID format.",
    "errorRequestFailedParse": "Backend request failed (Status %{status}), failed to parse response.",
    "errorRequestFailedDetailFormat": "Backend error (Status %{status}), unexpected detail format.",
    "errorRequestFailedWithServerMsg": "Backend request failed (Status %{status}). Server response: %{response}",
    "errorAuthFailed": "Authentication failed. Invalid Client ID.",
    "errorPermissionDenied": "Permission denied.",
    "errorNotFound": "Resource not found.",
    "errorTooManyRequests": "Too many requests. Please try again later.",
    "errorInsufficientCoins": "Insufficient coins for this action.",
    "errorNetwork": "Failed to communicate with the backend.",
    "errorNetworkTimeout": "The request timed out. Please try again.",
    "errorNetworkConnection": " Please check your network connection.",
    "errorNetworkDetails": " Details: %{error}",
    "errorNetworkUnknown": " An unknown network error occurred.",
    "errorEstimateGramsUnexpectedResponse": "Failed to get grams estimation due to unexpected response.",
    "errorAddCoinsPositive": "Amount to add must be positive."
  },
  "statisticsChart": {
    "intake": "Intake",
    "goal": "Goal",
    "noData": "No data available to display chart for %{chartTitle}."
  },
  "questionnaireScreen": {
    "title": "Estimate Your Goals",
    "ageLabel": "Age (years)",
    "agePlaceholder": "e.g., 30",
    "sexLabel": "Sex",
    "sex": {
      "select": "Select Sex...",
      "male": "Male",
      "female": "Female"
    },
    "heightLabel": "Height",
    "heightPlaceholder": "e.g., 175",
    "weightLabel": "Weight",
    "weightPlaceholder": "e.g., 70",
    "activityLevelLabel": "Activity Level",
    "activityLevel": {
      "select": "Select Activity Level...",
      "sedentary": "Sedentary (little or no exercise)",
      "light": "Light (exercise 1-3 days/week)",
      "moderate": "Moderate (exercise 3-5 days/week)",
      "active": "Active (exercise 6-7 days/week)",
      "veryActive": "Very Active (hard exercise or physical job)"
    },
    "primaryGoalLabel": "Primary Goal",
    "primaryGoal": {
      "select": "Select Primary Goal...",
      "loseWeight": "Lose Weight",
      "maintainWeight": "Maintain Weight",
      "gainMuscle": "Gain Muscle"
    },
    "goalIntensityLabel": "Goal Intensity",
    "goalIntensity": {
      "select": "Select Intensity...",
      "mild": "Mild",
      "moderate": "Moderate",
      "aggressive": "Aggressive"
    },
    "calculateButton": "Calculate & Save Goals",
    "validation": {
      "invalidAge": "Enter a valid age (1-120).",
      "selectSex": "Please select your sex.",
      "invalidHeight": "Enter a valid height (50-250 cm).",
      "invalidWeight": "Enter a valid weight (20-300 kg).",
      "selectActivityLevel": "Please select your activity level.",
      "selectPrimaryGoal": "Please select your primary goal.",
      "selectGoalIntensity": "Please select your goal intensity.",
      "fixErrors": "Please fix the errors above."
    },
    "error": {
      "calculationFailedTitle": "Calculation Error",
      "calculationFailedMessage": "Could not calculate goals. Please check your inputs.",
      "genericSaveTitle": "Save Error",
      "genericSaveMessage": "Could not save the estimated goals. Please try again."
    },
    "toast": {
      "goalsCalculated": "Goals calculated and saved!",
      "minCaloriesAdjustedTitle": "Calories Adjusted",
      "minCaloriesAdjustedMessage": "Your calorie goal was adjusted to a minimum of %{calories} kcal."
    }
  }
}
---------- END en.json ----------


---------- he.json ----------
{
  "app": {
    "initializing": "מאתחל...",
    "name": "MacrosVisionAI",
    "alertButtons": {
      "later": "אחר כך",
      "restartNow": "הפעל מחדש כעת"
    }
  },
  "settingsScreen": {
    "title": "הגדרות",
    "account": {
      "title": "חשבון"
    },
    "general": {
      "title": "כללי"
    },
    "dailyGoals": {
      "title": "יעדים יומיים"
    },
    "goals": {
      "estimateButton": "הערכת יעדים"
    },
    "cacheManagement": {
      "title": "ניהול מטמון"
    },
    "statistics": {
      "title": "סטטיסטיקה"
    },
    "dataManagement": {
      "title": "ניהול נתונים"
    },
    "language": {
      "title": "שפה",
      "system": "ברירת מחדל של המערכת",
      "english": "אנגלית",
      "russian": "רוסית",
      "hebrew": "עברית",
      "restartMessage": "השפה שונתה. הפעל מחדש את האפליקציה להשפעה מלאה."
    }
  },
  "accountSettings": {
    "coinBalance": "מאזן מטבעות",
    "addTestCoins": "הוסף 10 מטבעות (בדיקה)",
    "testButtonWarning": "הערה: כפתור \"הוסף מטבעות\" מיועד לבדיקה/פיתוח בלבד ויש להסירו או לאבטחו בגרסאות ייצור.",
    "notApplicable": "לא זמין",
    "errorLoadCoins": "לא ניתן היה לטעון את מאזן המטבעות",
    "errorAddCoins": "נכשל בהוספת מטבעות",
    "coinsAdded": "מטבעות נוספו!"
  },
  "themeSwitch": {
    "darkMode": "מצב כהה"
  },
  "dailyGoalsInput": {
    "caloriesGoal": "יעד קלוריות",
    "proteinGoal": "יעד חלבון",
    "carbsGoal": "יעד פחמימות",
    "fatGoal": "יעד שומן"
  },
  "dataManagement": {
    "exportData": "ייצוא נתונים",
    "importData": "ייבוא נתונים",
    "clearAllData": "נקה את כל הנתונים",
    "exportError": "שגיאת שיתוף",
    "exportErrorNoSharing": "שיתוף אינו זמין בפלטפורמה שלך.",
    "exportFailed": "הייצוא נכשל",
    "exportFailedMessage": "אירעה שגיאה בעת ייצוא נתונים.",
    "importCancelled": "הייבוא בוטל על ידי המשתמש.",
    "importInvalidFileType": "סוג קובץ לא חוקי",
    "importInvalidFileTypeMessage": "אנא בחר קובץ '.json' חוקי.",
    "importFileTooLarge": "הקובץ גדול מדי",
    "importFileTooLargeMessage": "הקובץ שנבחר גדול מדי (מקסימום 10MB).",
    "importFailed": "הייבוא נכשל",
    "importFailedInvalidStructure": "לקובץ המיובא יש מבנה לא חוקי או שחסרים בו נתונים נדרשים (dailyEntries, foods, settings).",
    "importFailedParseError": "הקובץ המיובא אינו JSON חוקי או שתוכנו פגום.",
    "importFailedAccessError": "לא ניתן היה לגשת לקובץ שנבחר.",
    "importFailedPermissionError": "נדרשות הרשאות אחסון לייבוא קבצים.",
    "importFailedUnknownError": "אירעה שגיאה לא ידועה במהלך הייבוא.",
    "importSuccessful": "הייבוא הושלם בהצלחה",
    "importSuccessfulMessage": "הנתונים יובאו ונשמרו בהצלחה.",
    "clearDataSuccess": "הנתונים נוקו",
    "clearDataSuccessMessage": "כל נתוני היישום נוקו בהצלחה.",
    "clearDataFailed": "ניקוי הנתונים נכשל",
    "clearDataFailedMessage": "ניקוי הנתונים נכשל.",
    "confirmClearTitle": "אשר ניקוי כל הנתונים",
    "confirmClearMessage": "פעולה זו אינה הפיכה ותמחק את כל הרשומות, המאכלים וההגדרות.\n\nהזן \"CLEAR DATA\" כדי להמשיך.",
    "confirmClearInputPlaceholder": "הזן \"CLEAR DATA\"",
    "clearConfirmationFailed": "האישור נכשל",
    "clearConfirmationFailedMessage": "הוזן טקסט אישור שגוי. הנתונים לא נוקו.",
    "dataReloaded": "הנתונים נטענו מחדש."
  },
  "confirmationModal": {
    "confirm": "אשר",
    "cancel": "ביטול",
    "defaultTitle": "אשר פעולה",
    "defaultMessage": "האם אתה בטוח שברצונך לבצע פעולה זו?",
    "enterTextPlaceholder": "הזן טקסט אישור",
    "restartRequiredTitle": "נדרשת הפעלה מחדש"
  },
  "dailyEntryScreen": {
    "tabTitle": "יומן יומי",
    "todaysEntries": "רשומות להיום",
    "saving": "שומר...",
    "loadingEntries": "טוען רשומות...",
    "noEntries": "אין רשומות מתועדות ליום זה.",
    "noEntriesHint": "הקש '+' כדי להוסיף את הארוחה הראשונה שלך.",
    "entryAdded": "רשומה נוספה",
    "entryUpdated": "רשומה עודכנה",
    "itemRemoved": "%{itemName} הוסר",
    "undo": "הקש כאן לביטול",
    "entryRestored": "הרשומה שוחזרה!",
    "itemsAdded": "%{count} פריט(ים) נוספו",
    "toDateFormat": "לתאריך %{date}",
    "errorLoad": "שגיאת טעינה",
    "errorLoadMessage": "טעינת הנתונים הדרושים נכשלה.",
    "errorSave": "שגיאת שמירה",
    "errorSaveMessage": "לא ניתן לשמור שינויים. אנא נסה שוב.",
    "errorInvalidDate": "תאריך לא חוקי",
    "errorInvalidDateMessage": "התאריך שנבחר אינו חוקי.",
    "errorEditEntry": "שגיאת עריכה",
    "errorEditEntryMessage": "שגיאה בהכנת רשומה לעריכה.",
    "errorAddMultiple": "שגיאה בהוספה מרובה",
    "errorAddMultipleMessage": "נכשל בהוספת מספר פריטים.",
    "invalidEntryData": "נתוני רשומה לא חוקיים",
    "edit": "ערוך",
    "delete": "מחק"
  },
  "foodListScreen": {
    "tabTitle": "מאכלים",
    "searchPlaceholder": "חפש בספריית המאכלים שלך...",
    "loadingFoods": "טוען מאכלים...",
    "emptyLibrary": "ספריית המאכלים שלך ריקה.",
    "emptyLibraryHint": "הקש '+' כדי להוסיף את פריט המזון הראשון שלך!",
    "noResults": "לא נמצאו מאכלים התואמים ל-\"%{searchTerm}\"",
    "errorLoad": "שגיאה",
    "errorLoadMessage": "טעינת רשימת המאכלים נכשלה.",
    "foodAdded": "%{foodName} נוסף",
    "foodUpdated": "%{foodName} עודכן",
    "foodDeleted": "%{foodName} נמחק",
    "foodRestored": "%{foodName} שוחזר",
    "errorCreate": "שגיאה",
    "errorCreateMessage": "יצירת המאכל נכשלה.",
    "errorUpdate": "שגיאה",
    "errorUpdateMessage": "עדכון המאכל נכשל.",
    "errorDelete": "שגיאת מחיקה",
    "errorDeleteMessage": "מחיקת המאכל מהאחסון נכשלה. הפריט שוחזר.",
    "fixErrors": "אנא תקן שגיאות",
    "edit": "ערוך",
    "delete": "מחק"
  },
  "addEntryModal": {
    "titleAdd": "הוסף רשומה",
    "titleEdit": "ערוך רשומה",
    "titleQuickAddSelect": "בחר פריטים להוספה",
    "titleQuickAddEdit": "ערוך פריט",
    "titleQuickAddAnalyzing": "מנתח...",
    "searchPlaceholder": "חפש מאכלים...",
    "recent": "אחרונים",
    "noResults": "לא נמצאו מאכלים התואמים ל-\"%{searchTerm}\".",
    "noQuickAddResults": "לא נמצאו פריטי מזון בתמונה.",
    "amount": "כמות",
    "grams": "גרם",
    "autoAi": "אוטומטי (AI)",
    "quickAddServing": "הוספה מהירה:",
    "lastUsedServing": "אחרון: %{grams}ג",
    "gramsPlaceholder": "הזן גרמים (למשל, 150)",
    "gramsPlaceholderEdit": "עדכן גרמים",
    "gramsError": "הזן מספר חוקי",
    "autoPlaceholder": "תאר כמות (למשל, 1 כוס מבושל)",
    "buttonAdd": "הוסף",
    "buttonUpdate": "עדכן",
    "buttonBack": "חזור",
    "buttonAddSelected": "הוסף %{count}",
    "buttonLoading": "טוען...",
    "quickAddHeader": "בחר פריטים מהתמונה",
    "quickAddHeaderEdit": "עריכת פרטי פריט",
    "alertInputMissing": "קלט חסר",
    "alertInputMissingMessage": "אנא בחר מאכל והזן תיאור כמות.",
    "alertGramsEstimated": "גרמים הוערכו",
    "alertGramsEstimatedMessage": "הוערכו %{grams} גרם עבור %{foodName}",
    "alertFoodNotSelected": "מאכל לא נבחר",
    "alertFoodNotSelectedMessage": "אנא בחר פריט מזון.",
    "alertInvalidAmount": "כמות לא חוקית",
    "alertInvalidAmountMessage": "אנא הזן מספר חיובי חוקי עבור גרמים.",
    "alertQuickAddPermission": "נדרשת הרשאה",
    "alertQuickAddCameraPermission": "נדרשת גישה למצלמה.",
    "alertQuickAddGalleryPermission": "נדרשת גישה לגלריה.",
    "alertQuickAddUserCancelled": "בוטל על ידי המשתמש",
    "alertQuickAddCouldNotSelect": "לא ניתן לבחור תמונה.",
    "alertQuickAddError": "שגיאה",
    "alertQuickAddErrorMessage": "אירעה שגיאה בלתי צפויה.",
    "alertQuickAddFinishEditing": "סיים עריכה",
    "alertQuickAddFinishEditingSaveOrCancel": "אנא שמור או בטל את העריכה הנוכחית תחילה.",
    "alertQuickAddFromImageTitle": "הוספה מהירה מתמונה",
    "alertQuickAddFromImageMessage": "זהה מספר מאכלים מתמונה.",
    "alertQuickAddInvalidName": "שם לא חוקי",
    "alertQuickAddInvalidNameMessage": "שם המאכל אינו יכול להיות ריק.",
    "alertQuickAddInvalidGrams": "גרמים לא חוקיים",
    "alertQuickAddInvalidGramsMessage": "אנא הזן מספר חיובי חוקי.",
    "alertQuickAddNoItemsSelected": "לא נבחרו פריטים",
    "alertQuickAddNoItemsSelectedMessage": "בחר פריטים להוספה.",
    "alertQuickAddNothingToAdd": "אין מה להוסיף",
    "alertQuickAddNothingToAddMessage": "לא נבחרו או הוכנו פריטים חוקיים.",
    "alertQuickAddErrorPreparing": "שגיאה",
    "alertQuickAddErrorPreparingMessage": "לא ניתן היה להכין פריטים להוספה.",
    "camera": "מצלמה",
    "gallery": "גלריה",
    "cancel": "ביטול",
    "addNewFoodButton": "הוסף מאכל חדש",
    "alertOverwriteFoodTitle": "מאכל קיים",
    "alertOverwriteFoodMessage": "מאכל בשם \"%{foodName}\" כבר קיים. האם להחליף עם הנתונים החדשים?",
    "overwrite": "החלף",
    "toastFoodSavedToLibrary": "\"%{foodName}\" נשמר לספרייה.",
    "toastFoodUpdatedInLibrary": "\"%{foodName}\" עודכן בספרייה.",
    "toastErrorSavingToLibrary": "שגיאה בשמירת המאכל לספרייה."
  },
  "addFoodModal": {
    "titleAdd": "הוסף מאכל חדש",
    "titleEdit": "ערוך מאכל",
    "buttonAdd": "הוסף",
    "buttonUpdate": "עדכן",
    "getFromImage": "קבל מתמונה",
    "ingredientsOptional": "רכיבים (אופציונלי)",
    "ingredientsPlaceholder": "למשל\n100ג חזה עוף\n50ג אורז\n1 כף שמן זית",
    "backToManual": "חזרה להזנה ידנית",
    "aiCalculateRecipe": "חשב עם AI (מתכון/טקסט)",
    "aiGetFromIngredients": "קבל מאקרואים מרכיבים",
    "aiGetFromNameOnly": "קבל מאקרואים משם בלבד",
    "barcodeComingSoon": "הזנת ברקוד (בקרוב)",
    "alertInputNeeded": "נדרש קלט",
    "alertInputNeededMessage": "אנא הזן שם מאכל או רכיבים לניתוח.",
    "macrosEstimatedText": "מאקרואים הוערכו מטקסט.",
    "foodIdentified": "מאכל זוהה!",
    "foodIdentifiedMessage": "זוהה כ-%{foodName}. מאקרואים הוערכו.",
    "errorGetImage": "קבל תמונה",
    "errorGetImageMessage": "בחר מקור לתמונת המאכל:",
    "errorCamera": "שגיאת מצלמה",
    "errorGallery": "שגיאת גלריה",
    "errorPermission": "נדרשת הרשאה",
    "errorCameraPermission": "נדרשת גישה למצלמה."
  },
  "foodFormFields": {
    "foodName": "שם המאכל",
    "calories": "קלוריות (ל-100 גרם)",
    "protein": "חלבון (ל-100 גרם)",
    "carbs": "פחמימות (ל-100 גרם)",
    "fat": "שומן (ל-100 גרם)",
    "errorNameRequired": "שם הוא שדה חובה",
    "errorNonNegative": "חייב להיות מספר אי-שלילי"
  },
  "quickAddList": {
    "foodNamePlaceholder": "שם המאכל",
    "gramsPlaceholder": "גרמים",
    "errorInvalidGrams": "לא חוקי",
    "analyzing": "מנתח...",
    "emptyMessage": "לא נמצאו מאכלים הניתנים לזיהוי בתמונה.",
    "emptyHint": "נסה תמונה אחרת או הוסף ידנית."
  },
  "dailyProgress": {
    "calories": "קלוריות",
    "protein": "חלבון",
    "carbs": "פחמימות",
    "fat": "שומן"
  },
  "dateNavigator": {
    "invalidDate": "תאריך לא חוקי"
  },
  "settings": {
    "refreshIcons": "רענן סמלי מאכל",
    "iconsCacheCleared": "מטמון הסמלים נוקה",
    "iconsCacheClearedMessage": "הסמלים יתרעננו.",
    "errorClearCache": "ניקוי המטמון נכשל",
    "errorClearCacheMessage": "שגיאה לא ידועה."
  },
  "utils": {
    "macros": {
      "alertAiErrorRecipe": "שגיאת AI (מתכון)",
      "alertAnalysisFailedSingle": "ניתוח נכשל (פריט יחיד)",
      "alertQuickAddFailedMulti": "הוספה מהירה נכשלה (מספר פריטים)",
      "alertImageReadError": "שגיאת קריאת תמונה",
      "alertImageReadErrorMessage": "קריאת קובץ התמונה נכשלה.",
      "errorGetMacrosRecipe": "קבלת מאקרואים למתכון נכשלה: %{error}",
      "errorImageAnalysis": "ניתוח התמונה נכשל: %{error}",
      "errorCouldNotAnalyze": "לא ניתן היה לנתח את התמונה: %{error}",
      "errorInvalidResponseMultiple": "פורמט תגובה לא חוקי מהשרת עבור מספר פריטים."
    },
    "units": {
      "alertAiEstimationFailed": "הערכת AI נכשלה",
      "errorCouldNotEstimateGrams": "לא ניתן היה להעריך גרמים: %{error}"
    },
    "image": {
      "alertCompressionError": "שגיאת דחיסה",
      "alertCompressionErrorMessage": "לא ניתן היה לעבד את התמונה לדחיסה.",
      "errorFailedToRead": "קריאת קובץ התמונה נכשלה: %{error}"
    }
  },
  "backendService": {
    "errorInvalidClientId": "פורמט מזהה לקוח לא חוקי.",
    "errorRequestFailedParse": "בקשה לשרת נכשלה (סטטוס %{status}), פענוח התגובה נכשל.",
    "errorRequestFailedDetailFormat": "שגיאת שרת (סטטוס %{status}), פורמט פרטים לא צפוי.",
    "errorRequestFailedWithServerMsg": "בקשה לשרת נכשלה (סטטוס %{status}). תגובת השרת: %{response}",
    "errorAuthFailed": "האימות נכשל. מזהה לקוח לא חוקי.",
    "errorPermissionDenied": "הגישה נדחתה.",
    "errorNotFound": "המשאב לא נמצא.",
    "errorTooManyRequests": "יותר מדי בקשות. אנא נסה שוב מאוחר יותר.",
    "errorInsufficientCoins": "אין מספיק מטבעות לפעולה זו.",
    "errorNetwork": "התקשורת עם השרת נכשלה.",
    "errorNetworkTimeout": "זמן הבקשה פג. אנא נסה שוב.",
    "errorNetworkConnection": " אנא בדוק את חיבור הרשת שלך.",
    "errorNetworkDetails": " פרטים: %{error}",
    "errorNetworkUnknown": " אירעה שגיאת רשת לא ידועה.",
    "errorEstimateGramsUnexpectedResponse": "קבלת הערכת גרמים נכשלה עקב פורמט תגובה לא צפוי.",
    "errorAddCoinsPositive": "הסכום להוספה חייב להיות חיובי."
  },
  "statisticsChart": {
    "intake": "צריכה",
    "goal": "יעד",
    "noData": "אין נתונים זמינים להצגת תרשים עבור %{chartTitle}."
  },
  "questionnaireScreen": {
    "title": "הערכת היעדים שלך",
    "ageLabel": "גיל (שנים)",
    "agePlaceholder": "לדוגמה, 30",
    "sexLabel": "מין",
    "sex": {
      "select": "בחר מין...",
      "male": "זכר",
      "female": "נקבה"
    },
    "heightLabel": "גובה",
    "heightPlaceholder": "לדוגמה, 175",
    "weightLabel": "משקל",
    "weightPlaceholder": "לדוגמה, 70",
    "activityLevelLabel": "רמת פעילות",
    "activityLevel": {
      "select": "בחר רמת פעילות...",
      "sedentary": "יושבני (מעט או ללא פעילות גופנית)",
      "light": "קל (פעילות 1-3 ימים בשבוע)",
      "moderate": "בינוני (פעילות 3-5 ימים בשבוע)",
      "active": "פעיל (פעילות 6-7 ימים בשבוע)",
      "veryActive": "פעיל מאוד (פעילות מאומצת או עבודה פיזית)"
    },
    "primaryGoalLabel": "מטרה עיקרית",
    "primaryGoal": {
      "select": "בחר מטרה עיקרית...",
      "loseWeight": "ירידה במשקל",
      "maintainWeight": "שמירה על המשקל",
      "gainMuscle": "עלייה במסת שריר"
    },
    "goalIntensityLabel": "עצימות המטרה",
    "goalIntensity": {
      "select": "בחר עצימות...",
      "mild": "מתונה",
      "moderate": "בינונית",
      "aggressive": "אגרסיבית"
    },
    "calculateButton": "חשב ושמור יעדים",
    "validation": {
      "invalidAge": "הזן גיל תקין (1-120).",
      "selectSex": "אנא בחר את מינך.",
      "invalidHeight": "הזן גובה תקין (50-250 ס\"מ).",
      "invalidWeight": "הזן משקל תקין (20-300 ק\"ג).",
      "selectActivityLevel": "אנא בחר את רמת הפעילות שלך.",
      "selectPrimaryGoal": "אנא בחר את המטרה העיקרית שלך.",
      "selectGoalIntensity": "אנא בחר את עצימות המטרה שלך.",
      "fixErrors": "אנא תקן את השגיאות למעלה."
    },
    "error": {
      "calculationFailedTitle": "שגיאת חישוב",
      "calculationFailedMessage": "לא ניתן היה לחשב את היעדים. אנא בדוק את הקלט שלך.",
      "genericSaveTitle": "שגיאת שמירה",
      "genericSaveMessage": "לא ניתן היה לשמור את היעדים המוערכים. אנא נסה שוב."
    },
    "toast": {
      "goalsCalculated": "היעדים חושבו ונשמרו!",
      "minCaloriesAdjustedTitle": "הקלוריות עודכנו",
      "minCaloriesAdjustedMessage": "יעד הקלוריות שלך עודכן למינימום של %{calories} קק\"ל."
    }
  }
}

---------- END he.json ----------


---------- ru.json ----------
{
  "app": {
    "initializing": "Инициализация...",
    "name": "MacrosVisionAI",
    "alertButtons": {
      "later": "Позже",
      "restartNow": "Перезапустить сейчас"
    }
  },
  "settingsScreen": {
    "title": "Настройки",
    "account": {
      "title": "Аккаунт"
    },
    "general": {
      "title": "Общие"
    },
    "dailyGoals": {
      "title": "Дневные цели"
    },
    "goals": {
      "estimateButton": "Рассчитать цели"
    },
    "cacheManagement": {
      "title": "Управление кэшем"
    },
    "statistics": {
      "title": "Статистика"
    },
    "dataManagement": {
      "title": "Управление данными"
    },
    "language": {
      "title": "Язык",
      "system": "Системный",
      "english": "Английский",
      "russian": "Русский",
      "hebrew": "Иврит",
      "restartMessage": "Язык изменен. Перезапустите приложение для полного эффекта."
    }
  },
  "accountSettings": {
    "coinBalance": "Баланс монет",
    "addTestCoins": "Добавить 10 монет (Тест)",
    "testButtonWarning": "Примечание: Кнопка \"Добавить монеты\" предназначена только для тестирования/разработки и должна быть удалена или защищена в релизных версиях.",
    "notApplicable": "Н/Д",
    "errorLoadCoins": "Не удалось загрузить баланс монет",
    "errorAddCoins": "Не удалось добавить монеты",
    "coinsAdded": "Монеты добавлены!"
  },
  "themeSwitch": {
    "darkMode": "Темный режим"
  },
  "dailyGoalsInput": {
    "caloriesGoal": "Цель калорий",
    "proteinGoal": "Цель белков",
    "carbsGoal": "Цель углеводов",
    "fatGoal": "Цель жиров"
  },
  "dataManagement": {
    "exportData": "Экспорт данных",
    "importData": "Импорт данных",
    "clearAllData": "Очистить все данные",
    "exportError": "Ошибка экспорта",
    "exportErrorNoSharing": "Экспорт недоступен на вашей платформе.",
    "exportFailed": "Экспорт не удался",
    "exportFailedMessage": "Произошла ошибка при экспорте данных.",
    "importCancelled": "Импорт отменен пользователем.",
    "importInvalidFileType": "Неверный тип файла",
    "importInvalidFileTypeMessage": "Пожалуйста, выберите действительный файл '.json'.",
    "importFileTooLarge": "Файл слишком большой",
    "importFileTooLargeMessage": "Выбранный файл слишком большой (макс. 10 МБ).",
    "importFailed": "Импорт не удался",
    "importFailedInvalidStructure": "Импортированный файл имеет неверную структуру или отсутствуют необходимые данные (dailyEntries, foods, settings).",
    "importFailedParseError": "Импортированный файл не является действительным JSON или имеет поврежденное содержимое.",
    "importFailedAccessError": "Не удалось получить доступ к выбранному файлу.",
    "importFailedPermissionError": "Для импорта файлов требуются разрешения на доступ к хранилищу.",
    "importFailedUnknownError": "Во время импорта произошла неизвестная ошибка.",
    "importSuccessful": "Импорт успешен",
    "importSuccessfulMessage": "Данные успешно импортированы и сохранены.",
    "clearDataSuccess": "Данные очищены",
    "clearDataSuccessMessage": "Все данные приложения были успешно очищены.",
    "clearDataFailed": "Не удалось очистить данные",
    "clearDataFailedMessage": "Не удалось очистить данные.",
    "confirmClearTitle": "Подтвердить очистку всех данных",
    "confirmClearMessage": "Это действие необратимо и удалит все записи, продукты и настройки.\n\nВведите \"CLEAR DATA\" для продолжения.",
    "confirmClearInputPlaceholder": "Введите \"CLEAR DATA\"",
    "clearConfirmationFailed": "Подтверждение не удалось",
    "clearConfirmationFailedMessage": "Введен неверный текст подтверждения. Данные не были очищены.",
    "dataReloaded": "Данные перезагружены."
  },
  "confirmationModal": {
    "confirm": "Подтвердить",
    "cancel": "Отмена",
    "defaultTitle": "Подтвердите действие",
    "defaultMessage": "Вы уверены, что хотите выполнить это действие?",
    "enterTextPlaceholder": "Введите текст подтверждения",
    "restartRequiredTitle": "Требуется перезапуск"
  },
  "dailyEntryScreen": {
    "tabTitle": "Дневник",
    "todaysEntries": "Записи за сегодня",
    "saving": "Сохранение...",
    "loadingEntries": "Загрузка записей...",
    "noEntries": "Записей за этот день нет.",
    "noEntriesHint": "Нажмите '+', чтобы добавить первую запись о еде.",
    "entryAdded": "Запись добавлена",
    "entryUpdated": "Запись обновлена",
    "itemRemoved": "%{itemName} удалено",
    "undo": "Нажмите, чтобы отменить",
    "entryRestored": "Запись восстановлена!",
    "itemsAdded": "%{count} элемент(ов) добавлено",
    "toDateFormat": "к %{date}",
    "errorLoad": "Ошибка загрузки",
    "errorLoadMessage": "Не удалось загрузить необходимые данные.",
    "errorSave": "Ошибка сохранения",
    "errorSaveMessage": "Не удалось сохранить изменения. Пожалуйста, попробуйте еще раз.",
    "errorInvalidDate": "Неверная дата",
    "errorInvalidDateMessage": "Выбранная дата недействительна.",
    "errorEditEntry": "Ошибка редактирования",
    "errorEditEntryMessage": "Ошибка подготовки записи к редактированию.",
    "errorAddMultiple": "Ошибка добавления нескольких",
    "errorAddMultipleMessage": "Не удалось добавить несколько элементов.",
    "invalidEntryData": "Неверные данные записи",
    "edit": "Изменить",
    "delete": "Удалить"
  },
  "foodListScreen": {
    "tabTitle": "Продукты",
    "searchPlaceholder": "Поиск в вашей библиотеке продуктов...",
    "loadingFoods": "Загрузка продуктов...",
    "emptyLibrary": "Ваша библиотека продуктов пуста.",
    "emptyLibraryHint": "Нажмите '+', чтобы добавить первый продукт!",
    "noResults": "Продукты, соответствующие \"%{searchTerm}\", не найдены",
    "errorLoad": "Ошибка",
    "errorLoadMessage": "Не удалось загрузить список продуктов.",
    "foodAdded": "%{foodName} добавлено",
    "foodUpdated": "%{foodName} обновлено",
    "foodDeleted": "%{foodName} удалено",
    "foodRestored": "%{foodName} восстановлено",
    "errorCreate": "Ошибка",
    "errorCreateMessage": "Не удалось создать продукт.",
    "errorUpdate": "Ошибка",
    "errorUpdateMessage": "Не удалось обновить продукт.",
    "errorDelete": "Ошибка удаления",
    "errorDeleteMessage": "Не удалось удалить продукт из хранилища. Элемент восстановлен.",
    "fixErrors": "Пожалуйста, исправьте ошибки",
    "edit": "Изменить",
    "delete": "Удалить"
  },
  "addEntryModal": {
    "titleAdd": "Добавить запись",
    "titleEdit": "Изменить запись",
    "titleQuickAddSelect": "Выберите элементы для добавления",
    "titleQuickAddEdit": "Изменить элемент",
    "titleQuickAddAnalyzing": "Анализ...",
    "searchPlaceholder": "Поиск продуктов...",
    "recent": "Недавние",
    "noResults": "Продукты, соответствующие \"%{searchTerm}\", не найдены.",
    "noQuickAddResults": "На изображении не найдено пищевых продуктов.",
    "amount": "Количество",
    "grams": "Граммы",
    "autoAi": "Авто (ИИ)",
    "quickAddServing": "Быстрое добавление:",
    "lastUsedServing": "Пред.: %{grams}г",
    "gramsPlaceholder": "Введите граммы (например, 150)",
    "gramsPlaceholderEdit": "Обновить граммы",
    "gramsError": "Введите действительное число",
    "autoPlaceholder": "Опишите количество (например, 1 чашка приготовленного)",
    "buttonAdd": "Добавить",
    "buttonUpdate": "Обновить",
    "buttonBack": "Назад",
    "buttonAddSelected": "Добавить %{count}",
    "buttonLoading": "Загрузка...",
    "quickAddHeader": "Выберите элементы с изображения",
    "quickAddHeaderEdit": "Редактирование сведений об элементе",
    "alertInputMissing": "Отсутствует ввод",
    "alertInputMissingMessage": "Пожалуйста, выберите продукт и введите описание количества.",
    "alertGramsEstimated": "Граммы оценены",
    "alertGramsEstimatedMessage": "Оценено %{grams}г для %{foodName}",
    "alertFoodNotSelected": "Продукт не выбран",
    "alertFoodNotSelectedMessage": "Пожалуйста, выберите продукт.",
    "alertInvalidAmount": "Неверное количество",
    "alertInvalidAmountMessage": "Пожалуйста, введите действительное положительное число для граммов.",
    "alertQuickAddPermission": "Требуется разрешение",
    "alertQuickAddCameraPermission": "Необходим доступ к камере.",
    "alertQuickAddGalleryPermission": "Необходим доступ к галерее.",
    "alertQuickAddUserCancelled": "Отменено пользователем",
    "alertQuickAddCouldNotSelect": "Не удалось выбрать изображение.",
    "alertQuickAddError": "Ошибка",
    "alertQuickAddErrorMessage": "Произошла непредвиденная ошибка.",
    "alertQuickAddFinishEditing": "Завершите редактирование",
    "alertQuickAddFinishEditingSaveOrCancel": "Пожалуйста, сначала сохраните или отмените текущее редактирование.",
    "alertQuickAddFromImageTitle": "Быстрое добавление с изображения",
    "alertQuickAddFromImageMessage": "Определите несколько продуктов с изображения.",
    "alertQuickAddInvalidName": "Неверное имя",
    "alertQuickAddInvalidNameMessage": "Название продукта не может быть пустым.",
    "alertQuickAddInvalidGrams": "Неверные граммы",
    "alertQuickAddInvalidGramsMessage": "Пожалуйста, введите действительное положительное число.",
    "alertQuickAddNoItemsSelected": "Элементы не выбраны",
    "alertQuickAddNoItemsSelectedMessage": "Выберите элементы для добавления.",
    "alertQuickAddNothingToAdd": "Нечего добавлять",
    "alertQuickAddNothingToAddMessage": "Не выбрано или не подготовлено ни одного действительного элемента.",
    "alertQuickAddErrorPreparing": "Ошибка",
    "alertQuickAddErrorPreparingMessage": "Не удалось подготовить элементы для добавления.",
    "camera": "Камера",
    "gallery": "Галерея",
    "cancel": "Отмена",
    "addNewFoodButton": "Добавить новый продукт",
    "alertOverwriteFoodTitle": "Продукт существует",
    "alertOverwriteFoodMessage": "Продукт с названием \"%{foodName}\" уже существует. Перезаписать новыми данными?",
    "overwrite": "Перезаписать",
    "toastFoodSavedToLibrary": "\"%{foodName}\" сохранено в библиотеку.",
    "toastFoodUpdatedInLibrary": "\"%{foodName}\" обновлено в библиотеке.",
    "toastErrorSavingToLibrary": "Ошибка сохранения продукта в библиотеку."
  },
  "addFoodModal": {
    "titleAdd": "Добавить новый продукт",
    "titleEdit": "Изменить продукт",
    "buttonAdd": "Добавить",
    "buttonUpdate": "Обновить",
    "getFromImage": "Получить с изображения",
    "ingredientsOptional": "Ингредиенты (необязательно)",
    "ingredientsPlaceholder": "например\n100г куриной грудки\n50г риса\n1 ст.л. оливкового масла",
    "backToManual": "Назад к ручному вводу",
    "aiCalculateRecipe": "Рассчитать с помощью ИИ (Рецепт/Текст)",
    "aiGetFromIngredients": "Получить макросы из ингредиентов",
    "aiGetFromNameOnly": "Получить макросы только по названию",
    "barcodeComingSoon": "Ввод штрих-кода (скоро)",
    "alertInputNeeded": "Требуется ввод",
    "alertInputNeededMessage": "Пожалуйста, введите название продукта или ингредиенты для анализа.",
    "macrosEstimatedText": "Макросы оценены по тексту.",
    "foodIdentified": "Продукт определен!",
    "foodIdentifiedMessage": "Определено как %{foodName}. Макросы оценены.",
    "errorGetImage": "Получить изображение",
    "errorGetImageMessage": "Выберите источник изображения продукта:",
    "errorCamera": "Ошибка камеры",
    "errorGallery": "Ошибка галереи",
    "errorPermission": "Требуется разрешение",
    "errorCameraPermission": "Необходим доступ к камере."
  },
  "foodFormFields": {
    "foodName": "Название продукта",
    "calories": "Калории (на 100г)",
    "protein": "Белки (на 100г)",
    "carbs": "Углеводы (на 100г)",
    "fat": "Жиры (на 100г)",
    "errorNameRequired": "Название обязательно",
    "errorNonNegative": "Должно быть неотрицательным числом"
  },
  "quickAddList": {
    "foodNamePlaceholder": "Название продукта",
    "gramsPlaceholder": "Граммы",
    "errorInvalidGrams": "Неверно",
    "analyzing": "Анализ...",
    "emptyMessage": "На изображении не найдено опознаваемых продуктов.",
    "emptyHint": "Попробуйте другое изображение или добавьте вручную."
  },
  "dailyProgress": {
    "calories": "Калории",
    "protein": "Белки",
    "carbs": "Углеводы",
    "fat": "Жиры"
  },
  "dateNavigator": {
    "invalidDate": "Неверная дата"
  },
  "settings": {
    "refreshIcons": "Обновить иконки продуктов",
    "iconsCacheCleared": "Кэш иконок очищен",
    "iconsCacheClearedMessage": "Иконки будут обновлены.",
    "errorClearCache": "Не удалось очистить кэш",
    "errorClearCacheMessage": "Неизвестная ошибка."
  },
  "utils": {
    "macros": {
      "alertAiErrorRecipe": "Ошибка ИИ (Рецепт)",
      "alertAnalysisFailedSingle": "Ошибка анализа (Один элемент)",
      "alertQuickAddFailedMulti": "Ошибка быстрого добавления (Несколько элементов)",
      "alertImageReadError": "Ошибка чтения изображения",
      "alertImageReadErrorMessage": "Не удалось прочитать файл изображения.",
      "errorGetMacrosRecipe": "Не удалось получить макросы для рецепта: %{error}",
      "errorImageAnalysis": "Ошибка анализа изображения: %{error}",
      "errorCouldNotAnalyze": "Не удалось проанализировать изображение: %{error}",
      "errorInvalidResponseMultiple": "Неверный формат ответа от сервера для нескольких элементов."
    },
    "units": {
      "alertAiEstimationFailed": "Ошибка оценки ИИ",
      "errorCouldNotEstimateGrams": "Не удалось оценить граммы: %{error}"
    },
    "image": {
      "alertCompressionError": "Ошибка сжатия",
      "alertCompressionErrorMessage": "Не удалось обработать изображение для сжатия.",
      "errorFailedToRead": "Не удалось прочитать файл изображения: %{error}"
    }
  },
  "backendService": {
    "errorInvalidClientId": "Неверный формат идентификатора клиента.",
    "errorRequestFailedParse": "Запрос к бэкенду не удался (Статус %{status}), не удалось разобрать ответ.",
    "errorRequestFailedDetailFormat": "Ошибка бэкенда (Статус %{status}), неожиданный формат деталей.",
    "errorRequestFailedWithServerMsg": "Запрос к бэкенду не удался (Статус %{status}). Ответ сервера: %{response}",
    "errorAuthFailed": "Аутентификация не удалась. Неверный идентификатор клиента.",
    "errorPermissionDenied": "Доступ запрещен.",
    "errorNotFound": "Ресурс не найден.",
    "errorTooManyRequests": "Слишком много запросов. Пожалуйста, повторите попытку позже.",
    "errorInsufficientCoins": "Недостаточно монет для этого действия.",
    "errorNetwork": "Не удалось связаться с бэкендом.",
    "errorNetworkTimeout": "Время ожидания запроса истекло. Пожалуйста, попробуйте еще раз.",
    "errorNetworkConnection": " Пожалуйста, проверьте ваше сетевое соединение.",
    "errorNetworkDetails": " Детали: %{error}",
    "errorNetworkUnknown": " Произошла неизвестная сетевая ошибка.",
    "errorEstimateGramsUnexpectedResponse": "Не удалось получить оценку граммов из-за неожиданного формата ответа.",
    "errorAddCoinsPositive": "Сумма для добавления должна быть положительной."
  },
  "statisticsChart": {
    "intake": "Потребление",
    "goal": "Цель",
    "noData": "Нет данных для отображения графика для %{chartTitle}."
  },
  "questionnaireScreen": {
    "title": "Оценка ваших целей",
    "ageLabel": "Возраст (лет)",
    "agePlaceholder": "например, 30",
    "sexLabel": "Пол",
    "sex": {
      "select": "Выберите пол...",
      "male": "Мужской",
      "female": "Женский"
    },
    "heightLabel": "Рост",
    "heightPlaceholder": "например, 175",
    "weightLabel": "Вес",
    "weightPlaceholder": "например, 70",
    "activityLevelLabel": "Уровень активности",
    "activityLevel": {
      "select": "Выберите уровень активности...",
      "sedentary": "Сидячий (мало или нет упражнений)",
      "light": "Легкий (упражнения 1-3 раза/нед)",
      "moderate": "Умеренный (упражнения 3-5 раз/нед)",
      "active": "Активный (упражнения 6-7 раз/нед)",
      "veryActive": "Очень активный (тяжелые упражнения или физическая работа)"
    },
    "primaryGoalLabel": "Основная цель",
    "primaryGoal": {
      "select": "Выберите основную цель...",
      "loseWeight": "Сбросить вес",
      "maintainWeight": "Поддерживать вес",
      "gainMuscle": "Набрать мышечную массу"
    },
    "goalIntensityLabel": "Интенсивность цели",
    "goalIntensity": {
      "select": "Выберите интенсивность...",
      "mild": "Легкая",
      "moderate": "Умеренная",
      "aggressive": "Агрессивная"
    },
    "calculateButton": "Рассчитать и сохранить цели",
    "validation": {
      "invalidAge": "Введите действительный возраст (1-120).",
      "selectSex": "Пожалуйста, выберите ваш пол.",
      "invalidHeight": "Введите действительный рост (50-250 см).",
      "invalidWeight": "Введите действительный вес (20-300 кг).",
      "selectActivityLevel": "Пожалуйста, выберите ваш уровень активности.",
      "selectPrimaryGoal": "Пожалуйста, выберите вашу основную цель.",
      "selectGoalIntensity": "Пожалуйста, выберите интенсивность цели.",
      "fixErrors": "Пожалуйста, исправьте ошибки выше."
    },
    "error": {
      "calculationFailedTitle": "Ошибка расчета",
      "calculationFailedMessage": "Не удалось рассчитать цели. Пожалуйста, проверьте введенные данные.",
      "genericSaveTitle": "Ошибка сохранения",
      "genericSaveMessage": "Не удалось сохранить рассчитанные цели. Пожалуйста, попробуйте еще раз."
    },
    "toast": {
      "goalsCalculated": "Цели рассчитаны и сохранены!",
      "minCaloriesAdjustedTitle": "Калории скорректированы",
      "minCaloriesAdjustedMessage": "Ваша цель по калориям была скорректирована до минимума в %{calories} ккал."
    }
  }
}

---------- END ru.json ----------


---------- AppNavigator.tsx ----------
// src/navigation/AppNavigator.tsx
// navigation/AppNavigator.tsx
import React, { useState, useCallback } from 'react';
import { Platform, I18nManager } from 'react-native';
import { createBottomTabNavigator, BottomTabNavigationProp } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Icon, useTheme } from '@rneui/themed';
import DailyEntryScreen from '../screens/DailyEntryScreen';
import FoodListScreen from '../screens/FoodListScreen';
import SettingsScreen from '../screens/SettingsScreen';
import QuestionnaireScreen from '../screens/QuestionnaireScreen'; // Import new screen
import { LanguageCode, Settings } from '../types/settings';
import i18n, { t } from '../localization/i18n';
import { Food } from '../types/food'; // Import Food type

// Define ParamList for the Tab Navigator
export type MainTabParamList = {
  DailyEntryRoute: { quickAddFood?: Food }; // For DailyEntryScreen, can receive quickAddFood
  FoodListRoute: { openAddFoodModal?: boolean };   // For FoodListScreen
  SettingsStackRoute: undefined;             // For the Settings Stack
};

// Define ParamList for the Settings Stack
export type SettingsStackParamList = {
  SettingsHome: undefined;
  Questionnaire: undefined;
};


const Tab = createBottomTabNavigator<MainTabParamList>();
const SettingsStackNav = createNativeStackNavigator<SettingsStackParamList>();

interface AppNavigatorProps {
  onThemeChange: (theme: 'light' | 'dark' | 'system') => void;
  onLocaleChange: (locale: LanguageCode) => void;
}

// Settings Stack Navigator
function SettingsStackNavigatorComponent({ onThemeChange, onLocaleChange }: AppNavigatorProps) {
  const { theme } = useTheme();
  return (
    <SettingsStackNav.Navigator
      screenOptions={{
        headerStyle: { backgroundColor: theme.colors.background },
        headerTitleStyle: { color: theme.colors.text },
        headerTintColor: theme.colors.primary,
        headerTitleAlign: Platform.OS === 'ios' ? 'center' : 'center',
      }}
    >
      <SettingsStackNav.Screen name="SettingsHome" options={{ title: t('settingsScreen.title') }}>
        {() => <SettingsScreen onThemeChange={onThemeChange} onLocaleChange={onLocaleChange} onDataOperation={() => console.log("Data operation in AppNav")} />}
      </SettingsStackNav.Screen>
      <SettingsStackNav.Screen name="Questionnaire" options={{ title: t('questionnaireScreen.title') }}>
        {() => <QuestionnaireScreen />}
      </SettingsStackNav.Screen>
    </SettingsStackNav.Navigator>
  );
}


const AppNavigator: React.FC<AppNavigatorProps> = ({ onThemeChange, onLocaleChange }) => {
  const { theme } = useTheme();
  const [foodListRefresh, setFoodListRefresh] = useState(false);

  const handleFoodChange = useCallback(() => {
    setFoodListRefresh(prev => !prev);
  }, []);

  // Use static route names for consistency
  const dailyEntryRouteName: keyof MainTabParamList = 'DailyEntryRoute';
  const foodListRouteName: keyof MainTabParamList = 'FoodListRoute';
  const settingsStackRouteName: keyof MainTabParamList = 'SettingsStackRoute';


  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName: string = '';
          let type: string = 'ionicon'; // Default type

          if (route.name === dailyEntryRouteName) {
            iconName = focused ? 'calendar' : 'calendar-outline';
          } else if (route.name === foodListRouteName) {
            iconName = focused ? 'fast-food' : 'fast-food-outline';
          } else if (route.name === settingsStackRouteName) { 
            iconName = focused ? 'settings' : 'settings-outline';
          }
          return <Icon name={iconName} type={type} size={size} color={color} />;
        },
        tabBarActiveTintColor: theme.colors.primary,
        tabBarInactiveTintColor: theme.colors.secondary,
        headerShown: false, 
        tabBarStyle: {
          backgroundColor: theme.colors.background,
          borderTopColor: theme.colors.divider,
        },
        tabBarLabelStyle: {
          fontWeight: 'bold',
        }
      })}
    >
      <Tab.Screen
        name={dailyEntryRouteName}
        options={{ title: t('dailyEntryScreen.tabTitle') }}
      >
        {() => <DailyEntryScreen key={`${foodListRefresh}-${i18n.locale}`} />}
      </Tab.Screen>
      <Tab.Screen
        name={foodListRouteName}
        options={{ title: t('foodListScreen.tabTitle') }}
      >
        {() => <FoodListScreen onFoodChange={handleFoodChange} key={i18n.locale} />}
      </Tab.Screen>
      <Tab.Screen
        name={settingsStackRouteName} 
        options={{ title: t('settingsScreen.title') }} 
      >
        {() => <SettingsStackNavigatorComponent onThemeChange={onThemeChange} onLocaleChange={onLocaleChange} />}
      </Tab.Screen>
    </Tab.Navigator>
  );
};

export default AppNavigator;
---------- END AppNavigator.tsx ----------


---------- DailyEntryScreen.tsx ----------
// src/screens/DailyEntryScreen.tsx
import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { View, FlatList, Alert, Platform, StyleSheet, ActivityIndicator, I18nManager } from "react-native";
import { DailyEntry, DailyEntryItem } from "../types/dailyEntry";
import { Food } from "../types/food";
import { getFoods, createFood, updateFood as updateFoodService } from "../services/foodService";
import { saveDailyEntries, loadDailyEntries, loadSettings } from "../services/storageService";
import { getTodayDateString, formatDateISO, formatDateReadableAsync } from "../utils/dateUtils";
import { isValidNumberInput } from "../utils/validationUtils";
import DailyProgress from "../components/DailyProgress";
import { Text, FAB, makeStyles, useTheme, Divider, Icon as RNEIcon } from "@rneui/themed";
import DateTimePicker, { DateTimePickerEvent } from "@react-native-community/datetimepicker";
import { addDays, subDays, parseISO, formatISO, isValid } from "date-fns";
import { SafeAreaView } from "react-native-safe-area-context";
import AddEntryModal from "../components/AddEntryModal";
import "react-native-get-random-values";
import Toast from "react-native-toast-message";
import { useFocusEffect, useNavigation, useRoute, RouteProp } from "@react-navigation/native";
import { getFoodIconUrl } from "../utils/iconUtils";
import DateNavigator from "../components/DateNavigator";
import DailyEntryListItem from "../components/DailyEntryListItem";
import { t } from '../localization/i18n';
import i18n from '../localization/i18n';
import { Settings as AppSettings } from "../types/settings";
import { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';
import { MainTabParamList } from "../navigation/AppNavigator";

type DailyEntryScreenNavigationProp = BottomTabNavigationProp<MainTabParamList, 'DailyEntryRoute'>;
type DailyEntryScreenRouteProp = RouteProp<MainTabParamList, 'DailyEntryRoute'>;

const DailyEntryScreen: React.FC = () => {
  const [dailyEntries, setDailyEntries] = useState<DailyEntry[]>([]);
  const [selectedDate, setSelectedDate] = useState<string>(getTodayDateString());
  const [foods, setFoods] = useState<Food[]>([]);
  const [selectedFood, setSelectedFood] = useState<Food | null>(null);
  const [grams, setGrams] = useState("");
  const [isOverlayVisible, setIsOverlayVisible] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [dailyGoals, setDailyGoals] = useState<AppSettings['dailyGoals']>({ calories: 2000, protein: 150, carbs: 200, fat: 70 });
  const [search, setSearch] = useState("");
  const [editIndex, setEditIndex] = useState<number | null>(null);
  const [foodIcons, setFoodIcons] = useState<{ [foodName: string]: string | null | undefined; }>({});
  const [isLoadingData, setIsLoadingData] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [readableDate, setReadableDate] = useState('');
  const [pendingQuickAddFood, setPendingQuickAddFood] = useState<Food | null>(null);


  const { theme } = useTheme();
  const styles = useStyles();
  const foodIconsRef = useRef(foodIcons);
  useEffect(() => { foodIconsRef.current = foodIcons; }, [foodIcons]);

  const navigation = useNavigation<DailyEntryScreenNavigationProp>();
  const route = useRoute<DailyEntryScreenRouteProp>();

  useEffect(() => {
    const updateDateForToast = async () => {
      const formatted = await formatDateReadableAsync(parseISO(selectedDate));
      setReadableDate(formatted);
    };
    updateDateForToast();
  }, [selectedDate, i18n.locale]);

  const fetchAndSetIcon = useCallback(async (foodName: string) => {
    if (!foodName) return;
    if (foodIconsRef.current[foodName] === undefined) {
      setFoodIcons(prev => ({ ...prev, [foodName]: undefined }));
      try {
        const url = await getFoodIconUrl(foodName);
        setFoodIcons(prev => ({ ...prev, [foodName]: url }));
      } catch (error) {
        console.error(`Failed to fetch icon for ${foodName}:`, error);
        setFoodIcons(prev => ({ ...prev, [foodName]: null }));
      }
    }
  }, []);

  const triggerIconPrefetch = useCallback((entries: DailyEntry[], currentSelectedDate: string) => {
    const uniqueFoodNames = new Set<string>();
    entries.forEach(entry => { if (entry.date === currentSelectedDate && entry.items) { entry.items.forEach(item => { if (item.food?.name) uniqueFoodNames.add(item.food.name); }); } });

    if (uniqueFoodNames.size > 0) {
      Array.from(uniqueFoodNames).forEach(name => {
        fetchAndSetIcon(name);
      });
    }
  }, [fetchAndSetIcon]);

  const loadData = useCallback(async () => {
    console.log('DailyEntryScreen: loadData triggered');
    setIsLoadingData(true);
    try {
      const [foodsResult, loadedEntries, loadedSettings] = await Promise.all([
        getFoods(),
        loadDailyEntries(),
        loadSettings(),
      ]);

      const loadedFoodsArray = foodsResult.items;

      setDailyGoals(loadedSettings?.dailyGoals ?? { calories: 2000, protein: 150, carbs: 200, fat: 70 });
      loadedFoodsArray.sort((a, b) => a.name.localeCompare(b.name));
      setFoods(loadedFoodsArray);
      setDailyEntries(loadedEntries);
      triggerIconPrefetch(loadedEntries, selectedDate);
    } catch (error) {
      console.error("Error in DailyEntryScreen loadData:", error);
      Alert.alert(t('dailyEntryScreen.errorLoad'), t('dailyEntryScreen.errorLoadMessage'));
      setFoods([]); setDailyEntries([]); setDailyGoals({ calories: 0, protein: 0, carbs: 0, fat: 0 });
    } finally {
      setIsLoadingData(false);
      console.log('DailyEntryScreen: loadData finished');
    }
  }, [selectedDate, triggerIconPrefetch]); // triggerIconPrefetch and selectedDate are stable or change intentionally

  // Effect to store pending food from route params
  useEffect(() => {
    const quickAddFoodParam = route.params?.quickAddFood;
    if (quickAddFoodParam) {
      console.log('DailyEntryScreen: Received quickAddFoodParam:', quickAddFoodParam.name);
      setPendingQuickAddFood(quickAddFoodParam);
      navigation.setParams({ quickAddFood: undefined }); // Clear immediately
    }
  }, [route.params, navigation]);

  // Effect to process pending food once data is loaded and modal is not open
  useEffect(() => {
    if (pendingQuickAddFood && !isLoadingData && !isOverlayVisible && foods.length > 0) {
      console.log('DailyEntryScreen: Processing PENDING quickAddFood:', pendingQuickAddFood.name);
      const foodExistsInLibrary = foods.find(f => f.id === pendingQuickAddFood.id);
      const foodToUse = foodExistsInLibrary || pendingQuickAddFood;

      if (!foodExistsInLibrary) {
        console.warn(`Pending Quick add food '${pendingQuickAddFood.name}' not found in loaded library. Using param directly for modal.`);
        // Optionally, if the modal MUST have the item in the `foods` prop list:
        // setFoods(prev => [...prev, pendingQuickAddFood].sort((a,b) => a.name.localeCompare(b.name)));
      }

      setSelectedFood(foodToUse);
      setGrams("");
      setEditIndex(null); // Ensure not in edit mode
      setSearch(""); // Clear search
      fetchAndSetIcon(foodToUse.name);
      setIsOverlayVisible(true); // Open the modal
      setPendingQuickAddFood(null); // Clear pending state
    }
  }, [pendingQuickAddFood, isLoadingData, isOverlayVisible, foods, fetchAndSetIcon, setSelectedFood, setGrams, setEditIndex, setSearch, setIsOverlayVisible]);


  useFocusEffect(
    useCallback(() => {
      console.log('DailyEntryScreen: Focus effect triggered');
      loadData();
      // Screen specific focus cleanups can go in the return function if needed
      return () => {
        console.log('DailyEntryScreen: Blur / Cleanup');
        // Example: if you wanted to close modal on blur, but not if opened by quick add
        // if (isOverlayVisible && !pendingQuickAddFood) {
        //   setIsOverlayVisible(false);
        // }
      };
    }, [loadData]) // loadData is stable due to its own useCallback
  );


  const currentEntryItems = useMemo(() => {
    const entry = dailyEntries.find((e) => e.date === selectedDate);
    return entry ? [...entry.items].reverse() : [];
  }, [dailyEntries, selectedDate]);

  const getOriginalIndex = useCallback((reversedIndex: number): number => {
    const entry = dailyEntries.find((e) => e.date === selectedDate);
    if (!entry || reversedIndex < 0 || reversedIndex >= entry.items.length) return -1;
    return entry.items.length - 1 - reversedIndex;
  }, [dailyEntries, selectedDate]);

  const updateAndSaveEntries = useCallback(async (updatedEntries: DailyEntry[]) => {
    setIsSaving(true); const previousEntries = [...dailyEntries]; // Shallow copy for potential rollback
    setDailyEntries(updatedEntries);
    try {
      await saveDailyEntries(updatedEntries);
    }
    catch (error) {
      Alert.alert(t('dailyEntryScreen.errorSave'), t('dailyEntryScreen.errorSaveMessage'));
      setDailyEntries(previousEntries); // Rollback state on error
    }
    finally {
      setIsSaving(false);
    }
  }, [dailyEntries]); // dailyEntries is a dependency

  const handleSingleEntryAction = useCallback(async () => {
    if (isSaving) return;
    if (!selectedFood || !selectedFood.id) { Alert.alert(t('addEntryModal.alertFoodNotSelected'), t('addEntryModal.alertFoodNotSelectedMessage')); return; }
    const trimmedGrams = grams.trim();
    const numericGrams = parseFloat(trimmedGrams);
    if (!isValidNumberInput(trimmedGrams) || numericGrams <= 0) { Alert.alert(t('addEntryModal.alertInvalidAmount'), t('addEntryModal.alertInvalidAmountMessage')); return; }
    const entryItem: DailyEntryItem = { food: selectedFood, grams: numericGrams };
    const isEditMode = editIndex !== null; const existingEntryIndex = dailyEntries.findIndex((entry) => entry.date === selectedDate);
    let updatedEntries: DailyEntry[];
    if (existingEntryIndex > -1) {
      const existingEntry = dailyEntries[existingEntryIndex]; let updatedItems;
      if (isEditMode) {
        const originalEditIndex = getOriginalIndex(editIndex!);
        if (originalEditIndex === -1) { Alert.alert(t('dailyEntryScreen.errorEditEntry'), t('dailyEntryScreen.errorEditEntryMessage')); return; }
        updatedItems = existingEntry.items.map((item, index) => index === originalEditIndex ? entryItem : item);
      } else { updatedItems = [entryItem, ...(existingEntry.items ?? [])]; }
      const updatedEntry = { ...existingEntry, items: updatedItems };
      updatedEntries = dailyEntries.map((entry, index) => index === existingEntryIndex ? updatedEntry : entry);
    } else {
      if (isEditMode) { Alert.alert(t('dailyEntryScreen.errorEditEntry'), t('dailyEntryScreen.errorEditEntryMessage')); return; }
      const newDailyEntry: DailyEntry = { date: selectedDate, items: [entryItem] };
      updatedEntries = [...dailyEntries, newDailyEntry]; updatedEntries.sort((a, b) => a.date.localeCompare(b.date));
    }
    await updateAndSaveEntries(updatedEntries);

    if (selectedFood?.name) {
      fetchAndSetIcon(selectedFood.name);
    }

    setSelectedFood(null); setGrams(""); setEditIndex(null); setIsOverlayVisible(false); setSearch("");
    Toast.show({ type: "success", text1: t(isEditMode ? 'dailyEntryScreen.entryUpdated' : 'dailyEntryScreen.entryAdded'), position: "bottom", visibilityTime: 2000, });
  }, [selectedFood, grams, editIndex, dailyEntries, selectedDate, isSaving, getOriginalIndex, updateAndSaveEntries, fetchAndSetIcon]);

  const handleAddMultipleEntries = useCallback(async (entriesToAdd: { food: Food; grams: number }[]) => {
    if (isSaving) return;
    try {
      if (!entriesToAdd || entriesToAdd.length === 0) return;
      const newItems: DailyEntryItem[] = entriesToAdd.map((entry) => ({ food: entry.food, grams: entry.grams }));
      const existingEntryIndex = dailyEntries.findIndex((entry) => entry.date === selectedDate);
      let updatedEntries: DailyEntry[];
      if (existingEntryIndex > -1) {
        const existingEntry = dailyEntries[existingEntryIndex];
        const updatedItems = [...newItems, ...(existingEntry.items ?? [])];
        const updatedEntry = { ...existingEntry, items: updatedItems };
        updatedEntries = dailyEntries.map((entry, index) => index === existingEntryIndex ? updatedEntry : entry);
      } else {
        const newDailyEntry: DailyEntry = { date: selectedDate, items: newItems };
        updatedEntries = [...dailyEntries, newDailyEntry]; updatedEntries.sort((a, b) => a.date.localeCompare(b.date));
      }
      await updateAndSaveEntries(updatedEntries);

      newItems.forEach(item => {
        if (item.food?.name) {
          fetchAndSetIcon(item.food.name);
        }
      });

      Toast.show({ type: "success", text1: t('dailyEntryScreen.itemsAdded', { count: entriesToAdd.length }), text2: t('dailyEntryScreen.toDateFormat', { date: readableDate }), position: "bottom", visibilityTime: 3000, });
      setIsOverlayVisible(false); setSelectedFood(null); setGrams(""); setEditIndex(null); setSearch("");
    } catch (error) { Alert.alert(t('dailyEntryScreen.errorAddMultiple'), t('dailyEntryScreen.errorAddMultipleMessage')); setIsOverlayVisible(false); }
  }, [dailyEntries, selectedDate, isSaving, updateAndSaveEntries, readableDate, fetchAndSetIcon]);

  const handleSelectFood = (item: Food | null) => { setSelectedFood(item); if (item && editIndex === null) setGrams(""); };

  const handleRemoveEntry = useCallback(async (reversedIndex: number) => {
    if (isSaving) return; const originalIndex = getOriginalIndex(reversedIndex); if (originalIndex === -1) return;
    const currentEntry = dailyEntries.find((e) => e.date === selectedDate); if (!currentEntry || originalIndex >= currentEntry.items.length) return;
    const itemToRemove = currentEntry.items[originalIndex];
    const updatedItems = currentEntry.items.filter((_, i) => i !== originalIndex); let finalEntries: DailyEntry[];
    if (updatedItems.length === 0) { finalEntries = dailyEntries.filter((entry) => entry.date !== selectedDate); }
    else { const updatedEntry = { ...currentEntry, items: updatedItems }; finalEntries = dailyEntries.map((entry) => entry.date === selectedDate ? updatedEntry : entry); }
    await updateAndSaveEntries(finalEntries);
    Toast.show({ type: "info", text1: t('dailyEntryScreen.itemRemoved', { itemName: itemToRemove.food.name }), text2: t('dailyEntryScreen.undo'), position: "bottom", bottomOffset: 80, visibilityTime: 4000, onPress: () => handleUndoRemoveEntry(itemToRemove, selectedDate, originalIndex), });
  }, [dailyEntries, selectedDate, isSaving, getOriginalIndex, updateAndSaveEntries]);

  const handleUndoRemoveEntry = useCallback(async (itemToRestore: DailyEntryItem, entryDate: string, originalIndex: number) => {
    if (isSaving) return; const existingEntryIndex = dailyEntries.findIndex((e) => e.date === entryDate); let updatedEntries;
    if (existingEntryIndex > -1) {
      const entryToUpdate = dailyEntries[existingEntryIndex]; const updatedItems = [...entryToUpdate.items];
      updatedItems.splice(originalIndex, 0, itemToRestore);
      const restoredEntry = { ...entryToUpdate, items: updatedItems };
      updatedEntries = dailyEntries.map((entry, index) => index === existingEntryIndex ? restoredEntry : entry);
    } else {
      const newEntry: DailyEntry = { date: entryDate, items: [itemToRestore] };
      updatedEntries = [...dailyEntries, newEntry]; updatedEntries.sort((a, b) => a.date.localeCompare(b.date));
    }
    await updateAndSaveEntries(updatedEntries); Toast.hide();
    Toast.show({ type: "success", text1: t('dailyEntryScreen.entryRestored'), visibilityTime: 1500, position: "bottom" });
  }, [dailyEntries, isSaving, updateAndSaveEntries]);

  const updateSearch = (searchVal: string) => setSearch(searchVal);

  const toggleOverlay = useCallback((itemToEdit: DailyEntryItem | null = null, reversedItemIndex: number | null = null) => {
    if (isSaving) return;
    // Reset states for new modal instance
    setSelectedFood(null);
    setGrams("");
    setEditIndex(null);
    setSearch(""); // Clear search when opening/closing modal manually

    if (itemToEdit && reversedItemIndex !== null) {
      setSelectedFood(itemToEdit.food);
      setGrams(String(itemToEdit.grams));
      setEditIndex(reversedItemIndex);
      fetchAndSetIcon(itemToEdit.food.name); // Ensure icon is fetched if needed
    }
    setIsOverlayVisible((current) => !current);
  }, [isSaving, fetchAndSetIcon]); // fetchAndSetIcon is stable

  const handleAddNewFoodRequest = useCallback(() => {
    if (isSaving) return;
    setIsOverlayVisible(false);
    setSelectedFood(null);
    setGrams("");
    setEditIndex(null);
    setSearch("");
    navigation.navigate('FoodListRoute', { openAddFoodModal: true });
  }, [isSaving, navigation]);


  const handleCommitFoodItemToMainLibrary = useCallback(async (
    foodData: Omit<Food, 'id'> | Food,
    isUpdate: boolean
  ): Promise<Food | null> => {
    if (isSaving) return null;
    setIsSaving(true);
    try {
      let committedFood: Food;
      if (isUpdate) {
        committedFood = await updateFoodService(foodData as Food);
        setFoods(prevFoods =>
          prevFoods.map(f => (f.id === committedFood.id ? committedFood : f)).sort((a, b) => a.name.localeCompare(b.name))
        );
      } else {
        committedFood = await createFood(foodData as Omit<Food, 'id'>);
        setFoods(prevFoods => [...prevFoods, committedFood].sort((a, b) => a.name.localeCompare(b.name)));
      }
      fetchAndSetIcon(committedFood.name);
      return committedFood;
    } catch (error) {
      console.error("Error committing food to library:", error);
      Alert.alert(
        t('foodListScreen.errorLoad'),
        error instanceof Error ? error.message : t(isUpdate ? 'foodListScreen.errorUpdateMessage' : 'foodListScreen.errorCreateMessage')
      );
      return null;
    } finally {
      setIsSaving(false);
    }
  }, [isSaving, fetchAndSetIcon]);


  const handleEditEntryViaModal = (item: DailyEntryItem, reversedIndex: number) => toggleOverlay(item, reversedIndex);

  const handleDateChange = useCallback((event: DateTimePickerEvent, selectedDateValue?: Date) => {
    const isAndroidDismiss = Platform.OS === "android" && event.type === "dismissed";
    setShowDatePicker(Platform.OS === "ios");
    if (!isAndroidDismiss && event.type === "set" && selectedDateValue) {
      if (isValid(selectedDateValue)) {
        const formattedDate = formatISO(selectedDateValue, { representation: "date" });
        if (formattedDate !== selectedDate) { setSelectedDate(formattedDate); setEditIndex(null); }
      } else { Alert.alert(t('dailyEntryScreen.errorInvalidDate'), t('dailyEntryScreen.errorInvalidDateMessage')); }
    }
    if (Platform.OS === "android") setShowDatePicker(false);
  }, [selectedDate]);

  const handlePreviousDay = useCallback(() => {
    if (isSaving || isLoadingData) return;
    try {
      const currentDateObj = parseISO(selectedDate); if (!isValid(currentDateObj)) return;
      const newDate = subDays(currentDateObj, 1); const newDateString = formatISO(newDate, { representation: "date" });
      setSelectedDate(newDateString); setEditIndex(null);
    } catch (e) { console.error("DateNav Error (Prev):", e); }
  }, [selectedDate, isSaving, isLoadingData]);

  const handleNextDay = useCallback(() => {
    if (isSaving || isLoadingData) return;
    try {
      const currentDateObj = parseISO(selectedDate); if (!isValid(currentDateObj)) return;
      const newDate = addDays(currentDateObj, 1); const newDateString = formatISO(newDate, { representation: "date" });
      setSelectedDate(newDateString); setEditIndex(null);
    } catch (e) { console.error("DateNav Error (Next):", e); }
  }, [selectedDate, isSaving, isLoadingData]);

  const calculateTotals = useMemo(() => {
    const currentOriginalEntry = dailyEntries.find((entry) => entry.date === selectedDate);
    let totals = { totalCalories: 0, totalProtein: 0, totalCarbs: 0, totalFat: 0 };
    if (currentOriginalEntry) {
      currentOriginalEntry.items.forEach((item) => {
        if (item.food && typeof item.food.calories === "number" && typeof item.food.protein === "number" && typeof item.food.carbs === "number" && typeof item.food.fat === "number" && typeof item.grams === "number" && item.grams > 0) {
          const factor = item.grams / 100; totals.totalCalories += item.food.calories * factor; totals.totalProtein += item.food.protein * factor; totals.totalCarbs += item.food.carbs * factor; totals.totalFat += item.food.fat * factor;
        }
      });
    } return { totalCalories: Math.round(totals.totalCalories), totalProtein: Math.round(totals.totalProtein), totalCarbs: Math.round(totals.totalCarbs), totalFat: Math.round(totals.totalFat), };
  }, [dailyEntries, selectedDate]);

  return (
    <SafeAreaView style={styles.container} edges={["top", "left", "right"]}>
      <DateNavigator selectedDate={selectedDate} onPreviousDay={handlePreviousDay} onNextDay={handleNextDay} onShowDatePicker={() => !isSaving && !isLoadingData && setShowDatePicker(true)} isSaving={isSaving} isLoadingData={isLoadingData} />
      {showDatePicker && (<DateTimePicker value={parseISO(selectedDate)} mode="date" display={Platform.OS === "ios" ? "spinner" : "default"} onChange={handleDateChange} />)}
      <View style={styles.progressContainer}><DailyProgress calories={calculateTotals.totalCalories} protein={calculateTotals.totalProtein} carbs={calculateTotals.totalCarbs} fat={calculateTotals.totalFat} goals={dailyGoals} /></View>
      <Divider style={styles.divider} />
      {isSaving && (<View style={styles.savingIndicator}><ActivityIndicator size="small" color={theme.colors.primary} /><Text style={styles.savingText}>{t('dailyEntryScreen.saving')}</Text></View>)}
      <Text style={styles.sectionTitle}>{t('dailyEntryScreen.todaysEntries')}</Text>
      {isLoadingData ? (<View style={styles.centeredLoader}><ActivityIndicator size="large" color={theme.colors.primary} /><Text style={styles.loadingText}>{t('dailyEntryScreen.loadingEntries')}</Text></View>
      ) : (
        <FlatList
          data={currentEntryItems}
          keyExtractor={(item, index) => `entry-${item?.food?.id ?? "unknown"}-${getOriginalIndex(index)}-${item?.grams ?? index}-${new Date().getTime()}`} // Added timestamp for more uniqueness if needed
          renderItem={({ item, index }) => (
            <DailyEntryListItem
              item={item}
              reversedIndex={index}
              foodIcons={foodIcons}
              setFoodIcons={setFoodIcons}
              onEdit={handleEditEntryViaModal}
              onRemove={handleRemoveEntry}
              isSaving={isSaving}
              dailyGoals={dailyGoals} />
          )}
          ListEmptyComponent={<View style={styles.emptyListContainer}><RNEIcon name="reader-outline" type="ionicon" size={50} color={theme.colors.grey3} /><Text style={styles.emptyListText}>{t('dailyEntryScreen.noEntries')}</Text><Text style={styles.emptyListSubText}>{t('dailyEntryScreen.noEntriesHint')}</Text></View>}
          initialNumToRender={10}
          maxToRenderPerBatch={5}
          windowSize={11}
          contentContainerStyle={styles.listContentContainer}
          keyboardShouldPersistTaps="handled"
          extraData={{ foodIcons, isSaving, dailyGoals, selectedDate }} // Add relevant extraData
        />
      )}
      <FAB icon={<RNEIcon name="add" color="white" />} color={theme.colors.primary} onPress={() => !isSaving && toggleOverlay()} placement="right" size="large" style={styles.fab} disabled={isSaving || isLoadingData} />
      <AddEntryModal
        isVisible={isOverlayVisible}
        toggleOverlay={toggleOverlay}
        selectedFood={selectedFood}
        grams={grams}
        setGrams={setGrams}
        foods={foods} // Pass the loaded foods list
        handleAddEntry={handleSingleEntryAction}
        handleAddMultipleEntries={handleAddMultipleEntries}
        handleSelectFood={handleSelectFood}
        search={search}
        updateSearch={updateSearch}
        isEditMode={editIndex !== null}
        initialGrams={editIndex !== null ? grams : undefined}
        onAddNewFoodRequest={handleAddNewFoodRequest}
        onCommitFoodToLibrary={handleCommitFoodItemToMainLibrary}
        dailyGoals={dailyGoals}
      />
    </SafeAreaView>
  );
};

const useStyles = makeStyles((theme) => ({
  container: { flex: 1, backgroundColor: theme.colors.background },
  progressContainer: { paddingHorizontal: 15, paddingTop: 10 },
  divider: { marginVertical: 0, height: StyleSheet.hairlineWidth, backgroundColor: theme.colors.divider, },
  sectionTitle: { marginTop: 15, marginBottom: 10, paddingHorizontal: 15, fontWeight: "bold", fontSize: 18, color: theme.colors.text, textAlign: I18nManager.isRTL ? 'right' : 'left' },
  fab: { position: "absolute", margin: 16, right: I18nManager.isRTL ? undefined : 10, left: I18nManager.isRTL ? 10 : undefined, bottom: 10 },
  emptyListContainer: { flex: 1, alignItems: "center", justifyContent: "center", padding: 30, marginTop: 50, },
  emptyListText: { fontSize: 17, color: theme.colors.grey2, textAlign: "center", marginTop: 15, },
  emptyListSubText: { fontSize: 14, color: theme.colors.grey3, textAlign: "center", marginTop: 8, },
  centeredLoader: { flex: 1, justifyContent: "center", alignItems: "center", paddingBottom: 50, },
  loadingText: { marginTop: 10, color: theme.colors.grey2, fontSize: 16 },
  savingIndicator: { flexDirection: "row", alignItems: "center", justifyContent: "center", paddingVertical: 5, backgroundColor: theme.colors.grey5, },
  savingText: { marginLeft: 8, color: theme.colors.primary, fontSize: 14, fontStyle: "italic", },
  listContentContainer: { paddingBottom: 80 },
}));

export default DailyEntryScreen;
---------- END DailyEntryScreen.tsx ----------


---------- FoodListScreen.tsx ----------
// src/screens/FoodListScreen.tsx
import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { View, FlatList, Alert, Platform, ActivityIndicator, StyleSheet, I18nManager } from "react-native";
import { createFood, getFoods, updateFood, deleteFood } from "../services/foodService";
import { Food } from "../types/food";
import { isNotEmpty } from "../utils/validationUtils";
import FoodItem from "../components/FoodItem";
import { Button, SearchBar, useTheme, makeStyles, Text, Icon as RNEIcon } from "@rneui/themed";
import { FAB } from "@rneui/base";
import { SafeAreaView } from "react-native-safe-area-context";
import AddFoodModal from "../components/AddFoodModal";
import Toast from "react-native-toast-message";
import { useFocusEffect, useNavigation, useRoute, RouteProp } from "@react-navigation/native"; 
import { getFoodIconUrl } from "../utils/iconUtils";
import { t } from '../localization/i18n';
import { BottomTabNavigationProp } from '@react-navigation/bottom-tabs'; // For Tab Navigation
import { MainTabParamList } from "../navigation/AppNavigator"; // Import MainTabParamList

interface FoodListScreenProps { onFoodChange?: () => void; }

const PAGE_SIZE = 20;

// Define navigation prop type for this screen within the MainTabParamList
type FoodListScreenNavigationProp = BottomTabNavigationProp<MainTabParamList, 'FoodListRoute'>;
// Define route prop type for this screen
type FoodListScreenRouteProp = RouteProp<MainTabParamList, 'FoodListRoute'>;


const FoodListScreen: React.FC<FoodListScreenProps> = ({ onFoodChange }) => {
    const [foods, setFoods] = useState<Food[]>([]);
    const [foodIcons, setFoodIcons] = useState<{ [foodName: string]: string | null | undefined }>({});
    
    const [offset, setOffset] = useState(0);
    const [totalFoods, setTotalFoods] = useState(0);
    const [isLoading, setIsLoading] = useState(true); 
    const [isLoadingMore, setIsLoadingMore] = useState(false); 

    const [isOverlayVisible, setIsOverlayVisible] = useState(false);
    const [search, setSearch] = useState("");
    const [newFood, setNewFood] = useState<Omit<Food, "id">>({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0, });
    const [editFood, setEditFood] = useState<Food | null>(null);
    const [errors, setErrors] = useState<{ [key: string]: string }>({});
    const [isSaving, setIsSaving] = useState(false); 

    const { theme } = useTheme();
    const styles = useStyles();
    const flatListRef = useRef<FlatList>(null);
    const foodIconsRef = useRef(foodIcons);
    useEffect(() => { foodIconsRef.current = foodIcons; }, [foodIcons]);

    const route = useRoute<FoodListScreenRouteProp>();
    const navigation = useNavigation<FoodListScreenNavigationProp>();

    const hasMoreData = useMemo(() => foods.length < totalFoods, [foods.length, totalFoods]);

    const triggerIconPrefetch = useCallback((foodsToFetch: Food[]) => {
        if (!foodsToFetch || foodsToFetch.length === 0) return;
        
        foodsToFetch.forEach(food => {
            if (food.name && foodIconsRef.current[food.name] === undefined) {
                setFoodIcons(prev => ({...prev, [food.name]: undefined})); // Mark as loading
                getFoodIconUrl(food.name)
                    .then(url => setFoodIcons(prev => ({...prev, [food.name]: url})))
                    .catch(err => {
                        console.error(`Failed to fetch icon for ${food.name} in triggerIconPrefetch:`, err);
                        setFoodIcons(prev => ({...prev, [food.name]: null})); // Cache null on error
                    });
            }
        });
    }, []); // Removed foodIcons dependency as foodIconsRef.current and setFoodIcons are stable or correctly handled

    const fetchFoodsData = useCallback(async (isRefresh: boolean = false) => {
        if (!isRefresh && (isLoadingMore || !hasMoreData)) return;

        const currentOffset = isRefresh ? 0 : offset;
        if (isRefresh) {
            setIsLoading(true);
            // DO NOT CLEAR foodIcons here: setFoodIcons({}); // This was the problematic line
        } else {
            setIsLoadingMore(true);
        }

        try {
            const { items: newItems, total } = await getFoods(currentOffset, PAGE_SIZE);
            if (isRefresh) {
                setFoods(newItems);
            } else {
                // Filter out duplicates that might already be in the list if an ID conflict somehow occurs
                // More robustly, this would involve checking IDs if items can be added/removed dynamically
                // from the middle of the list, but for simple pagination, direct concat is usually fine.
                const newUniqueItems = newItems.filter(newItem => !foods.some(existingFood => existingFood.id === newItem.id));
                setFoods(prevFoods => [...prevFoods, ...newUniqueItems]);
            }
            setTotalFoods(total);
            setOffset(currentOffset + newItems.length);
            triggerIconPrefetch(newItems); // This will now only fetch for items not already in foodIcons state
        } catch (error) {
            Alert.alert(t('foodListScreen.errorLoad'), t('foodListScreen.errorLoadMessage'));
            if (isRefresh) setFoods([]); 
        } finally {
            if (isRefresh) setIsLoading(false);
            else setIsLoadingMore(false);
        }
    }, [isLoadingMore, hasMoreData, offset, triggerIconPrefetch, foods]); // Added `foods` to dependency array for setFoods in `else` block

    useFocusEffect(
      useCallback(() => {
        fetchFoodsData(true); 
    
        const params = route.params;
        if (params?.openAddFoodModal && !isOverlayVisible) {
          toggleOverlay(); 
          navigation.setParams({ openAddFoodModal: undefined }); 
        }
    
        return () => {
          // Clear search on blur, or other cleanup
          // setSearch(""); // Decided against clearing search on blur, user might want to keep it
        };
      }, [route.params, navigation, isOverlayVisible]) // fetchFoodsData is stable, only route.params, navigation, isOverlayVisible might change
    );

    const handleQuickAdd = useCallback((foodToQuickAdd: Food) => {
        navigation.navigate('DailyEntryRoute', { quickAddFood: foodToQuickAdd });
    }, [navigation]);

    const validateFood = (food: Omit<Food, "id"> | Food): { [key: string]: string } | null => {
        const newErrors: { [key: string]: string } = {};
        if (!isNotEmpty(food.name)) newErrors.name = "Name is required"; 
        if (isNaN(food.calories) || food.calories < 0) newErrors.calories = "Must be a non-negative number";
        if (isNaN(food.protein) || food.protein < 0) newErrors.protein = "Must be a non-negative number";
        if (isNaN(food.carbs) || food.carbs < 0) newErrors.carbs = "Must be a non-negative number";
        if (isNaN(food.fat) || food.fat < 0) newErrors.fat = "Must be a non-negative number";
        return Object.keys(newErrors).length === 0 ? null : newErrors;
    };

    const handleCreateFood = async () => {
        const trimmedFood = { ...newFood, name: newFood.name.trim() };
        const validationErrors = validateFood(trimmedFood);
        if (validationErrors) { setErrors(validationErrors); Toast.show({ type: 'error', text1: t('foodListScreen.fixErrors'), position: 'bottom' }); return; }
        setErrors({}); setIsSaving(true);
        try {
            const created = await createFood(trimmedFood); 
            setIsOverlayVisible(false); 
            onFoodChange?.(); 
            fetchFoodsData(true); 
            Toast.show({ type: 'success', text1: t('foodListScreen.foodAdded', { foodName: created.name }), position: 'bottom' });
            setNewFood({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0 });
        } catch (error: any) { Alert.alert(t('foodListScreen.errorCreate'), error.message || t('foodListScreen.errorCreateMessage'));
        } finally { setIsSaving(false); }
    };

    const handleUpdateFood = async () => {
        if (!editFood) return;
        const trimmedFood = { ...editFood, name: editFood.name.trim() };
        const validationErrors = validateFood(trimmedFood);
        if (validationErrors) { setErrors(validationErrors); Toast.show({ type: 'error', text1: t('foodListScreen.fixErrors'), position: 'bottom' }); return; }
        setErrors({}); setIsSaving(true);
        try {
            const updated = await updateFood(trimmedFood); 
            setIsOverlayVisible(false); 
            onFoodChange?.(); 
            fetchFoodsData(true); 
            Toast.show({ type: 'success', text1: t('foodListScreen.foodUpdated', { foodName: updated.name }), position: 'bottom' });
            setEditFood(null);
        } catch (error: any) { Alert.alert(t('foodListScreen.errorUpdate'), error.message || t('foodListScreen.errorUpdateMessage'));
        } finally { setIsSaving(false); }
    };

    const handleDeleteFood = async (foodId: string) => {
        const foodToDelete = foods.find((f) => f.id === foodId); if (!foodToDelete) return;
        try {
            await deleteFood(foodId); 
            onFoodChange?.();
            // Remove the specific icon from cache if its name is known
            if (foodToDelete.name) {
                setFoodIcons(prev => { 
                    const newIcons = {...prev}; 
                    delete newIcons[foodToDelete.name]; 
                    return newIcons; 
                });
            }
            fetchFoodsData(true); 
        } catch (error) {
            Alert.alert(t('foodListScreen.errorDelete'), t('foodListScreen.errorDeleteMessage'));
            // If delete failed, we might need to re-fetch to ensure UI consistency,
            // but fetchFoodsData(true) is already called.
        }
    };

    const handleUndoDeleteFood = useCallback(async (food: Food) => {
        // This function is called by Toast onPress.
        // The item is 'deleted' optimistically or after backend confirmation.
        // To undo, we essentially need to re-add or signal the backend to un-delete.
        // For a client-side only or simple backend, re-fetching data is often the simplest 'undo'.
        Toast.hide();
        // Assuming the delete was client-side first and then synced, or that re-fetching covers it.
        // If the backend has a specific "undo delete" endpoint, call it here.
        // For now, just refresh the list.
        fetchFoodsData(true); 
        Toast.show({ type: 'info', text1: t('foodListScreen.foodRestored', { foodName: food.name }), text2: "List refreshed.", position: 'bottom', visibilityTime: 2000 });
    }, [fetchFoodsData]);


    const toggleOverlay = (foodToEdit?: Food) => {
        if (isSaving) return;
        if (foodToEdit) { setEditFood({ ...foodToEdit }); setNewFood({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0 }); }
        else { setEditFood(null); setNewFood({ name: "", calories: 0, protein: 0, carbs: 0, fat: 0 }); }
        setErrors({}); setIsOverlayVisible(!isOverlayVisible);
    };

    const updateSearch = (text: string) => setSearch(text);
    
    const filteredFoods = useMemo(() => {
        if (!search.trim()) return foods;
        return foods.filter((food) => food.name.toLowerCase().includes(search.toLowerCase()));
    }, [foods, search]);

    const handleInputChange = useCallback(( key: keyof Omit<Food, "id">, value: string, isEdit: boolean ) => {
        const numericKeys: (keyof Omit<Food, "id">)[] = ['calories', 'protein', 'carbs', 'fat']; let processedValue: string | number = value;
        if (numericKeys.includes(key)) {
            if (value === "" || value === ".") { processedValue = value; } else {
                const cleaned = value.replace(/[^0-9.]/g, "").replace(/(\..*)\./g, "$1");
                if (cleaned === "" || !isNaN(parseFloat(cleaned))) { processedValue = cleaned; } else { return; }
            }
        }
        const updateState = (prevState: any) => {
             let finalValue: string | number;
             if (numericKeys.includes(key)) { 
                // For numeric fields, store 0 if input is empty or just ".", otherwise parse
                finalValue = (processedValue === "" || processedValue === ".") ? 0 : parseFloat(processedValue as string); 
            } else { 
                finalValue = processedValue; 
            }
             return { ...prevState, [key]: finalValue };
        };
        if (isEdit) { setEditFood(updateState); } else { setNewFood(updateState); }
    }, []);

    const renderFooter = () => {
        if (!isLoadingMore || search.trim()) return null; // Don't show loader if searching
        return (
            <View style={styles.footerLoader}>
                <ActivityIndicator size="small" color={theme.colors.primary} />
            </View>
        );
    };
    
    const handleLoadMore = () => {
        if (search.trim()) return; // Don't load more if a search filter is active
        fetchFoodsData(false);
    };

    if (isLoading && foods.length === 0) { 
        return ( <SafeAreaView style={styles.centeredLoader}><ActivityIndicator size="large" color={theme.colors.primary} /><Text style={styles.loadingText}>{t('foodListScreen.loadingFoods')}</Text></SafeAreaView> );
    }

    return (
        <SafeAreaView style={styles.container} edges={['top', 'left', 'right']}>
            <SearchBar 
                placeholder={t('foodListScreen.searchPlaceholder')} 
                onChangeText={updateSearch} 
                value={search} 
                platform={Platform.OS === "ios" ? "ios" : "android"} 
                containerStyle={styles.searchBarContainer} 
                inputContainerStyle={styles.searchBarInputContainer} 
                inputStyle={styles.searchInputStyle} 
                onClear={() => setSearch('')} 
                showCancel={Platform.OS === 'ios' && search.length > 0}
                cancelButtonProps={{color: theme.colors.primary}}
            />
            <FlatList 
                ref={flatListRef} 
                data={filteredFoods} 
                keyExtractor={(item) => item.id} 
                renderItem={({ item }) => ( 
                    <FoodItem 
                        food={item} 
                        onEdit={toggleOverlay} 
                        onDelete={handleDeleteFood} 
                        onUndoDelete={handleUndoDeleteFood} 
                        onQuickAdd={handleQuickAdd}
                        foodIconUrl={foodIcons[item.name]} 
                    /> 
                )} 
                ListEmptyComponent={ 
                    !isLoading ? ( 
                        <View style={styles.emptyListContainer}>
                            <RNEIcon name="nutrition-outline" type="ionicon" size={50} color={theme.colors.grey3} />
                            <Text style={styles.emptyListText}> 
                                {search ? t('foodListScreen.noResults', {searchTerm: search}) : t('foodListScreen.emptyLibrary')} 
                            </Text>
                            {!search && <Text style={styles.emptyListSubText}>{t('foodListScreen.emptyLibraryHint')}</Text>}
                        </View> 
                    ) : null 
                } 
                contentContainerStyle={filteredFoods.length === 0 && !isLoading ? styles.listContentContainerEmpty : styles.listContentContainer} 
                onEndReached={handleLoadMore}
                onEndReachedThreshold={0.5}
                ListFooterComponent={renderFooter}
                keyboardShouldPersistTaps="handled" 
                extraData={{ foodIconsLength: Object.keys(foodIcons).length, isLoadingMore }} // Use a scalar value for extraData
            />
            <FAB 
                icon={<RNEIcon name="add" color={theme.colors.white} />} 
                color={theme.colors.primary} 
                onPress={() => !isSaving && toggleOverlay()} 
                placement="right" 
                size="large" 
                style={styles.fab} 
                disabled={isSaving || isLoading /* Don't disable for isLoadingMore */} 
            />
            <AddFoodModal 
                isVisible={isOverlayVisible} 
                toggleOverlay={() => !isSaving && setIsOverlayVisible(false)} 
                newFood={newFood} 
                editFood={editFood} 
                errors={errors} 
                handleInputChange={handleInputChange} 
                handleCreateFood={handleCreateFood} 
                handleUpdateFood={handleUpdateFood} 
                validateFood={validateFood} 
                setErrors={setErrors} 
            />
        </SafeAreaView>
    );
};

const useStyles = makeStyles((theme) => ({
    container: { flex: 1, backgroundColor: theme.colors.background, },
    centeredLoader: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: theme.colors.background, },
    loadingText: { marginTop: 15, color: theme.colors.grey1, fontSize: 16, },
    emptyListContainer: { flex: 1, alignItems: 'center', justifyContent: 'center', padding: 30, marginTop: 50, },
    emptyListText: { fontSize: 17, color: theme.colors.grey2, textAlign: 'center', marginTop: 15, },
    emptyListSubText: { fontSize: 14, color: theme.colors.grey3, textAlign: 'center', marginTop: 8, },
    searchBarContainer: { backgroundColor: theme.colors.background, borderBottomColor: theme.colors.divider, borderTopColor: theme.colors.background, borderBottomWidth: StyleSheet.hairlineWidth, paddingHorizontal: 10, paddingVertical: 8, marginBottom: 0, },
    searchBarInputContainer: { backgroundColor: theme.colors.searchBg || theme.colors.grey5, height: 40, borderRadius: 20, },
    searchInputStyle: { color: theme.colors.text, fontSize: 15, textAlign: I18nManager.isRTL ? 'right' : 'left' },
    listContentContainer: { paddingBottom: 80, },
    listContentContainerEmpty: { flexGrow: 1, justifyContent: 'center', },
    fab: { position: 'absolute', margin: 16, right: I18nManager.isRTL ? undefined : 10, left: I18nManager.isRTL ? 10: undefined, bottom: 10, },
    footerLoader: {
        paddingVertical: 20,
        alignItems: 'center',
    },
}));

export default FoodListScreen;
---------- END FoodListScreen.tsx ----------


---------- QuestionnaireScreen.tsx ----------
// src/screens/QuestionnaireScreen.tsx
import React, { useState, useCallback, useMemo } from 'react';
import { View, ScrollView, Alert, StyleSheet, I18nManager, Platform } from 'react-native';
import { Input, Button, Text, useTheme, makeStyles, CheckBox } from '@rneui/themed';
import { Picker } from '@react-native-picker/picker';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { QuestionnaireFormData, Sex, ActivityLevel, PrimaryGoal, GoalIntensity, CalculatedGoals } from '../types/questionnaire';
import { MacroType, Settings } from '../types/settings';
import { loadSettings, saveSettings } from '../services/storageService';
import i18n, { t } from '../localization/i18n';
import Toast from 'react-native-toast-message';

type SettingsStackParamList = {
  SettingsScreen: undefined;
  QuestionnaireScreen: undefined;
};

type QuestionnaireNavigationProp = NativeStackNavigationProp<SettingsStackParamList, 'QuestionnaireScreen'>;

const QuestionnaireScreen: React.FC = () => {
  const { theme } = useTheme();
  const styles = useStyles();
  const navigation = useNavigation<QuestionnaireNavigationProp>();

  const [formData, setFormData] = useState<QuestionnaireFormData>({
    age: '',
    sex: '',
    height: '',
    weight: '',
    activityLevel: '',
    primaryGoal: '',
    goalIntensity: GoalIntensity.MODERATE, // Default intensity
  });

  const [errors, setErrors] = useState<Partial<Record<keyof QuestionnaireFormData, string>>>({});
  const [isCalculating, setIsCalculating] = useState(false);

  const activityLevelOptions = useMemo(() => [
    { label: t('questionnaireScreen.activityLevel.select'), value: '' },
    { label: t('questionnaireScreen.activityLevel.sedentary'), value: ActivityLevel.SEDENTARY },
    { label: t('questionnaireScreen.activityLevel.light'), value: ActivityLevel.LIGHT },
    { label: t('questionnaireScreen.activityLevel.moderate'), value: ActivityLevel.MODERATE },
    { label: t('questionnaireScreen.activityLevel.active'), value: ActivityLevel.ACTIVE },
    { label: t('questionnaireScreen.activityLevel.veryActive'), value: ActivityLevel.VERY_ACTIVE },
  ], [i18n.locale]);

  const sexOptions = useMemo(() => [
    { label: t('questionnaireScreen.sex.select'), value: '' },
    { label: t('questionnaireScreen.sex.male'), value: Sex.MALE },
    { label: t('questionnaireScreen.sex.female'), value: Sex.FEMALE },
  ], [i18n.locale]);

  const primaryGoalOptions = useMemo(() => [
    { label: t('questionnaireScreen.primaryGoal.select'), value: '' },
    { label: t('questionnaireScreen.primaryGoal.loseWeight'), value: PrimaryGoal.LOSE_WEIGHT },
    { label: t('questionnaireScreen.primaryGoal.maintainWeight'), value: PrimaryGoal.MAINTAIN_WEIGHT },
    { label: t('questionnaireScreen.primaryGoal.gainMuscle'), value: PrimaryGoal.GAIN_MUSCLE },
  ], [i18n.locale]);

  const goalIntensityOptions = useMemo(() => [
    { label: t('questionnaireScreen.goalIntensity.mild'), value: GoalIntensity.MILD },
    { label: t('questionnaireScreen.goalIntensity.moderate'), value: GoalIntensity.MODERATE },
    { label: t('questionnaireScreen.goalIntensity.aggressive'), value: GoalIntensity.AGGRESSIVE },
  ], [i18n.locale]);


  const handleInputChange = (field: keyof QuestionnaireFormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Partial<Record<keyof QuestionnaireFormData, string>> = {};
    const ageNum = parseFloat(formData.age);
    const heightNum = parseFloat(formData.height);
    const weightNum = parseFloat(formData.weight);

    if (!formData.age.trim() || isNaN(ageNum) || ageNum <= 0 || ageNum > 120) {
      newErrors.age = t('questionnaireScreen.validation.invalidAge');
    }
    if (formData.sex === '') {
      newErrors.sex = t('questionnaireScreen.validation.selectSex');
    }
    if (!formData.height.trim() || isNaN(heightNum) || heightNum <= 50 || heightNum > 250) {
      newErrors.height = t('questionnaireScreen.validation.invalidHeight');
    }
    if (!formData.weight.trim() || isNaN(weightNum) || weightNum <= 20 || weightNum > 300) {
      newErrors.weight = t('questionnaireScreen.validation.invalidWeight');
    }
    if (formData.activityLevel === '') {
      newErrors.activityLevel = t('questionnaireScreen.validation.selectActivityLevel');
    }
    if (formData.primaryGoal === '') {
      newErrors.primaryGoal = t('questionnaireScreen.validation.selectPrimaryGoal');
    }
    if (formData.primaryGoal !== PrimaryGoal.MAINTAIN_WEIGHT && !formData.goalIntensity) {
        newErrors.goalIntensity = t('questionnaireScreen.validation.selectGoalIntensity');
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const calculateGoals = (): CalculatedGoals | null => {
    const age = parseFloat(formData.age);
    const height = parseFloat(formData.height);
    const weight = parseFloat(formData.weight);

    // BMR (Mifflin-St Jeor)
    let bmr: number;
    if (formData.sex === Sex.MALE) {
      bmr = 10 * weight + 6.25 * height - 5 * age + 5;
    } else {
      bmr = 10 * weight + 6.25 * height - 5 * age - 161;
    }

    // TDEE
    let activityMultiplier = 1.2;
    switch (formData.activityLevel) {
      case ActivityLevel.SEDENTARY: activityMultiplier = 1.2; break;
      case ActivityLevel.LIGHT: activityMultiplier = 1.375; break;
      case ActivityLevel.MODERATE: activityMultiplier = 1.55; break;
      case ActivityLevel.ACTIVE: activityMultiplier = 1.725; break;
      case ActivityLevel.VERY_ACTIVE: activityMultiplier = 1.9; break;
    }
    const tdee = bmr * activityMultiplier;

    // Calorie Goal
    let calorieAdjustment = 0;
    if (formData.primaryGoal !== PrimaryGoal.MAINTAIN_WEIGHT) {
      switch (formData.goalIntensity) {
        case GoalIntensity.MILD: calorieAdjustment = (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT ? -300 : 250); break;
        case GoalIntensity.MODERATE: calorieAdjustment = (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT ? -500 : 400); break;
        case GoalIntensity.AGGRESSIVE: calorieAdjustment = (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT ? -700 : 600); break;
      }
    }
    let calorieGoal = tdee + calorieAdjustment;

    // Ensure calorie goal is not below minimums
    const minCalories = formData.sex === Sex.FEMALE ? 1200 : 1500;
    if (calorieGoal < minCalories) {
        calorieGoal = minCalories;
        Toast.show({ type: 'info', text1: t('questionnaireScreen.toast.minCaloriesAdjustedTitle'), text2: t('questionnaireScreen.toast.minCaloriesAdjustedMessage', { calories: minCalories }), position: 'bottom' });
    }
    if (formData.primaryGoal === PrimaryGoal.LOSE_WEIGHT && calorieGoal >= tdee) {
        calorieGoal = tdee - 100; // Ensure at least a small deficit
    }
    if (formData.primaryGoal === PrimaryGoal.GAIN_MUSCLE && calorieGoal <= tdee) {
        calorieGoal = tdee + 100; // Ensure at least a small surplus
    }


    // Macros
    let proteinPerKg = 1.8;
    if (formData.primaryGoal === PrimaryGoal.GAIN_MUSCLE) proteinPerKg = 2.0;
    if (age > 65) proteinPerKg = Math.max(1.2, proteinPerKg - 0.4); // Adjust for older adults

    const proteinGrams = proteinPerKg * weight;
    const proteinCalories = proteinGrams * 4;

    const fatPercentage = 0.25; // 25% of calories from fat
    const fatCalories = calorieGoal * fatPercentage;
    const fatGrams = fatCalories / 9;

    const carbCalories = calorieGoal - proteinCalories - fatCalories;
    const carbGrams = carbCalories / 4;

    return {
      calories: Math.round(calorieGoal),
      protein: Math.round(proteinGrams),
      carbs: Math.round(carbGrams),
      fat: Math.round(fatGrams),
    };
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      Toast.show({ type: 'error', text1: t('questionnaireScreen.validation.fixErrors'), position: 'bottom' });
      return;
    }
    setIsCalculating(true);
    try {
      const calculated = calculateGoals();
      if (calculated) {
        const currentSettings = await loadSettings();
        const updatedSettings: Settings = {
          ...currentSettings,
          dailyGoals: calculated,
        };
        await saveSettings(updatedSettings);
        Toast.show({ type: 'success', text1: t('questionnaireScreen.toast.goalsCalculated'), position: 'bottom' });
        navigation.goBack();
      } else {
        Alert.alert(t('questionnaireScreen.error.calculationFailedTitle'), t('questionnaireScreen.error.calculationFailedMessage'));
      }
    } catch (error) {
      console.error("Error saving estimated goals:", error);
      Alert.alert(t('questionnaireScreen.error.genericSaveTitle'), t('questionnaireScreen.error.genericSaveMessage'));
    } finally {
      setIsCalculating(false);
    }
  };

  const renderPicker = (
    label: string,
    selectedValue: string | number,
    onValueChange: (itemValue: any, itemIndex: number) => void,
    items: { label: string, value: string | number }[],
    error?: string
  ) => (
    <View style={styles.inputContainer}>
      <Text style={styles.label}>{label}</Text>
      <View style={[styles.pickerWrapper, error ? styles.errorBorder : {}]}>
        <Picker
          selectedValue={selectedValue}
          onValueChange={onValueChange}
          style={[styles.picker, Platform.OS === 'android' ? { color: theme.colors.text, backgroundColor: theme.colors.background } : {}]}
          itemStyle={[styles.pickerItem, Platform.OS === 'ios' ? {color: theme.colors.text} : {}]}
          dropdownIconColor={theme.colors.text}
        >
          {items.map(item => <Picker.Item key={item.value.toString()} label={item.label} value={item.value} />)}
        </Picker>
      </View>
      {error && <Text style={styles.errorText}>{error}</Text>}
    </View>
  );

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.scrollContentContainer} keyboardShouldPersistTaps="handled">
      <Text h4 style={styles.title}>{t('questionnaireScreen.title')}</Text>

      <Input
        label={t('questionnaireScreen.ageLabel')}
        placeholder={t('questionnaireScreen.agePlaceholder')}
        keyboardType="numeric"
        value={formData.age}
        onChangeText={val => handleInputChange('age', val)}
        errorMessage={errors.age}
        inputStyle={{ textAlign: I18nManager.isRTL ? 'right' : 'left', color: theme.colors.text}}
        labelStyle={styles.label}
        errorStyle={styles.errorText}
        containerStyle={styles.inputContainer}
      />

      {renderPicker(t('questionnaireScreen.sexLabel'), formData.sex, (val) => handleInputChange('sex', val), sexOptions, errors.sex)}

      <Input
        label={t('questionnaireScreen.heightLabel')}
        placeholder={t('questionnaireScreen.heightPlaceholder')}
        keyboardType="numeric"
        value={formData.height}
        onChangeText={val => handleInputChange('height', val)}
        errorMessage={errors.height}
        rightIcon={<Text style={styles.unitText}>cm</Text>}
        inputStyle={{ textAlign: I18nManager.isRTL ? 'right' : 'left', color: theme.colors.text}}
        labelStyle={styles.label}
        errorStyle={styles.errorText}
        containerStyle={styles.inputContainer}
      />

      <Input
        label={t('questionnaireScreen.weightLabel')}
        placeholder={t('questionnaireScreen.weightPlaceholder')}
        keyboardType="numeric"
        value={formData.weight}
        onChangeText={val => handleInputChange('weight', val)}
        errorMessage={errors.weight}
        rightIcon={<Text style={styles.unitText}>kg</Text>}
        inputStyle={{ textAlign: I18nManager.isRTL ? 'right' : 'left', color: theme.colors.text}}
        labelStyle={styles.label}
        errorStyle={styles.errorText}
        containerStyle={styles.inputContainer}
      />

      {renderPicker(t('questionnaireScreen.activityLevelLabel'), formData.activityLevel, (val) => handleInputChange('activityLevel', val), activityLevelOptions, errors.activityLevel)}
      {renderPicker(t('questionnaireScreen.primaryGoalLabel'), formData.primaryGoal, (val) => handleInputChange('primaryGoal', val), primaryGoalOptions, errors.primaryGoal)}

      {formData.primaryGoal && formData.primaryGoal !== PrimaryGoal.MAINTAIN_WEIGHT && (
        renderPicker(t('questionnaireScreen.goalIntensityLabel'), formData.goalIntensity || '', (val) => handleInputChange('goalIntensity', val), goalIntensityOptions, errors.goalIntensity)
      )}

      <Button
        title={t('questionnaireScreen.calculateButton')}
        onPress={handleSubmit}
        buttonStyle={styles.button}
        loading={isCalculating}
        disabled={isCalculating}
      />
    </ScrollView>
  );
};

const useStyles = makeStyles((theme) => ({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  scrollContentContainer: {
    padding: 20,
    paddingBottom: 40,
  },
  title: {
    marginBottom: 20,
    textAlign: 'center',
    color: theme.colors.text,
  },
  inputContainer: {
    marginBottom: 15,
  },
  label: {
    color: theme.colors.grey1,
    fontWeight: 'bold',
    marginBottom: 5,
    fontSize: 16,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
  unitText: {
    color: theme.colors.grey2,
    fontSize: 16,
  },
  pickerWrapper: {
    borderColor: theme.colors.grey3,
    borderWidth: 1,
    borderRadius: 5,
    backgroundColor: theme.colors.background, // Ensure picker background matches
  },
  picker: {
    height: Platform.OS === 'ios' ? 120 : 50,
    width: '100%',
  },
  pickerItem: {
     // For iOS, text color is set here. Android uses picker's color prop.
     textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
  errorText: {
    color: theme.colors.error,
    marginTop: 3,
    fontSize: 12,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
  errorBorder: {
    borderColor: theme.colors.error,
  },
  button: {
    marginTop: 20,
    backgroundColor: theme.colors.primary,
    borderRadius: 8,
  },
}));

export default QuestionnaireScreen;
---------- END QuestionnaireScreen.tsx ----------


---------- SettingsScreen.tsx ----------
// src/screens/SettingsScreen.tsx
import React, { useState, useEffect, useCallback } from "react";
import { View, ScrollView, Alert, StyleSheet, ActivityIndicator, Platform, I18nManager } from "react-native";
import { Text, makeStyles, Button, Icon, useTheme, ListItem } from "@rneui/themed";
import { Picker } from '@react-native-picker/picker';
import DailyGoalsInput from "../components/DailyGoalsInput";
import DataManagementButtons from "../components/DataManagementButtons";
import ThemeSwitch from "../components/ThemeSwitch";
import StatisticsChart from "../components/StatisticsChart";
import AccountSettings from "../components/AccountSettings";
import { loadSettings, saveSettings, loadDailyEntries } from "../services/storageService";
import { Settings, Statistics, MacroType, MacroData, LanguageCode, macros as macroKeysSetting } from "../types/settings";
import { parseISO, isValid, startOfDay } from "date-fns";
import { DailyEntry } from "../types/dailyEntry";
import { useFocusEffect, useNavigation } from "@react-navigation/native";
import { NativeStackNavigationProp } from "@react-navigation/native-stack"; // For navigation
import { clearIconCache } from "../utils/iconUtils";
import Toast from "react-native-toast-message";
import { getUserStatus, addCoinsToUser, BackendError } from "../services/backendService";
import { t } from "../localization/i18n";
import i18n from '../localization/i18n';

interface SettingsScreenProps {
  onThemeChange: (theme: "light" | "dark" | "system") => void;
  onLocaleChange: (locale: LanguageCode) => void;
  onDataOperation: () => void;
}

// Define param list for Settings Stack
type SettingsStackParamList = {
  SettingsHome: undefined; // Current screen (SettingsScreen)
  Questionnaire: undefined; // The new QuestionnaireScreen
};

type SettingsNavigationProp = NativeStackNavigationProp<SettingsStackParamList, 'SettingsHome'>;


const SettingsScreen: React.FC<SettingsScreenProps> = ({ onThemeChange, onLocaleChange }) => {
  const [settings, setSettings] = useState<Settings>({
    theme: "system",
    language: "system",
    dailyGoals: { calories: 0, protein: 0, carbs: 0, fat: 0 },
    settingsHistory: [],
  });

  const [statistics, setStatistics] = useState<Statistics>({
    calories: [], protein: [], carbs: [], fat: [],
  });
  const [chartUpdateKey, setChartUpdateKey] = useState(0);
  const [isClearingCache, setIsClearingCache] = useState(false);
  const [userCoins, setUserCoins] = useState<number | null>(null);
  const [isLoadingCoins, setIsLoadingCoins] = useState(false);
  const [isAddingCoins, setIsAddingCoins] = useState(false);
  const [isDataLoading, setIsDataLoading] = useState(true); // For initial load

  const { theme } = useTheme();
  const styles = useStyles();
  const navigation = useNavigation<SettingsNavigationProp>(); // Typed navigation

  const getStatisticsData = useCallback((
    dailyEntries: DailyEntry[],
    macro: MacroType,
    currentGoals: { [key in MacroType]: number }
  ): MacroData[][] => {
    const intakeDataMap = new Map<number, number>(); // timestamp -> value
    const goalDataMap = new Map<number, number>();   // timestamp -> value (for calories)

    dailyEntries.forEach((entry) => {
      try {
        const entryDate = parseISO(entry.date);
        if (!isValid(entryDate)) {
          console.warn(`Invalid date in getStatisticsData: ${entry.date}`);
          return;
        }
        const entryTimestamp = startOfDay(entryDate).getTime();

        let intakeValue = 0;
        if (entry.items && Array.isArray(entry.items)) {
          intakeValue = entry.items.reduce((total, item) => {
            if (item.food && typeof item.food[macro] === 'number' && typeof item.grams === 'number' && item.grams > 0) {
              return total + (item.food[macro] / 100) * item.grams;
            }
            return total;
          }, 0);
        }
        intakeDataMap.set(entryTimestamp, (intakeDataMap.get(entryTimestamp) || 0) + Math.round(intakeValue));

        if (macro === "calories") {
          const goalValue = currentGoals[macro] ?? 0;
           if (intakeDataMap.has(entryTimestamp)) {
             goalDataMap.set(entryTimestamp, Math.round(goalValue));
           }
        }
      } catch (parseError) {
        console.error(`Error processing entry ${entry.date} for statistics:`, parseError);
      }
    });

    const sortedTimestamps = Array.from(new Set([...intakeDataMap.keys(), ...goalDataMap.keys()])).sort((a,b) => a - b);
    
    const finalIntakeData: MacroData[] = sortedTimestamps.map(ts => ({
        x: ts,
        y: intakeDataMap.get(ts) || 0
    }));

    if (macro === "calories") {
        const finalGoalData: MacroData[] = sortedTimestamps.map(ts => ({
            x: ts,
            y: goalDataMap.get(ts) || currentGoals[macro] || 0
        }));
        return [finalIntakeData, finalGoalData];
    }
    return [finalIntakeData];
  }, []);


  const updateStatistics = useCallback(async (currentGoals: { [key in MacroType]: number }) => {
    console.log("SettingsScreen: Updating statistics with goals:", currentGoals);
    try {
        const loadedEntries = await loadDailyEntries();
        const updatedStats: Statistics = {
            calories: [], protein: [], carbs: [], fat: []
        };
        (macroKeysSetting as readonly MacroType[]).forEach(macro => {
            updatedStats[macro] = getStatisticsData(loadedEntries, macro, currentGoals);
        });
        setStatistics(updatedStats);
        setChartUpdateKey((prevKey) => prevKey + 1);
        console.log("SettingsScreen: Statistics updated.");
    } catch (error) {
        console.error("SettingsScreen: Failed to update statistics:", error);
    }
  }, [getStatisticsData]);

  const fetchUserStatus = useCallback(async () => {
    setIsLoadingCoins(true);
    try { const status = await getUserStatus(); setUserCoins(status.coins); }
    catch (error) {
      setUserCoins(null);
      Toast.show({ type: 'error', text1: t('accountSettings.errorLoadCoins'), text2: error instanceof BackendError ? error.message : t('backendService.errorNetworkConnection'), position: 'bottom', });
    }
    finally { setIsLoadingCoins(false); }
  }, []);

  useFocusEffect( useCallback(() => {
      let isActive = true;
      setIsDataLoading(true);
      const loadAndProcessData = async () => {
        try {
          const loadedSettings = await loadSettings();
          if (!isActive) return;
          setSettings(loadedSettings);
          // Update title based on loaded settings (language might have changed)
          navigation.setOptions({ title: t('settingsScreen.title') });
          await fetchUserStatus();
          await updateStatistics(loadedSettings.dailyGoals);
        } catch (error) {
          if (isActive) {
            Alert.alert(t('dailyEntryScreen.errorLoad'), t('dailyEntryScreen.errorLoadMessage'));
          }
        } finally {
          if (isActive) setIsDataLoading(false);
        }
      };
      loadAndProcessData();
      return () => { isActive = false; };
    }, [updateStatistics, fetchUserStatus, navigation]) // Added navigation to dependency array
  );

  const handleGoalChange = useCallback(async (goalType: MacroType, value: string) => {
    const numericValue = parseFloat(value);
    const validatedValue = isNaN(numericValue) || numericValue < 0 ? 0 : numericValue;

    setSettings((prevSettings) => {
      const updatedGoals = { ...prevSettings.dailyGoals, [goalType]: validatedValue };
      const updatedSettings: Settings = { ...prevSettings, dailyGoals: updatedGoals };
      
      saveSettings(updatedSettings)
        .then(() => {
          updateStatistics(updatedSettings.dailyGoals);
        })
        .catch((error) => {
          Alert.alert(t('dailyEntryScreen.errorSave'), t('dailyEntryScreen.errorSaveMessage'));
        });
      return updatedSettings;
    });
  }, [updateStatistics]);


  const handleDataOperation = useCallback(async () => {
    setIsDataLoading(true);
    try {
      const reloadedSettings = await loadSettings();
      setSettings(reloadedSettings);
      await updateStatistics(reloadedSettings.dailyGoals);
      await fetchUserStatus();
      onThemeChange(reloadedSettings.theme);
      onLocaleChange(reloadedSettings.language);
      Toast.show({ type: 'info', text1: t('dataManagement.dataReloaded'), position: 'bottom'});
    }
    catch (error) { Alert.alert(t('dailyEntryScreen.errorLoad'), t('dailyEntryScreen.errorLoadMessage')); }
    finally { setIsDataLoading(false); }
  }, [updateStatistics, onThemeChange, onLocaleChange, fetchUserStatus]);

   const handleClearIconCache = useCallback(async () => {
      setIsClearingCache(true);
      try { await clearIconCache(); Toast.show({ type: 'success', text1: t('settings.iconsCacheCleared'), text2: t('settings.iconsCacheClearedMessage'), position: 'bottom' }); }
      catch (error) { Toast.show({ type: 'error', text1: t('settings.errorClearCache'), text2: error instanceof Error ? error.message : t('settings.errorClearCacheMessage'), position: 'bottom' }); }
      finally { setIsClearingCache(false); }
   }, []);

    const handleAddTestCoins = useCallback(async () => {
        setIsAddingCoins(true);
        try { const amount = 10; const updatedStatus = await addCoinsToUser(amount); setUserCoins(updatedStatus.coins); Toast.show({ type: 'success', text1: t('accountSettings.coinsAdded'), text2: `${t('accountSettings.coinBalance')}: ${updatedStatus.coins}`, position: 'bottom' }); }
        catch (error) { Toast.show({ type: 'error', text1: t('accountSettings.errorAddCoins'), text2: error instanceof BackendError ? error.message : t('backendService.errorNetworkConnection'), position: 'bottom' }); }
        finally { setIsAddingCoins(false); }
    }, []);

  const handleLanguageChange = (newLanguage: LanguageCode) => {
    setSettings(prev => ({...prev, language: newLanguage}));
    onLocaleChange(newLanguage);
  };

  const handleNavigateToQuestionnaire = () => {
    navigation.navigate('Questionnaire');
  };

  if (isDataLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
        <Text style={styles.loadingText}>{t('app.initializing')}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.scrollContentContainer} keyboardShouldPersistTaps="handled">
        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.account.title')}</Text>
        <AccountSettings
             userCoins={userCoins}
             isLoadingCoins={isLoadingCoins}
             isAddingCoins={isAddingCoins}
             onAddTestCoins={handleAddTestCoins}
        />

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.general.title')}</Text>
        <ThemeSwitch currentTheme={settings.theme} onToggle={onThemeChange} />

        <ListItem bottomDivider containerStyle={{ backgroundColor: theme.colors.background }}>
            <ListItem.Content>
                <ListItem.Title style={styles.listItemTitle}>{t('settingsScreen.language.title')}</ListItem.Title>
            </ListItem.Content>
        </ListItem>
        <View style={Platform.OS === 'ios' ? {} : styles.pickerContainerAndroid}>
             <Picker
                selectedValue={settings.language}
                onValueChange={(itemValue) => handleLanguageChange(itemValue as LanguageCode)}
                style={[styles.pickerStyle, Platform.OS === 'android' ? { color: theme.colors.text, backgroundColor: theme.colors.background } : {}]}
                itemStyle={[styles.pickerItemStyle, Platform.OS === 'ios' ? { color: theme.colors.text } : {}]}
                dropdownIconColor={theme.colors.text}
            >
                <Picker.Item label={t('settingsScreen.language.system')} value="system" />
                <Picker.Item label={t('settingsScreen.language.english')} value="en" />
                <Picker.Item label={t('settingsScreen.language.russian')} value="ru" />
                <Picker.Item label={t('settingsScreen.language.hebrew')} value="he" />
            </Picker>
        </View>

        <View style={styles.sectionHeaderWithButton}>
            <Text h3 style={[styles.sectionTitle, styles.sectionTitleInline]}>{t('settingsScreen.dailyGoals.title')}</Text>
            <Button
                title={t('settingsScreen.goals.estimateButton')}
                type="outline"
                onPress={handleNavigateToQuestionnaire}
                buttonStyle={styles.estimateButton}
                titleStyle={styles.estimateButtonTitle}
                icon={<Icon name="calculator-variant" type="material-community" color={theme.colors.primary} size={18} />}
            />
        </View>
        <View style={styles.inputGroup}>
            <DailyGoalsInput dailyGoals={settings.dailyGoals} onGoalChange={handleGoalChange} />
        </View>

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.cacheManagement.title')}</Text>
        <View style={styles.buttonGroup}>
            <Button title={t('settings.refreshIcons')} onPress={handleClearIconCache} buttonStyle={[styles.button, { backgroundColor: theme.colors.secondary }]}
                    icon={<Icon name="refresh-outline" type="ionicon" color="white" size={20} style={{ marginRight: 8 }} />}
                    loading={isClearingCache} disabled={isClearingCache} />
        </View>

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.statistics.title')}</Text>
        <View style={styles.chartContainer}>
            <StatisticsChart statistics={statistics} key={`${chartUpdateKey}-${i18n.locale}-${theme.mode}`} />
        </View>

        <Text h3 style={styles.sectionTitle}>{t('settingsScreen.dataManagement.title')}</Text>
        <View style={styles.buttonGroup}>
            <DataManagementButtons onDataOperation={handleDataOperation} />
        </View>
    </ScrollView>
  );
};

const useStyles = makeStyles((theme) => ({
  container: { flex: 1, backgroundColor: theme.colors.background, },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.colors.background,
  },
  loadingText: {
    marginTop: 10,
    color: theme.colors.text,
    fontSize: 16,
  },
  scrollContentContainer: { padding: 15, paddingBottom: 40, },
  sectionTitle: {
    color: theme.colors.text, marginTop: 25, marginBottom: 15, paddingLeft: 5,
    borderLeftWidth: 3, borderLeftColor: theme.colors.primary,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
    fontSize: 20, fontWeight: 'bold',
  },
  sectionHeaderWithButton: {
    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 25,
    marginBottom: 10, // Reduced bottom margin as inputs follow directly
  },
  sectionTitleInline: {
    marginTop: 0, // Reset margin for inline title
    marginBottom: 0, // Reset margin
    borderLeftWidth: 0, // Remove border for inline version or style differently
    paddingLeft: 0,
    flexShrink: 1,
  },
  estimateButton: {
    borderColor: theme.colors.primary,
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 20,
  },
  estimateButtonTitle: {
    color: theme.colors.primary,
    fontSize: 14,
    fontWeight: '600',
    marginLeft: I18nManager.isRTL ? 0 : 5,
    marginRight: I18nManager.isRTL ? 5 : 0,
  },
  listItemTitle: {
    color: theme.colors.text,
    textAlign: I18nManager.isRTL ? 'right' : 'left',
    fontWeight: '500',
  },
  inputGroup: { marginBottom: 10, paddingHorizontal: 5, },
  buttonGroup: { marginBottom: 10, paddingHorizontal: 5, },
  button: { marginBottom: 10, borderRadius: 8, },
  chartContainer: {
    marginBottom: 20,
  },
  pickerContainerAndroid: {
    backgroundColor: theme.colors.background,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: theme.colors.divider,
    marginBottom: 10,
    marginTop: -5,
  },
  pickerStyle: {
    width: '100%',
    height: Platform.OS === 'ios' ? 120 : 50,
  },
  pickerItemStyle: {
    textAlign: I18nManager.isRTL ? 'right' : 'left',
  },
}));

export default SettingsScreen;
---------- END SettingsScreen.tsx ----------


---------- backendService.ts ----------
// src/services/backendService.ts
// ---------- src/services/backendService.ts ----------
import Constants from 'expo-constants';
import { getClientId } from './clientIDService';
import { EstimatedFoodItem, Macros, MacrosWithFoodName } from '../types/macros';
import { Platform } from 'react-native';
import uuid from 'react-native-uuid';
import i18n, { t } from '../localization/i18n'; // Import t and i18n

const getBackendUrl = (): string => {
    const envUrl = process.env.EXPO_PUBLIC_BACKEND_URL;
    if (envUrl) {
        console.log("Using Backend URL from EXPO_PUBLIC_BACKEND_URL:", envUrl);
        return envUrl.endsWith('/api/v1') ? envUrl : `${envUrl.replace(/\/$/, '')}/api/v1`;
    }
    const configUrl = Constants.expoConfig?.extra?.env?.BACKEND_URL;
    if (configUrl) {
        console.warn("Using Backend URL from app.json extra.env. Consider using build-time environment variables (EXPO_PUBLIC_*) for production.");
        return configUrl.endsWith('/api/v1') ? configUrl : `${configUrl.replace(/\/$/, '')}/api/v1`;
    }
    console.error("BACKEND_URL not found in environment variables or app.json extra.env. Using default DEVELOPMENT URL. THIS IS NOT FOR PRODUCTION.");
    const DEV_URL = 'http://192.168.1.15:8000';
    return `${DEV_URL}/api/v1`;
};

const BASE_URL = getBackendUrl();
console.log(`Backend Service Initialized. Base URL: ${BASE_URL}`);

interface GramsResponse { grams: number; }
interface IconResponse { icon_url: string | null | undefined; }
export interface UserStatus { client_id: string; coins: number; }
interface BackendErrorDetail { loc?: (string | number)[]; msg?: string; type?: string; }
interface BackendErrorResponse { detail?: string | BackendErrorDetail[]; }

export class BackendError extends Error {
    status: number; detail?: string | BackendErrorDetail[]; requestId?: string | null;
    constructor(message: string, status: number, detail?: string | BackendErrorDetail[], requestId?: string | null) {
        super(message); this.name = 'BackendError'; this.status = status; this.detail = detail; this.requestId = requestId;
    }
}

async function fetchBackend<T>( endpoint: string, options: RequestInit = {}, needsAuth: boolean = true ): Promise<T> {
    const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;
    const url = `${BASE_URL}${cleanEndpoint}`;
    const method = options.method || 'GET';
    let response: Response | null = null; let requestId: string | null = null;

    console.log(`[API Request] ${method} ${url} - Starting (Auth: ${needsAuth}, Locale: ${i18n.locale})`);

    const defaultHeaders: HeadersInit = {
        'Content-Type': 'application/json', 'Accept': 'application/json',
        'X-Platform': Platform.OS, 'Accept-Language': i18n.locale,
    };
    let authHeaders: HeadersInit = {};
    if (needsAuth) {
        const clientId = await getClientId();
        if (!uuid.validate(clientId)) {
             console.error(`[API Request] Invalid Client ID format detected: ${clientId}. Aborting request.`);
             throw new BackendError(t('backendService.errorInvalidClientId'), 400, "Invalid client ID format.");
        }
        authHeaders = { 'X-Client-ID': clientId };
        console.log(`[API Request] Adding X-Client-ID header.`);
    }
    const config: RequestInit = { ...options, headers: { ...defaultHeaders, ...authHeaders, ...options.headers, } };

     if (config.body && typeof config.body === 'string') {
          try {
              const bodyObj = JSON.parse(config.body);
              const bodyKeys = Object.keys(bodyObj);
              const bodyPreview = bodyKeys.length > 0 ? `{ keys: [${bodyKeys.join(', ')}] }` : '{}';
              console.log(`[API Request] ${method} ${url} - Body Preview: ${bodyPreview}`);
          } catch {
              console.log(`[API Request] ${method} ${url} - Body: (non-JSON or failed parse)`);
          }
     }

    try {
        response = await fetch(url, config);
        requestId = response.headers.get("X-Request-ID");
        const status = response.status; const contentType = response.headers.get("content-type");

        console.log(`[API Response] ${method} ${url} - Status: ${status}, Content-Type: ${contentType}, RequestID: ${requestId || 'N/A'}`);

        if (status === 204) {
             console.log(`[API Response] ${method} ${url} - Success (204 No Content)`);
             return null as T;
        }

        let responseBody: any; let isJson = false;
        try {
            if (contentType && contentType.includes("application/json")) {
                responseBody = await response.json();
                isJson = true;
            } else {
                responseBody = await response.text();
                console.log(`[API Response] ${method} ${url} - Received Text: ${responseBody.substring(0, 200)}...`);
            }
        } catch (parseError) {
            console.error(`[API Error] ${method} ${url} - Failed to parse response body (Status: ${status}):`, parseError);
            const rawText = await response.text().catch(() => '(Could not get raw text)');
            if (!response.ok) {
                throw new BackendError(t('backendService.errorRequestFailedParse', {status}), status, rawText, requestId);
            } else {
                console.warn(`[API Warning] ${method} ${url} - Status ${status} OK, but failed to parse response body.`);
                 return null as T;
            }
        }

        if (!response.ok) {
            let errorMessage = t('backendService.errorRequestFailedParse', {status}); // Default translated message
            let errorDetail: string | BackendErrorDetail[] | undefined = undefined;

            if (isJson && responseBody) {
                 const errorData = responseBody as BackendErrorResponse;
                 if (typeof errorData.detail === 'string') {
                    errorMessage = errorData.detail; // Use backend's specific string detail if available
                    errorDetail = errorMessage;
                 } else if (Array.isArray(errorData.detail)) {
                     errorMessage = t('backendService.errorRequestFailedDetailFormat', {status}); // Generic for validation array
                     errorDetail = errorData.detail;
                     console.warn(`[API Validation Error] ${method} ${url} - Details:`, JSON.stringify(errorDetail));
                 } else {
                      errorMessage = t('backendService.errorRequestFailedDetailFormat', {status});
                      errorDetail = JSON.stringify(responseBody);
                 }
            } else if (!isJson) {
                 errorMessage = t('backendService.errorRequestFailedWithServerMsg', {status, response: responseBody.substring(0,100)});
                 errorDetail = responseBody;
            }

            if (status === 401 && needsAuth) errorMessage = t('backendService.errorAuthFailed');
            if (status === 403) errorMessage = t('backendService.errorPermissionDenied');
            if (status === 404) errorMessage = t('backendService.errorNotFound');
            if (status === 429) errorMessage = t('backendService.errorTooManyRequests');
            if (status === 402) errorMessage = t('backendService.errorInsufficientCoins');

            console.error(`[API Error] ${method} ${url} - Status: ${status}, Message: "${errorMessage}", Detail:`, errorDetail);
            throw new BackendError(errorMessage, status, errorDetail, requestId);
        }

        console.log(`[API Response] ${method} ${url} - Success (Status: ${status})`);
        return responseBody as T;

    } catch (error) {
        const logRequestId = requestId ? ` (RequestID: ${requestId})` : '';
        if (error instanceof BackendError) throw error;

        console.error(`[API Network Error] ${method} ${url}${logRequestId} - Error:`, error);
        let networkErrorMessage = t('backendService.errorNetwork');
         if (error instanceof Error) {
             if (error.name === 'AbortError' || error.message.includes('timed out')) networkErrorMessage = t('backendService.errorNetworkTimeout');
             else if (error.message.includes('Network request failed')) networkErrorMessage += t('backendService.errorNetworkConnection');
             else networkErrorMessage += t('backendService.errorNetworkDetails', {error: error.message});
         } else networkErrorMessage += t('backendService.errorNetworkUnknown');
        throw new BackendError(networkErrorMessage, 0, networkErrorMessage, requestId);
    }
}

export const getUserStatus = async (): Promise<UserStatus> => {
    const clientId = await getClientId();
    return fetchBackend<UserStatus>(`/users/status/${clientId}`, {}, true);
};

export const getMacrosForRecipe = async (foodName: string, ingredients: string): Promise<Macros> => {
    const body = { food_name: foodName, ingredients };
    return fetchBackend<Macros>('/ai/macros_recipe', { method: 'POST', body: JSON.stringify(body), }, true);
};

export const getMacrosForImageSingle = async (image_base64: string, mime_type: string): Promise<MacrosWithFoodName> => {
    const body = { image_base64, mime_type };
    return fetchBackend<MacrosWithFoodName>('/ai/macros_image_single', { method: 'POST', body: JSON.stringify(body), }, true);
};

export const getMacrosForImageMultiple = async (image_base64: string, mime_type: string): Promise<EstimatedFoodItem[]> => {
    const body = { image_base64, mime_type };
    return fetchBackend<EstimatedFoodItem[]>('/ai/macros_image_multiple', { method: 'POST', body: JSON.stringify(body), }, true);
};

export const estimateGramsNaturalLanguage = async (foodName: string, quantityDescription: string): Promise<number> => {
    const body = { food_name: foodName, quantity_description: quantityDescription };
    const response = await fetchBackend<GramsResponse>('/ai/grams_natural_language', { method: 'POST', body: JSON.stringify(body), }, true);
    if (response === null || typeof response.grams !== 'number') {
        throw new BackendError(t('backendService.errorEstimateGramsUnexpectedResponse'), 500, "Invalid response format");
    }
    return response.grams;
};

export const getFoodIcon = async (foodName: string, locale: string = 'en'): Promise<string | null> => {
    const encodedFoodName = encodeURIComponent(foodName);
    const encodedLocale = encodeURIComponent(locale); // Use the passed locale
    try {
        const response = await fetchBackend<IconResponse>( `/icons/food?food_name=${encodedFoodName}&locale=${encodedLocale}`, {}, false );
        if (response === null) return null;
        return response.icon_url ?? null; // Ensure null if undefined
    } catch (error) {
        if (error instanceof BackendError && error.status === 404) return null;
        console.error(`Failed to get icon for ${foodName} via backend service:`, error);
         return null;
    }
};

export const addCoinsToUser = async (amount: number): Promise<UserStatus> => {
    const clientId = await getClientId();
    const body = { amount };
    if (amount <= 0) throw new BackendError(t('backendService.errorAddCoinsPositive'), 400, "Amount must be positive.");
    return fetchBackend<UserStatus>(`/users/add_coins/${clientId}`, { method: 'POST', body: JSON.stringify(body), }, true);
};
---------- END backendService.ts ----------


---------- clientIDService.ts ----------
// src/services/clientIDService.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import uuid from 'react-native-uuid';

const CLIENT_ID_KEY = '@MacroTracker:clientId';
let currentClientId: string | null = null; // In-memory cache

export const getClientId = async (): Promise<string> => {
  if (currentClientId) {
    return currentClientId;
  }

  try {
    let clientId = await AsyncStorage.getItem(CLIENT_ID_KEY);
    if (!clientId) {
      clientId = uuid.v4() as string;
      console.log('Generated new client ID:', clientId);
      await AsyncStorage.setItem(CLIENT_ID_KEY, clientId);
    } else {
      console.log('Retrieved existing client ID:', clientId);
    }
    currentClientId = clientId;
    return clientId;
  } catch (error) {
    console.error('Error handling client ID:', error);
    // Fallback or throw error depending on desired behavior
    // For now, generating a temporary one if storage fails
    return uuid.v4() as string;
  }
};

// Optional: Function to clear ID for testing
export const clearClientId = async (): Promise<void> => {
    currentClientId = null;
    try {
        await AsyncStorage.removeItem(CLIENT_ID_KEY);
        console.log('Client ID cleared.');
    } catch (error) {
        console.error('Error clearing client ID:', error);
    }
};
---------- END clientIDService.ts ----------


---------- foodService.ts ----------
// src/services/foodService.ts
// services/foodService.ts
import { Food } from '../types/food';
import { saveFoods, loadFoods } from './storageService';
import 'react-native-get-random-values';
import { v4 as uuidv4 } from 'uuid';

export const createFood = async (foodData: Omit<Food, 'id'>): Promise<Food> => {
  const newFood: Food = {
    id: uuidv4(),
    ...foodData,
  };
  const { items: currentFoods } = await loadFoods(); // Load all foods to append
  currentFoods.push(newFood);
  await saveFoods(currentFoods);
  return newFood;
};

export const getFoods = async (offset: number = 0, limit?: number): Promise<{ items: Food[], total: number }> => {
  return loadFoods(offset, limit);
};

export const updateFood = async (updatedFood: Food): Promise<Food> => {
  const { items: foods, total } = await loadFoods(); // Load all foods to find and update
  const index = foods.findIndex((f) => f.id === updatedFood.id);
  if (index === -1) {
    throw new Error('Food not found'); // Throw an error if not found
  }
  foods[index] = updatedFood;
  await saveFoods(foods);
  return updatedFood;
};

export const deleteFood = async (foodId: string): Promise<void> => {
  const { items: foods } = await loadFoods(); // Load all to filter
  const filteredFoods = foods.filter((f) => f.id !== foodId);
  await saveFoods(filteredFoods);
};
---------- END foodService.ts ----------


---------- storageService.ts ----------
// src/services/storageService.ts
// services/storageService.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import { DailyEntry } from '../types/dailyEntry';
import { Food } from '../types/food';
import { Settings, LanguageCode } from '../types/settings'; // Import LanguageCode
import { formatISO, parseISO } from 'date-fns';


const DAILY_ENTRIES_KEY = 'dailyEntries';
const FOODS_KEY = 'foods';
const SETTINGS_KEY = 'settings';
const RECENT_FOODS_KEY = 'recentFoods';
const LAST_USED_PORTIONS_KEY = 'lastUsedPortions'; // New key

export type LastUsedPortions = { [foodId: string]: number }; // Type for last used portions

export const saveDailyEntries = async (entries: DailyEntry[]): Promise<void> => {
  try {
    await AsyncStorage.setItem(DAILY_ENTRIES_KEY, JSON.stringify(entries));
  } catch (error) {
    console.error('Error saving daily entries:', error);
    throw error;
  }
};

export const loadDailyEntries = async (): Promise<DailyEntry[]> => {
  try {
    const entriesJson = await AsyncStorage.getItem(DAILY_ENTRIES_KEY);
    return entriesJson ? JSON.parse(entriesJson) : [];
  } catch (error) {
    console.error('Error loading daily entries:', error);
    return [];
  }
};

export const saveFoods = async (foods: Food[]): Promise<void> => {
  try {
    await AsyncStorage.setItem(FOODS_KEY, JSON.stringify(foods));
  } catch (error) {
    console.error('Error saving foods:', error);
    throw error; // Re-throw the error
  }
};

export const loadFoods = async (offset: number = 0, limit?: number): Promise<{ items: Food[], total: number }> => {
  try {
    const foodsJson = await AsyncStorage.getItem(FOODS_KEY);
    const allFoods: Food[] = foodsJson ? JSON.parse(foodsJson) : [];
    const total = allFoods.length;

    if (limit === undefined) {
      return { items: allFoods, total };
    }
    
    const paginatedFoods = allFoods.slice(offset, offset + limit);
    return { items: paginatedFoods, total };
  } catch (error) {
    console.error('Error loading foods:', error);
    return { items: [], total: 0 }; // Return an empty array and 0 total on error
  }
};



export const saveSettings = async (settings: Settings): Promise<void> => {
  try {
    await AsyncStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));
  } catch (error) {
    console.error('Error saving settings:', error);
    throw error;
  }
};

export const loadSettings = async (): Promise<Settings> => {
  try {
    const settingsJson = await AsyncStorage.getItem(SETTINGS_KEY);
    const loadedSettings = settingsJson ? JSON.parse(settingsJson) : {};

    // Apply defaults and ensure structure
    const defaultSettings: Settings = {
      theme: 'system',
      language: 'system', // Default language
      dailyGoals: { calories: 2000, protein: 50, carbs: 200, fat: 70 },
      settingsHistory: [] // Ensure settingsHistory exists
    };


    return {
      ...defaultSettings, // Start with defaults
        ...loadedSettings, // Override with loaded values
        dailyGoals: {
          ...defaultSettings.dailyGoals,  //ensure no fields missing from daily goals
            ...(loadedSettings.dailyGoals || {}) // And override *those* with any loaded dailyGoals
        }
    };

  } catch (error: any) {
    console.error('Error loading settings:', error);

    if (error.message.includes('Row too big')) {
      console.warn('Detected oversized settings data. Clearing settings.');
      try {
        await AsyncStorage.removeItem(SETTINGS_KEY);
      } catch (clearError) {
        console.error('Error clearing oversized settings:', clearError);
      }
    }

    return {
      theme: 'system',
      language: 'system', // Default language on error
      dailyGoals: { calories: 2000, protein: 50, carbs: 200, fat: 70 },
      settingsHistory: []
    };
  }
};

export const clearAllData = async (): Promise<void> => {
  try {
    // Keep clientID, clear everything else
    const clientIdKey = '@MacroTracker:clientId';
    const clientId = await AsyncStorage.getItem(clientIdKey);
    
    await AsyncStorage.clear();
    
    if (clientId) {
        await AsyncStorage.setItem(clientIdKey, clientId);
    }
    console.log('Application data cleared (excluding Client ID).');
  } catch (error) {
    console.error('Error clearing data:', error);
    throw error;
  }
};

export const saveRecentFoods = async (foods: Food[]) => {
    try {
        await AsyncStorage.setItem(RECENT_FOODS_KEY, JSON.stringify(foods));
    } catch (error) {
        console.error('Error saving recent foods:', error);
        throw error;
    }
};

export const loadRecentFoods = async (): Promise<Food[]> => {
    try {
        const foodsJson = await AsyncStorage.getItem(RECENT_FOODS_KEY);
        return foodsJson ? JSON.parse(foodsJson) : [];
    } catch (error) {
        console.error('Error loading recent foods:', error);
        return [];
    }
};

export const saveLastUsedPortions = async (portions: LastUsedPortions): Promise<void> => {
    try {
        await AsyncStorage.setItem(LAST_USED_PORTIONS_KEY, JSON.stringify(portions));
    } catch (error) {
        console.error('Error saving last used portions:', error);
        throw error;
    }
};

export const loadLastUsedPortions = async (): Promise<LastUsedPortions> => {
    try {
        const portionsJson = await AsyncStorage.getItem(LAST_USED_PORTIONS_KEY);
        return portionsJson ? JSON.parse(portionsJson) : {};
    } catch (error) {
        console.error('Error loading last used portions:', error);
        return {};
    }
};
---------- END storageService.ts ----------


---------- dailyEntry.ts ----------
// types/dailyEntry.ts (Modified)
import { Food } from "./food";

export interface DailyEntryItem {
  food: Food;
  grams: number;
}

export interface DailyEntry {
  date: string; // YYYY-MM-DD format
  items: DailyEntryItem[];
  goals?: {  // Optional goals
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
  };
}

export interface FoodItem { //No changes here.
    id: string;
    name: string;
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
  }
---------- END dailyEntry.ts ----------


---------- food.ts ----------
// types/food.ts
export interface Food {
  id: string;
  name: string;
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  // category: string;  // REMOVED
}
---------- END food.ts ----------


---------- macros.ts ----------
// src/types/macros.ts

// Basic macro structure
export interface Macros {
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
  }
  
  // Macros structure including the identified food name
  export interface MacrosWithFoodName extends Macros {
    foodName: string;
  }
  
  /**
   * Represents a single food item estimated from an image,
   * including its name, estimated weight, and macros per 100g.
   * Matches the structure expected/returned by the backend service.
   */
  export interface EstimatedFoodItem {
    foodName: string;
    estimatedWeightGrams: number;
    calories_per_100g: number;
    protein_per_100g: number;
    carbs_per_100g: number;
    fat_per_100g: number;
  }
---------- END macros.ts ----------


---------- openRouterTypes.ts ----------
// src/utils/types.ts

// =====================================
// Consolidated OpenRouter Type Definitions
// =====================================

// --- Content Parts (for multi-modal input like images) ---
export type OpenRouterContentPart =
  | { type: "text"; text: string }
  | { type: "image_url"; image_url: { url: string; detail?: "low" | "high" | "auto" } };

// --- Message Structure ---
// Allows content to be a simple string OR an array of content parts for vision models
export interface OpenRouterMessage {
  role: "user" | "assistant" | "system";
  content: string | OpenRouterContentPart[]; // Consolidated definition
  name?: string; // Optional name field
}

// --- Choice Structure (within the response) ---
// This structure aligns with standard Chat Completion APIs (like OpenAI/OpenRouter)
export interface OpenRouterChatChoice {
  index: number;
  message: OpenRouterMessage; // Contains the actual message content and role
  logprobs?: any | null; // Optional log probabilities (use a specific type if known)
  finish_reason: string | null; // Can be null sometimes
  // text?: string; // Usually the content is inside message.content, keep optional if some models return it differently
}

// --- API Usage Information ---
export interface OpenRouterUsage {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
}

// --- Main Chat Completion Response Structure ---
// Consolidates the fields from both previous declarations
export interface OpenRouterChatCompletionResponse {
  id: string;
  object: string; // Typically "chat.completion"
  created: number; // Timestamp
  model: string; // Model used
  choices: OpenRouterChatChoice[]; // Array of choices using the defined structure
  usage?: OpenRouterUsage; // Usage information is often optional
  // Add any other relevant fields you might encounter from OpenRouter
  // system_fingerprint?: string; // Example optional field
}


// =====================================
// Removed Redundant/Conflicting Declarations:
// =====================================

/*
// REMOVED - Duplicate/Outdated OpenRouterMessage
export interface OpenRouterMessage {
  role: "user" | "assistant" | "system"; // Add system role
  content: string;
}

// REMOVED - Less standard choice structure (often message.content is used instead of top-level text)
export interface OpenRouterChoice {
  text: any; // 'any' is vague, content is usually in message
  message: OpenRouterMessage; // This duplicates content info if 'text' is also present
  finish_reason?: string;
  index?: number;
}

// REMOVED - Duplicate/Simpler OpenRouterChatCompletionResponse
export interface OpenRouterChatCompletionResponse {
  choices: OpenRouterChoice[]; // Used the less standard choice type
  id?: string;
  created?: number;
  model?: string;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}
*/
---------- END openRouterTypes.ts ----------


---------- questionnaire.ts ----------
// src/types/questionnaire.ts
export enum Sex {
    MALE = 'male',
    FEMALE = 'female',
  }
  
  export enum ActivityLevel {
    SEDENTARY = 'sedentary',
    LIGHT = 'light',
    MODERATE = 'moderate',
    ACTIVE = 'active',
    VERY_ACTIVE = 'very_active',
  }
  
  export enum PrimaryGoal {
    LOSE_WEIGHT = 'lose_weight',
    MAINTAIN_WEIGHT = 'maintain_weight',
    GAIN_MUSCLE = 'gain_muscle',
  }
  
  export enum GoalIntensity {
    MILD = 'mild',
    MODERATE = 'moderate',
    AGGRESSIVE = 'aggressive',
  }
  
  export interface QuestionnaireFormData {
    age: string;
    sex: Sex | ''; // Allow empty initial state for Picker
    height: string; // cm
    weight: string; // kg
    activityLevel: ActivityLevel | ''; // Allow empty initial state
    primaryGoal: PrimaryGoal | ''; // Allow empty initial state
    goalIntensity?: GoalIntensity;
  }
  
  export interface CalculatedGoals {
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
  }
---------- END questionnaire.ts ----------


---------- settings.ts ----------
// src/types/settings.ts
// types/settings.ts
export const macros = ["calories", "protein", "carbs", "fat"] as const;
export type MacroType = (typeof macros)[number];

export type LanguageCode = 'en' | 'ru' | 'he' | 'system';

export interface MacroData {
  x: number; // Timestamp
  y: number; // Macro value
}

export interface Statistics {
  calories: MacroData[][];
  protein: MacroData[][];
  carbs: MacroData[][];
  fat: MacroData[][];
}

export interface Settings {
  theme: "light" | "dark" | "system";
  language: LanguageCode;
  dailyGoals: {
    [key in MacroType]: number;
  };
  settingsHistory?: { date: number; dailyGoals: { [key in MacroType]: number } }[];
}

export interface SettingsScreenProps {
  onThemeChange: (theme: "light" | "dark" | "system") => void;
  onLocaleChange: (locale: LanguageCode) => void; // Added for language change
}
---------- END settings.ts ----------


---------- dateUtils.ts ----------
// src/utils/dateUtils.ts
// utils/dateUtils.ts
import { format, parseISO, formatISO, isValid } from 'date-fns';
import { getDateFnLocale } from '../localization/i18n'; // Import for locale

/**
 * Formats a Date object, timestamp (number), or ISO date string (YYYY-MM-DD)
 * into a standard YYYY-MM-DD string representation.
 * Returns an empty string if the input is invalid.
 * @param dateInput - The date to format (Date object, timestamp number, or 'YYYY-MM-DD' string).
 * @returns The formatted date string 'YYYY-MM-DD' or empty string on error.
 */
export const formatDateISO = (dateInput: number | string | Date): string => {
    try {
        let dateObj: Date;
        if (dateInput instanceof Date) dateObj = dateInput;
        else if (typeof dateInput === 'string') dateObj = parseISO(dateInput);
        else if (typeof dateInput === 'number') dateObj = new Date(dateInput);
        else throw new Error("Invalid input type");

        if (!isValid(dateObj)) throw new Error("Invalid date value");
        return formatISO(dateObj, { representation: 'date' });
    } catch (error) {
        console.error("Error in formatDateISO:", error, "Input:", dateInput);
        return "";
    }
};

/**
 * Asynchronously formats a Date object, timestamp (number), or ISO date string (YYYY-MM-DD)
 * into a human-readable format (e.g., "MMMM dd, yyyy") using the current app locale.
 * Returns 'Invalid Date' if the input is invalid.
 * @param dateInput - The date to format (Date object, timestamp number, or 'YYYY-MM-DD' string).
 * @returns The formatted readable date string or 'Invalid Date' on error.
 */
export const formatDateReadableAsync = async (dateInput: number | string | Date): Promise<string> => {
    try {
        let dateObj: Date;
        if (dateInput instanceof Date) dateObj = dateInput;
        else if (typeof dateInput === 'string') dateObj = parseISO(dateInput);
        else if (typeof dateInput === 'number') dateObj = new Date(dateInput);
        else throw new Error("Invalid input type");

        if (!isValid(dateObj)) throw new Error("Invalid date value");

        const locale = await getDateFnLocale(); // Get date-fns locale
        return format(dateObj, 'MMMM dd, yyyy', { locale });
    } catch (error) {
         console.error("Error in formatDateReadableAsync:", error, "Input:", dateInput);
         return 'Invalid Date'; // Fallback for display
    }
};

/**
 * Gets today's date as a standard YYYY-MM-DD string.
 * @returns Today's date in 'YYYY-MM-DD' format.
 */
export const getTodayDateString = (): string => {
  return formatISO(new Date(), { representation: 'date' });
};
---------- END dateUtils.ts ----------


---------- gradingUtils.ts ----------
// src/utils/gradingUtils.ts
import { Food } from '../types/food';
import { Settings } from '../types/settings';

export type GradeLetter = 'A' | 'B' | 'C' | 'D' | 'F';

export interface FoodGradeResult {
    letter: GradeLetter;
    color: string;
    score: number; // Underlying score for potential adjustments
}

export const gradeColors: Record<GradeLetter, string> = {
    A: '#4CAF50', // Green
    B: '#8BC34A', // Light Green
    C: '#FFC107', // Amber/Yellow
    D: '#FF9800', // Orange
    F: '#F44336', // Red
};

const mapScoreToGradeDetails = (score: number): FoodGradeResult => {
    let letter: GradeLetter;
    const clampedScore = Math.max(0, Math.min(100, Math.round(score))); // Ensure score is 0-100

    if (clampedScore >= 85) letter = 'A';
    else if (clampedScore >= 70) letter = 'B';
    else if (clampedScore >= 55) letter = 'C';
    else if (clampedScore >= 40) letter = 'D';
    else letter = 'F';
    return { letter, color: gradeColors[letter], score: clampedScore };
};

/**
 * Calculates a base grade for a food item (per 100g) based on refined heuristics.
 * @param food The food item (calories, protein, carbs, fat per 100g).
 * @returns FoodGradeResult or null if grading is not possible.
 */
export const calculateBaseFoodGrade = (food: Food): FoodGradeResult | null => {
    if (!food || typeof food.calories !== 'number' || typeof food.protein !== 'number' || typeof food.carbs !== 'number' || typeof food.fat !== 'number') {
        return null;
    }

    const { calories, protein, carbs, fat } = food;
    let score = 70; // Start with a baseline score (e.g., C grade)

    // --- 1. Calorie Density (per 100g) ---
    if (calories < 100) score += 15; // Low density
    else if (calories < 200) score += 7;
    else if (calories > 350) score -= (calories - 350) * 0.08; // Penalize high density
    if (calories > 500) score -= 15; // Further penalty for very high density

    // --- 2. Protein Content (per 100g) ---
    if (protein > 20) score += 20; // Excellent protein
    else if (protein > 10) score += 10; // Good protein
    else if (protein < 5 && calories > 150) score -= 10; // Low protein for moderate/high cal food

    // --- 3. Fat Content & Type (Heuristic for "quality" based on balance) ---
    const caloriesFromFat = fat * 9;
    const percentageCaloriesFromFat = (calories > 0) ? (caloriesFromFat / calories) * 100 : 0;

    if (fat > 25) { // High total fat
        score -= (fat - 25) * 0.5;
        if (protein < fat * 0.5 && protein < 10) { // High fat, low protein suggests less ideal source
            score -= 10;
        }
    } else if (fat < 5 && percentageCaloriesFromFat < 20 && protein > 10) { // Low fat, potentially good if protein is present
        score += 5;
    }
    if (percentageCaloriesFromFat > 50) score -= 15; // More than 50% cals from fat is heavily penalized
    if (percentageCaloriesFromFat > 35 && percentageCaloriesFromFat <= 50) score -= 7;


    // --- 4. Carbohydrate Content & Type (Heuristic) ---
    const caloriesFromCarbs = carbs * 4;
    const percentageCaloriesFromCarbs = (calories > 0) ? (caloriesFromCarbs / calories) * 100 : 0;

    if (carbs > 40) { // High total carbs
        score -= (carbs - 40) * 0.3;
        if (protein < carbs * 0.1 && protein < 7) { // High carb, very low protein suggests refined carbs
            score -= 10;
        }
    }
    if (percentageCaloriesFromCarbs > 60) score -= 15; // More than 60% cals from carbs
    if (percentageCaloriesFromCarbs > 50 && percentageCaloriesFromCarbs <= 60) score -=7;

    // --- 5. Macronutrient Balance (Percentage of Calories) ---
    const caloriesFromProtein = protein * 4;
    const percentageCaloriesFromProtein = (calories > 0) ? (caloriesFromProtein / calories) * 100 : 0;

    // Ideal ranges (approx): Protein 20-30%, Fat 20-30%, Carbs 40-50%
    // Bonus for being within a generally healthy profile
    let balanceBonus = 0;
    if (percentageCaloriesFromProtein >= 15 && percentageCaloriesFromProtein <= 35) balanceBonus += 4;
    if (percentageCaloriesFromFat >= 15 && percentageCaloriesFromFat <= 35) balanceBonus += 4;
    if (percentageCaloriesFromCarbs >= 35 && percentageCaloriesFromCarbs <= 55) balanceBonus += 4;
    if (balanceBonus >=10) score += 10; // Max 10 points for good balance
    else if (balanceBonus >=8) score +=5;

    // Penalty for extreme imbalance if not already heavily penalized
    if (protein < 5 && fat > 20 && carbs > 30 && calories > 200) { // Low protein, high fat & carbs
        score -= 15;
    }

    return mapScoreToGradeDetails(score);
};

/**
 * Calculates a grade for a specific daily entry, considering portion size and daily goals.
 * @param food The food item.
 * @param consumedGrams The amount of the food consumed in grams.
 * @param dailyGoals The user's daily macronutrient goals.
 * @returns FoodGradeResult or null if grading is not possible.
 */
export const calculateDailyEntryGrade = (
    food: Food,
    consumedGrams: number,
    dailyGoals: Settings['dailyGoals']
): FoodGradeResult | null => {
    const baseGradeResult = calculateBaseFoodGrade(food);
    if (!baseGradeResult) return null;
    if (consumedGrams <= 0) return baseGradeResult;

    let currentScore = baseGradeResult.score;

    // Ensure dailyGoals are valid numbers, default to avoid division by zero or nonsensical percentages
    const safeGoals = {
        calories: Math.max(1, dailyGoals.calories || 2000), // Minimum 1 to avoid /0
        protein: Math.max(1, dailyGoals.protein || 100),
        carbs: Math.max(1, dailyGoals.carbs || 200),
        fat: Math.max(1, dailyGoals.fat || 70),
    };

    const factor = consumedGrams / 100;
    const consumedCalories = food.calories * factor;
    const consumedProtein = food.protein * factor;
    const consumedCarbs = food.carbs * factor;
    const consumedFat = food.fat * factor;

    // --- Adjustments based on portion size relative to daily goals ---

    // Penalty for consuming a large percentage of daily calorie allowance in one go
    const caloriePortionPercentage = (consumedCalories / safeGoals.calories) * 100;
    if (caloriePortionPercentage > 50) currentScore -= 20; // >50% of daily cals in one item
    else if (caloriePortionPercentage > 35) currentScore -= 10; // >35%

    // Penalty for consuming a large percentage of daily fat allowance
    const fatPortionPercentage = (consumedFat / safeGoals.fat) * 100;
    if (fatPortionPercentage > 60) currentScore -= 15; // >60% of daily fat
    else if (fatPortionPercentage > 40) currentScore -= 7;

    // Penalty for consuming a large percentage of daily carb allowance
    const carbPortionPercentage = (consumedCarbs / safeGoals.carbs) * 100;
    if (carbPortionPercentage > 60) currentScore -= 10; // >60% of daily carbs
    else if (carbPortionPercentage > 45) currentScore -= 5;

    // Bonus for significant protein contribution if calories are reasonable
    const proteinPortionPercentage = (consumedProtein / safeGoals.protein) * 100;
    if (proteinPortionPercentage > 25 && caloriePortionPercentage < 30) {
        currentScore += 10; // Good protein hit without too many cals
    } else if (proteinPortionPercentage > 15 && caloriePortionPercentage < 20) {
        currentScore += 5;
    }

    // Mitigation for small portions of "F" grade foods
    if (baseGradeResult.letter === 'F' && caloriePortionPercentage < 10) {
        currentScore += 15; // Small "treat" is less impactful
    } else if (baseGradeResult.letter === 'D' && caloriePortionPercentage < 7) {
        currentScore += 7;
    }

    // Slight penalty if a large portion of an "A" grade food makes macros significantly off for the day
    if (baseGradeResult.letter === 'A' &&
        (caloriePortionPercentage > 30 || fatPortionPercentage > 30 || carbPortionPercentage > 30) &&
        consumedGrams > 200 // and it's a large portion
    ) {
        currentScore -= 7;
    }

    return mapScoreToGradeDetails(currentScore);
};
---------- END gradingUtils.ts ----------


---------- iconUtils.ts ----------
// ---------- src/utils/iconUtils.ts ----------
// Import necessary modules
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getFoodIcon } from '../services/backendService'; // Import backend service

// Cache Configuration
const ICON_CACHE_TTL_MS = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds

// Define the cache entry type including timestamp
type CacheEntry = {
  url: string | null;
  timestamp: number; // Unix timestamp (ms) when the entry was created/updated
};

// In-memory cache for fast access
const memoryCache = new Map<string, CacheEntry>();

// Prefix for AsyncStorage keys (versioned)
const STORAGE_KEY_PREFIX = 'foodIconCacheBE_v2_'; // Updated version for TTL change

// --- Main Exported Function ---

/**
 * Gets the icon URL for a food item.
 * Checks memory cache, then AsyncStorage (respecting TTL), then calls the backend service.
 * Caches the result (including null for failures/not found) with a timestamp.
 *
 * @param foodName The name of the food item.
 * @param locale The desired locale for the icon search (defaults to 'en').
 * @returns A Promise resolving to the icon URL (string) or null if not found or an error occurred.
 */
export const getFoodIconUrl = async (foodName: string, locale: string = 'en'): Promise<string | null> => {
  if (!foodName || foodName.trim() === '') {
      console.warn("getFoodIconUrl called with empty foodName.");
      return null;
  }

  const cacheKey = `${locale}_${foodName.toLowerCase().trim()}`;
  const now = Date.now();

  // 1. Check Memory Cache (and TTL)
  const memoryEntry = memoryCache.get(cacheKey);
  if (memoryEntry !== undefined) {
    if (now < memoryEntry.timestamp + ICON_CACHE_TTL_MS) {
        // console.log(`Icon Cache HIT (Memory, valid): ${cacheKey} -> ${memoryEntry.url}`);
        return memoryEntry.url;
    } else {
        // console.log(`Icon Cache STALE (Memory): ${cacheKey}`);
        memoryCache.delete(cacheKey); // Remove stale entry from memory
    }
  }

  // 2. Check AsyncStorage (and TTL)
  const storageKey = STORAGE_KEY_PREFIX + cacheKey;
  try {
    const storedValue = await AsyncStorage.getItem(storageKey);
    if (storedValue !== null) {
      const parsed: CacheEntry = JSON.parse(storedValue);
      if (parsed && typeof parsed.timestamp === 'number' && typeof parsed.url !== 'undefined') {
        if (now < parsed.timestamp + ICON_CACHE_TTL_MS) {
            // console.log(`Icon Cache HIT (Storage, valid): ${cacheKey} -> ${parsed.url}`);
            memoryCache.set(cacheKey, parsed); // Update memory cache
            return parsed.url;
        } else {
            // console.log(`Icon Cache STALE (Storage): ${cacheKey}`);
            // Don't need to remove from storage here, fetching new will overwrite
        }
      } else {
         console.warn(`Invalid cache entry format found in storage for ${storageKey}. Ignoring.`);
         // Optionally remove invalid entry: await AsyncStorage.removeItem(storageKey);
      }
    }
  } catch (error) {
    console.error(`Error reading icon cache from AsyncStorage for key ${storageKey}:`, error);
    // Continue to fetch if storage read fails
  }

  // 3. Fetch from Backend API
  // console.log(`Icon Cache MISS or STALE / Fetching Backend API: ${cacheKey}`);
  let iconUrl: string | null = null;
  try {
      // Call the backend service function - it handles its own errors and returns null on failure
      iconUrl = await getFoodIcon(foodName, locale);
      // console.log(`Backend returned icon URL for ${foodName}: ${iconUrl}`);

  } catch (error) {
      // This catch block might be redundant if getFoodIcon handles all errors,
      // but kept as a safeguard against unexpected issues in the service call itself.
      console.error(`Unexpected error calling getFoodIcon service for ${foodName}:`, error);
      iconUrl = null; // Ensure null is cached on unexpected error during service call
  }

  // 4. Cache the final result (even nulls) from backend with current timestamp
  const newCacheEntry: CacheEntry = { url: iconUrl, timestamp: now };
  memoryCache.set(cacheKey, newCacheEntry); // Cache in memory
  try {
    // Cache in AsyncStorage
    await AsyncStorage.setItem(storageKey, JSON.stringify(newCacheEntry));
  } catch (error) {
    console.error(`Error saving icon cache to AsyncStorage for key ${storageKey}:`, error);
  }

  return iconUrl;
};

// --- Cache Management (Unchanged - manual clear still useful) ---

export const clearIconCache = async () => {
    memoryCache.clear();
    try {
        const keys = await AsyncStorage.getAllKeys();
        const cacheKeys = keys.filter(key => key.startsWith(STORAGE_KEY_PREFIX));
        if (cacheKeys.length > 0) {
             await AsyncStorage.multiRemove(cacheKeys);
             console.log(`Cleared ${cacheKeys.length} items from AsyncStorage icon cache (Backend Version).`);
        }
    } catch (error) {
        console.error("Error clearing backend icon cache from AsyncStorage:", error);
    }
};

export const logMemoryCacheSize = () => {
    console.log(`In-memory icon cache size: ${memoryCache.size}`);
};
---------- END iconUtils.ts ----------


---------- imageUtils.ts ----------
// src/utils/imageUtils.ts
import * as ImageManipulator from 'expo-image-manipulator';
import { ImagePickerAsset } from 'expo-image-picker';
import { Alert } from 'react-native';
import * as FileSystem from 'expo-file-system';
import { t } from '../localization/i18n'; // Import t

const MAX_IMAGE_DIMENSION = 1024;
const IMAGE_COMPRESSION_QUALITY = 0.7;

export const compressImageIfNeeded = async (
    asset: ImagePickerAsset
): Promise<ImageManipulator.ImageResult | null> => {
    try {
        const actions: ImageManipulator.Action[] = [];
        let needsResize = false;
        if (asset.width > MAX_IMAGE_DIMENSION || asset.height > MAX_IMAGE_DIMENSION) {
            needsResize = true;
            const resizeOptions: ImageManipulator.ActionResize['resize'] = { width: undefined, height: undefined, };
            if (asset.width > asset.height) resizeOptions.width = MAX_IMAGE_DIMENSION;
            else resizeOptions.height = MAX_IMAGE_DIMENSION;
            actions.push({ resize: resizeOptions });
        } else {
            return null;
        }
        if (needsResize) {
            const saveOptions: ImageManipulator.SaveOptions = {
                compress: IMAGE_COMPRESSION_QUALITY, format: ImageManipulator.SaveFormat.JPEG, base64: false,
            };
            const result = await ImageManipulator.manipulateAsync(asset.uri, actions, saveOptions);
            return result;
        } else {
            return null;
        }
    } catch (error) {
        Alert.alert(t('utils.image.alertCompressionError'), t('utils.image.alertCompressionErrorMessage'));
        return null;
    }
};

export async function getBase64FromUri(uri: string): Promise<string> {
    try {
        const base64 = await FileSystem.readAsStringAsync(uri, { encoding: FileSystem.EncodingType.Base64, });
        return base64;
    } catch (error: any) {
        throw new Error(t('utils.image.errorFailedToRead', { error: error.message || 'Unknown error' }));
    }
}
---------- END imageUtils.ts ----------


---------- macros.ts ----------
// src/utils/macros.ts
// src/utils/macros.ts
import * as FileSystem from 'expo-file-system';
import {
    getMacrosForRecipe,
    getMacrosForImageSingle,
    getMacrosForImageMultiple,
    BackendError
} from '../services/backendService';
import { Alert } from 'react-native';
import { Macros, MacrosWithFoodName, EstimatedFoodItem } from '../types/macros';
import { ImagePickerAsset } from 'expo-image-picker';
import { getBase64FromUri } from './imageUtils'; // Corrected import path check
import { t } from '../localization/i18n';

// --- Helper function to determine MIME type ---
export function determineMimeType(asset: {
    uri: string;
    mimeType?: string | null;
    fileName?: string | null;
}): string {
    // 1. Prioritize asset.mimeType
    if (asset.mimeType && asset.mimeType.includes('/')) {
        console.log(`MIME Type: Using provided type: ${asset.mimeType}`);
        return asset.mimeType;
    }

    // 2. Infer from URI extension (fallback)
    const uriParts = asset.uri.split('.');
    const extension = uriParts.pop()?.toLowerCase();
    console.log(`MIME Type: Inferring from extension: .${extension}`);
    switch (extension) {
        case 'jpg': case 'jpeg': return 'image/jpeg';
        case 'png': return 'image/png';
        case 'gif': return 'image/gif';
        case 'webp': return 'image/webp';
        case 'bmp': return 'image/bmp';
        default:
            console.warn(`MIME Type: Could not determine specific type for URI: ${asset.uri}. Defaulting to image/jpeg.`);
            return 'image/jpeg'; // Default
    }
}


// --- Service Interaction Functions (with improved error handling context) ---

// Get macros from recipe text
export async function getMacrosFromText(
    foodName: string,
    ingredients: string
): Promise<Macros> {
    try {
        console.log(`Util: Requesting macros for recipe: "${foodName}"`);
        const macros = await getMacrosForRecipe(foodName, ingredients);
        console.log(`Util: Received macros for recipe: "${foodName}"`);
        return macros;
    } catch (error) {
        console.error(`Util: Error getting macros for recipe "${foodName}":`, error);
        const message = error instanceof BackendError
            ? error.message
            : t('utils.macros.errorGetMacrosRecipe', { error: error instanceof Error ? error.message : String(error) });
        Alert.alert(t('utils.macros.alertAiErrorRecipe'), message);
        throw error; // Re-throw to allow caller to handle
    }
}

// Get macros for a single food item from an image asset
export async function getMacrosForImageFile(asset: ImagePickerAsset): Promise<MacrosWithFoodName> {
    let base64File: string;
    try {
        // Use shared utility for base64 conversion
        base64File = await getBase64FromUri(asset.uri);
    } catch (err) {
        Alert.alert(t('utils.macros.alertImageReadError'), err instanceof Error ? err.message : t('utils.macros.alertImageReadErrorMessage'));
        throw err; // Re-throw error for caller to handle
    }

    const mimeType = determineMimeType(asset);
    console.log(`Util: Requesting single food analysis. MIME: ${mimeType}, Asset URI: ${asset.uri}`);

    try {
        const result = await getMacrosForImageSingle(base64File, mimeType);
        console.log(`Util: Received single food analysis: ${result.foodName}`);
        return result;
    } catch (error) {
        console.error(`Util: Error getting single food macros for image ${asset.uri}:`, error);
        const message = error instanceof BackendError
            ? error.message
            : t('utils.macros.errorImageAnalysis', { error: error instanceof Error ? error.message : String(error) });
        Alert.alert(t('utils.macros.alertAnalysisFailedSingle'), message);
        throw error; // Re-throw error
    }
}

// Get multiple estimated food items from an image asset
export async function getMultipleFoodsFromImage(base64Image: string, mimeType: string): Promise<EstimatedFoodItem[]> {
    console.log(`Util: Requesting multi-food analysis. MIME: ${mimeType}`);

    try {
        const results = await getMacrosForImageMultiple(base64Image, mimeType);
        console.log(`Util: Received ${results.length} estimated items from backend.`);
        if (!Array.isArray(results)) {
            console.error("Util: Backend returned non-array for multiple food items:", results);
            throw new Error(t('utils.macros.errorInvalidResponseMultiple'));
        }
        return results;
    } catch (error) {
        console.error(`Util: Error getting multiple food macros from image:`, error);
         const message = error instanceof BackendError
            ? error.message
            : t('utils.macros.errorCouldNotAnalyze', { error: error instanceof Error ? error.message : String(error) });
        Alert.alert(t('utils.macros.alertQuickAddFailedMulti'), message);
        throw error; // Re-throw error
    }
}

export { BackendError, EstimatedFoodItem, Macros, MacrosWithFoodName };
---------- END macros.ts ----------


---------- units.ts ----------
// src/utils/units.ts
// src/utils/units.ts
import { Alert } from 'react-native';
import { estimateGramsNaturalLanguage, BackendError } from '../services/backendService';
import { t } from '../localization/i18n'; // Import t

export async function getGramsFromNaturalLanguage(
    foodName: string,
    quantityDescription: string
): Promise<number> {
    try {
        const grams = await estimateGramsNaturalLanguage(foodName, quantityDescription);
        return grams;
    } catch (error) {
        const message = error instanceof BackendError
            ? error.message
            : t('utils.units.errorCouldNotEstimateGrams', { error: error instanceof Error ? error.message : String(error) });
        Alert.alert(t('utils.units.alertAiEstimationFailed'), message);
        throw error;
    }
}
---------- END units.ts ----------


---------- validationUtils.ts ----------
// utils/validationUtils.ts

export const isValidNumberInput = (value: string): boolean => {
    return /^[0-9]*(\.[0-9]*)?$/.test(value) && !isNaN(parseFloat(value));
  };
  
  export const isNotEmpty = (value: string): boolean => {
    return value.trim() !== '';
  };
---------- END validationUtils.ts ----------


---------- tsconfig.json ----------
// tsconfig.json
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "esModuleInterop": true,
    "module": "commonjs"
  }
}
---------- END tsconfig.json ----------

